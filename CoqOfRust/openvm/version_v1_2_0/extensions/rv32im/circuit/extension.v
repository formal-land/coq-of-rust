(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module extension.
  (* StructRecord
    {
      name := "Rv32IConfig";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("system", Ty.path "openvm_circuit::arch::config::SystemConfig");
          ("base", Ty.path "openvm_rv32im_circuit::extension::Rv32I");
          ("io", Ty.path "openvm_rv32im_circuit::extension::Rv32Io")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32IConfig.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig" ],
              self
            |) in
          Value.mkStructRecord
            "openvm_rv32im_circuit::extension::Rv32IConfig"
            []
            []
            [
              ("system",
                M.call_closure (|
                  Ty.path "openvm_circuit::arch::config::SystemConfig",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "openvm_circuit::arch::config::SystemConfig",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::extension::Rv32IConfig",
                            "system"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("base",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32I",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "openvm_rv32im_circuit::extension::Rv32I",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::extension::Rv32IConfig",
                            "base"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("io",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32Io",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "openvm_rv32im_circuit::extension::Rv32Io",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::extension::Rv32IConfig",
                            "io"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32IConfig.
  
  Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32IConfig.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32IConfig" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "system" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::config::SystemConfig" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::extension::Rv32IConfig",
                          "system"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "base" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32I" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::extension::Rv32IConfig",
                          "base"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "io" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.path "openvm_rv32im_circuit::extension::Rv32Io" ]
                    ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_rv32im_circuit::extension::Rv32Io" ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::extension::Rv32IConfig",
                              "io"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32IConfig.
  
  (*
  Enum Rv32IConfigExecutor
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "System";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ] ];
        };
        {
          name := "Base";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ];
        };
        {
          name := "Io";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32IConfigExecutor_System :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System" 0.
  Axiom IsDiscriminant_Rv32IConfigExecutor_Base :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base" 1.
  Axiom IsDiscriminant_Rv32IConfigExecutor_Io :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io" 2.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                                    []
                                    [ F ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                []
                                [ F ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                []
                                [ F ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
  
  Module Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition execute (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; memory; instruction; from_state ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          let memory :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ]
                ],
              memory
            |) in
          let instruction :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
              instruction
            |) in
          let from_state :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                []
                [ Ty.path "u32" ],
              from_state
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ];
                Ty.path "openvm_circuit::arch::execution::ExecutionError"
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition get_opcode_name
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; opcode ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          let opcode := M.alloc (| Ty.path "usize", opcode |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::execution::InstructionExecutor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("execute", InstanceField.Method (execute F));
          ("get_opcode_name", InstanceField.Method (get_opcode_name F))
        ].
  End Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_extensions_SystemExecutor_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_extensions_SystemExecutor_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IExecutor_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IExecutor_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IoExecutor_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IoExecutor_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::SystemExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::SystemExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::System",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::SystemExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::SystemExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Base",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor::Io",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F.
  
  (*
  Enum Rv32IConfigPeriphery
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "System";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ] ];
        };
        {
          name := "Base";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ] ];
        };
        {
          name := "Io";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ] ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32IConfigPeriphery_System :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System" 0.
  Axiom IsDiscriminant_Rv32IConfigPeriphery_Base :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base" 1.
  Axiom IsDiscriminant_Rv32IConfigPeriphery_Io :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io" 2.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                                    []
                                    [ F ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                []
                                [ F ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                []
                                [ F ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_extensions_SystemPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_extensions_SystemPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::SystemPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::SystemPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::System",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::SystemPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::SystemPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Base",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery::Io",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F.
  
  Module Impl_openvm_circuit_arch_config_VmConfig_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32IConfig.
    Definition Self (F : Ty.t) : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig".
    
    (* VmConfig *)
    Definition _Executor (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition _Periphery (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition system (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                M.get_trait_method (|
                  "openvm_circuit::arch::config::VmConfig",
                  Ty.path "openvm_circuit::arch::config::SystemConfig",
                  [],
                  [ F ],
                  "system",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::extension::Rv32IConfig",
                          "system"
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition system_mut (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::config::VmConfig",
                      Ty.path "openvm_circuit::arch::config::SystemConfig",
                      [],
                      [ F ],
                      "system_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::extension::Rv32IConfig",
                              "system"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition create_chip_complex
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                  []
                  [
                    F;
                    Ty.associated_in_trait
                      "openvm_circuit::arch::config::VmConfig"
                      []
                      [ F ]
                      (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig")
                      "Executor";
                    Ty.associated_in_trait
                      "openvm_circuit::arch::config::VmConfig"
                      []
                      [ F ]
                      (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig")
                      "Periphery"
                  ];
                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ complex :
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                          []
                          [ F ]
                      ] :=
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                          []
                          [ F ]
                      ],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ];
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                                []
                                [ F ]
                            ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ];
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                                  []
                                  [ F ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                                    []
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ],
                            M.get_trait_method (|
                              "openvm_circuit::arch::config::VmConfig",
                              Ty.path "openvm_circuit::arch::config::SystemConfig",
                              [],
                              [ F ],
                              "create_chip_complex",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_rv32im_circuit::extension::Rv32IConfig",
                                  "system"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                            []
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                            []
                                            [ F ]
                                        ];
                                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ0_0
                            |) in
                          M.read (| val |)))
                    ]
                  |) in
                let~ complex :
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                          []
                          [ F ]
                      ] :=
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                          []
                          [ F ]
                      ],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ];
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                []
                                [ F ]
                            ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ];
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                  []
                                  [ F ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                                    []
                                    [ F ]
                                ],
                              "extend",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                  []
                                  [ F ];
                                Ty.path "openvm_rv32im_circuit::extension::Rv32I"
                              ]
                            |),
                            [
                              M.read (| complex |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_rv32im_circuit::extension::Rv32IConfig",
                                      "base"
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                            []
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                            []
                                            [ F ]
                                        ];
                                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ0_0
                            |) in
                          M.read (| val |)))
                    ]
                  |) in
                let~ complex :
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                          []
                          [ F ]
                      ] :=
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                          []
                          [ F ]
                      ],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ];
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                []
                                [ F ]
                            ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ];
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                  []
                                  [ F ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ]
                                ],
                              "extend",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                  []
                                  [ F ];
                                Ty.path "openvm_rv32im_circuit::extension::Rv32Io"
                              ]
                            |),
                            [
                              M.read (| complex |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_rv32im_circuit::extension::Rv32IConfig",
                                      "io"
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                            []
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                            []
                                            [ F ]
                                        ];
                                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ0_0
                            |) in
                          M.read (| val |)))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                    ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                    ]
                    [ M.read (| complex |) ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::config::VmConfig"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("Executor", InstanceField.Ty (_Executor F));
          ("Periphery", InstanceField.Ty (_Periphery F));
          ("system", InstanceField.Method (system F));
          ("system_mut", InstanceField.Method (system_mut F));
          ("create_chip_complex", InstanceField.Method (create_chip_complex F))
        ].
  End Impl_openvm_circuit_arch_config_VmConfig_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32IConfig.
  
  Module Impl_openvm_rv32im_circuit_extension_Rv32IConfig.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig".
    
    (* derive_new::new *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ system; base; io ] =>
        ltac:(M.monadic
          (let system :=
            M.alloc (| Ty.path "openvm_circuit::arch::config::SystemConfig", system |) in
          let base := M.alloc (| Ty.path "openvm_rv32im_circuit::extension::Rv32I", base |) in
          let io := M.alloc (| Ty.path "openvm_rv32im_circuit::extension::Rv32Io", io |) in
          Value.mkStructRecord
            "openvm_rv32im_circuit::extension::Rv32IConfig"
            []
            []
            [ ("system", M.read (| system |)); ("base", M.read (| base |)); ("io", M.read (| io |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    (*
        pub fn with_public_values(public_values: usize) -> Self {
            let system = SystemConfig::default()
                .with_continuations()
                .with_public_values(public_values);
            Self {
                system,
                base: Default::default(),
                io: Default::default(),
            }
        }
    *)
    Definition with_public_values (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ public_values ] =>
        ltac:(M.monadic
          (let public_values := M.alloc (| Ty.path "usize", public_values |) in
          M.read (|
            let~ system : Ty.path "openvm_circuit::arch::config::SystemConfig" :=
              M.call_closure (|
                Ty.path "openvm_circuit::arch::config::SystemConfig",
                M.get_associated_function (|
                  Ty.path "openvm_circuit::arch::config::SystemConfig",
                  "with_public_values",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.path "openvm_circuit::arch::config::SystemConfig",
                    M.get_associated_function (|
                      Ty.path "openvm_circuit::arch::config::SystemConfig",
                      "with_continuations",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "openvm_circuit::arch::config::SystemConfig",
                        M.get_trait_method (|
                          "core::default::Default",
                          Ty.path "openvm_circuit::arch::config::SystemConfig",
                          [],
                          [],
                          "default",
                          [],
                          []
                        |),
                        []
                      |)
                    ]
                  |);
                  M.read (| public_values |)
                ]
              |) in
            M.alloc (|
              Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
              Value.mkStructRecord
                "openvm_rv32im_circuit::extension::Rv32IConfig"
                []
                []
                [
                  ("system", M.read (| system |));
                  ("base",
                    M.call_closure (|
                      Ty.path "openvm_rv32im_circuit::extension::Rv32I",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "openvm_rv32im_circuit::extension::Rv32I",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |));
                  ("io",
                    M.call_closure (|
                      Ty.path "openvm_rv32im_circuit::extension::Rv32Io",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "openvm_rv32im_circuit::extension::Rv32Io",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_with_public_values :
      M.IsAssociatedFunction.C Self "with_public_values" with_public_values.
    Admitted.
    Global Typeclasses Opaque with_public_values.
    
    (*
        pub fn with_public_values_and_segment_len(public_values: usize, segment_len: usize) -> Self {
            let system = SystemConfig::default()
                .with_continuations()
                .with_public_values(public_values)
                .with_max_segment_len(segment_len);
            Self {
                system,
                base: Default::default(),
                io: Default::default(),
            }
        }
    *)
    Definition with_public_values_and_segment_len
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ public_values; segment_len ] =>
        ltac:(M.monadic
          (let public_values := M.alloc (| Ty.path "usize", public_values |) in
          let segment_len := M.alloc (| Ty.path "usize", segment_len |) in
          M.read (|
            let~ system : Ty.path "openvm_circuit::arch::config::SystemConfig" :=
              M.call_closure (|
                Ty.path "openvm_circuit::arch::config::SystemConfig",
                M.get_associated_function (|
                  Ty.path "openvm_circuit::arch::config::SystemConfig",
                  "with_max_segment_len",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.path "openvm_circuit::arch::config::SystemConfig",
                    M.get_associated_function (|
                      Ty.path "openvm_circuit::arch::config::SystemConfig",
                      "with_public_values",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "openvm_circuit::arch::config::SystemConfig",
                        M.get_associated_function (|
                          Ty.path "openvm_circuit::arch::config::SystemConfig",
                          "with_continuations",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "openvm_circuit::arch::config::SystemConfig",
                            M.get_trait_method (|
                              "core::default::Default",
                              Ty.path "openvm_circuit::arch::config::SystemConfig",
                              [],
                              [],
                              "default",
                              [],
                              []
                            |),
                            []
                          |)
                        ]
                      |);
                      M.read (| public_values |)
                    ]
                  |);
                  M.read (| segment_len |)
                ]
              |) in
            M.alloc (|
              Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
              Value.mkStructRecord
                "openvm_rv32im_circuit::extension::Rv32IConfig"
                []
                []
                [
                  ("system", M.read (| system |));
                  ("base",
                    M.call_closure (|
                      Ty.path "openvm_rv32im_circuit::extension::Rv32I",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "openvm_rv32im_circuit::extension::Rv32I",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |));
                  ("io",
                    M.call_closure (|
                      Ty.path "openvm_rv32im_circuit::extension::Rv32Io",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "openvm_rv32im_circuit::extension::Rv32Io",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_with_public_values_and_segment_len :
      M.IsAssociatedFunction.C
        Self
        "with_public_values_and_segment_len"
        with_public_values_and_segment_len.
    Admitted.
    Global Typeclasses Opaque with_public_values_and_segment_len.
  End Impl_openvm_rv32im_circuit_extension_Rv32IConfig.
  
  Module underscore.
    Module Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32IConfig.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig".
      
      (* Serialize *)
      Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig" ],
                self
              |) in
            let __serializer := M.alloc (| __S, __serializer |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct" :=
                    M.match_operator (|
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_struct",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "Rv32IConfig" |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.cast (Ty.path "usize") (Value.Bool false);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "openvm_circuit::arch::config::SystemConfig" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "system" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::extension::Rv32IConfig",
                                        "system"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "openvm_rv32im_circuit::extension::Rv32I" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "base" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::extension::Rv32IConfig",
                                        "base"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "openvm_rv32im_circuit::extension::Rv32Io" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "io" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::extension::Rv32IConfig",
                                        "io"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32IConfig.
    Module Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32IConfig.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig".
      
      (* Deserialize *)
      Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __D, __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig";
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_struct",
                [],
                [ Ty.path "openvm_rv32im_circuit::extension::_'1::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "Rv32IConfig" |);
                M.read (|
                  get_constant (|
                    "openvm_rv32im_circuit::extension::_'1::deserialize::FIELDS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.mkStructRecord
                  "openvm_rv32im_circuit::extension::_'1::deserialize::__Visitor"
                  []
                  []
                  [
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig" ]
                        []);
                    ("lifetime",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                        [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32IConfig.
    Module Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig".
      
      (* Serialize *)
      Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig" ],
                self
              |) in
            let __serializer := M.alloc (| __S, __serializer |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct" :=
                    M.match_operator (|
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_struct",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "Rv32ImConfig" |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.cast (Ty.path "usize") (Value.Bool false);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "rv32i" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::extension::Rv32ImConfig",
                                        "rv32i"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "openvm_rv32im_circuit::extension::Rv32M" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "mul" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::extension::Rv32ImConfig",
                                        "mul"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
    Module Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig".
      
      (* Deserialize *)
      Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __D, __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig";
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_struct",
                [],
                [ Ty.path "openvm_rv32im_circuit::extension::_'3::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "Rv32ImConfig" |);
                M.read (|
                  get_constant (|
                    "openvm_rv32im_circuit::extension::_'3::deserialize::FIELDS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.mkStructRecord
                  "openvm_rv32im_circuit::extension::_'3::deserialize::__Visitor"
                  []
                  []
                  [
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig" ]
                        []);
                    ("lifetime",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                        [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
    Module Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32I.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32I".
      
      (* Serialize *)
      Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32I" ],
                self
              |) in
            let __serializer := M.alloc (| __S, __serializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ],
              M.get_trait_method (|
                "serde::ser::Serializer",
                __S,
                [],
                [],
                "serialize_unit_struct",
                [],
                []
              |),
              [ M.read (| __serializer |); mk_str (| "Rv32I" |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32I.
    Module Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32I.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32I".
      
      (* Deserialize *)
      Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __D, __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "openvm_rv32im_circuit::extension::Rv32I";
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_unit_struct",
                [],
                [ Ty.path "openvm_rv32im_circuit::extension::_'5::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "Rv32I" |);
                Value.mkStructRecord
                  "openvm_rv32im_circuit::extension::_'5::deserialize::__Visitor"
                  []
                  []
                  [
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.path "openvm_rv32im_circuit::extension::Rv32I" ]
                        []);
                    ("lifetime",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                        [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32I.
    Module Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32Io.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32Io".
      
      (* Serialize *)
      Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32Io" ],
                self
              |) in
            let __serializer := M.alloc (| __S, __serializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ],
              M.get_trait_method (|
                "serde::ser::Serializer",
                __S,
                [],
                [],
                "serialize_unit_struct",
                [],
                []
              |),
              [ M.read (| __serializer |); mk_str (| "Rv32Io" |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32Io.
    Module Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32Io.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32Io".
      
      (* Deserialize *)
      Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __D, __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "openvm_rv32im_circuit::extension::Rv32Io";
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_unit_struct",
                [],
                [ Ty.path "openvm_rv32im_circuit::extension::_'7::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "Rv32Io" |);
                Value.mkStructRecord
                  "openvm_rv32im_circuit::extension::_'7::deserialize::__Visitor"
                  []
                  []
                  [
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.path "openvm_rv32im_circuit::extension::Rv32Io" ]
                        []);
                    ("lifetime",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                        [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32Io.
    Module Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32M.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32M".
      
      (* Serialize *)
      Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32M" ],
                self
              |) in
            let __serializer := M.alloc (| __S, __serializer |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct" :=
                    M.match_operator (|
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_struct",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "Rv32M" |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [
                                    M.cast (Ty.path "usize") (Value.Bool false);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u32" ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "range_tuple_checker_sizes" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::extension::Rv32M",
                                        "range_tuple_checker_sizes"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_extension_Rv32M.
    Module Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32M.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32M".
      
      (* Deserialize *)
      Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __D, __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "openvm_rv32im_circuit::extension::Rv32M";
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_struct",
                [],
                [ Ty.path "openvm_rv32im_circuit::extension::_'9::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "Rv32M" |);
                M.read (|
                  get_constant (|
                    "openvm_rv32im_circuit::extension::_'9::deserialize::FIELDS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.mkStructRecord
                  "openvm_rv32im_circuit::extension::_'9::deserialize::__Visitor"
                  []
                  []
                  [
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.path "openvm_rv32im_circuit::extension::Rv32M" ]
                        []);
                    ("lifetime",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                        [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_extension_Rv32M.
  End underscore.
  
  
  (* StructRecord
    {
      name := "Rv32ImConfig";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("rv32i", Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig");
          ("mul", Ty.path "openvm_rv32im_circuit::extension::Rv32M")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig" ],
              self
            |) in
          Value.mkStructRecord
            "openvm_rv32im_circuit::extension::Rv32ImConfig"
            []
            []
            [
              ("rv32i",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::extension::Rv32ImConfig",
                            "rv32i"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("mul",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32M",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "openvm_rv32im_circuit::extension::Rv32M",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::extension::Rv32ImConfig",
                            "mul"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
  
  Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32ImConfig" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rv32i" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::extension::Rv32ImConfig",
                          "rv32i"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "mul" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.path "openvm_rv32im_circuit::extension::Rv32M" ]
                    ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_rv32im_circuit::extension::Rv32M" ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::extension::Rv32ImConfig",
                              "mul"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
  
  Module Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.mkStructRecord
            "openvm_rv32im_circuit::extension::Rv32ImConfig"
            []
            []
            [
              ("rv32i",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("mul",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32M",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "openvm_rv32im_circuit::extension::Rv32M",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
  
  (*
  Enum Rv32ImConfigExecutor
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "Rv32i";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ]
              ];
        };
        {
          name := "Mul";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32ImConfigExecutor_Rv32i :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i" 0.
  Axiom IsDiscriminant_Rv32ImConfigExecutor_Mul :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul" 1.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                []
                                [ F ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
  
  Module Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition execute (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; memory; instruction; from_state ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          let memory :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ]
                ],
              memory
            |) in
          let instruction :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
              instruction
            |) in
          let from_state :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                []
                [ Ty.path "u32" ],
              from_state
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ];
                Ty.path "openvm_circuit::arch::execution::ExecutionError"
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition get_opcode_name
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; opcode ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          let opcode := M.alloc (| Ty.path "usize", opcode |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::execution::InstructionExecutor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("execute", InstanceField.Method (execute F));
          ("get_opcode_name", InstanceField.Method (get_opcode_name F))
        ].
  End Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IConfigExecutor_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32MExecutor_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32MExecutor_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Rv32i",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor::Mul",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigExecutor_F.
  
  (*
  Enum Rv32ImConfigPeriphery
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "Rv32i";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ]
              ];
        };
        {
          name := "Mul";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ] ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32ImConfigPeriphery_Rv32i :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i" 0.
  Axiom IsDiscriminant_Rv32ImConfigPeriphery_Mul :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul" 1.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                        []
                        [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                []
                                [ F ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32IConfigPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32MPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_extension_Rv32MPeriphery_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                    []
                    [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Rv32i",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery::Mul",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                            M.get_trait_method (|
                                              "openvm_circuit::arch::extensions::AnyEnum",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "as_any_kind_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32ImConfigPeriphery_F.
  
  Module Impl_openvm_circuit_arch_config_VmConfig_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
    Definition Self (F : Ty.t) : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig".
    
    (* VmConfig *)
    Definition _Executor (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor") [] [ F ].
    
    (* VmConfig *)
    Definition _Periphery (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery") [] [ F ].
    
    (* VmConfig *)
    Definition system (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                M.get_trait_method (|
                  "openvm_circuit::arch::config::VmConfig",
                  Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                  [],
                  [ F ],
                  "system",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::extension::Rv32ImConfig",
                          "rv32i"
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition system_mut (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::config::VmConfig",
                      Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                      [],
                      [ F ],
                      "system_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::extension::Rv32ImConfig",
                              "rv32i"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* VmConfig *)
    Definition create_chip_complex
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                  []
                  [
                    F;
                    Ty.associated_in_trait
                      "openvm_circuit::arch::config::VmConfig"
                      []
                      [ F ]
                      (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig")
                      "Executor";
                    Ty.associated_in_trait
                      "openvm_circuit::arch::config::VmConfig"
                      []
                      [ F ]
                      (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig")
                      "Periphery"
                  ];
                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ complex :
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                          []
                          [ F ]
                      ] :=
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                          []
                          [ F ]
                      ],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ];
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                []
                                [ F ]
                            ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ];
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                  []
                                  [ F ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ],
                            M.get_trait_method (|
                              "openvm_circuit::arch::config::VmConfig",
                              Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                              [],
                              [ F ],
                              "create_chip_complex",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_rv32im_circuit::extension::Rv32ImConfig",
                                  "rv32i"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                            []
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                            []
                                            [ F ]
                                        ];
                                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ0_0
                            |) in
                          M.read (| val |)))
                    ]
                  |) in
                let~ complex :
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                          []
                          [ F ]
                      ] :=
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                          []
                          [ F ]
                      ],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ];
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                []
                                [ F ]
                            ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ];
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                  []
                                  [ F ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                    []
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                            ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32IConfigPeriphery")
                                    []
                                    [ F ]
                                ],
                              "extend",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                  []
                                  [ F ];
                                Ty.path "openvm_rv32im_circuit::extension::Rv32M"
                              ]
                            |),
                            [
                              M.read (| complex |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_rv32im_circuit::extension::Rv32ImConfig",
                                      "mul"
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                            []
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                            []
                                            [ F ]
                                        ];
                                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                                    []
                                    [ F ]
                                ],
                              γ0_0
                            |) in
                          M.read (| val |)))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                    ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfigPeriphery")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                    ]
                    [ M.read (| complex |) ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::config::VmConfig"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("Executor", InstanceField.Ty (_Executor F));
          ("Periphery", InstanceField.Ty (_Periphery F));
          ("system", InstanceField.Method (system F));
          ("system_mut", InstanceField.Method (system_mut F));
          ("create_chip_complex", InstanceField.Method (create_chip_complex F))
        ].
  End Impl_openvm_circuit_arch_config_VmConfig_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32ImConfig.
  
  Module Impl_openvm_rv32im_circuit_extension_Rv32ImConfig.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32ImConfig".
    
    (* derive_new::new *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ rv32i; mul ] =>
        ltac:(M.monadic
          (let rv32i :=
            M.alloc (| Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig", rv32i |) in
          let mul := M.alloc (| Ty.path "openvm_rv32im_circuit::extension::Rv32M", mul |) in
          Value.mkStructRecord
            "openvm_rv32im_circuit::extension::Rv32ImConfig"
            []
            []
            [ ("rv32i", M.read (| rv32i |)); ("mul", M.read (| mul |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    (*
        pub fn with_public_values(public_values: usize) -> Self {
            Self {
                rv32i: Rv32IConfig::with_public_values(public_values),
                mul: Default::default(),
            }
        }
    *)
    Definition with_public_values (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ public_values ] =>
        ltac:(M.monadic
          (let public_values := M.alloc (| Ty.path "usize", public_values |) in
          Value.mkStructRecord
            "openvm_rv32im_circuit::extension::Rv32ImConfig"
            []
            []
            [
              ("rv32i",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                  M.get_associated_function (|
                    Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                    "with_public_values",
                    [],
                    []
                  |),
                  [ M.read (| public_values |) ]
                |));
              ("mul",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32M",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "openvm_rv32im_circuit::extension::Rv32M",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_with_public_values :
      M.IsAssociatedFunction.C Self "with_public_values" with_public_values.
    Admitted.
    Global Typeclasses Opaque with_public_values.
    
    (*
        pub fn with_public_values_and_segment_len(public_values: usize, segment_len: usize) -> Self {
            Self {
                rv32i: Rv32IConfig::with_public_values_and_segment_len(public_values, segment_len),
                mul: Default::default(),
            }
        }
    *)
    Definition with_public_values_and_segment_len
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ public_values; segment_len ] =>
        ltac:(M.monadic
          (let public_values := M.alloc (| Ty.path "usize", public_values |) in
          let segment_len := M.alloc (| Ty.path "usize", segment_len |) in
          Value.mkStructRecord
            "openvm_rv32im_circuit::extension::Rv32ImConfig"
            []
            []
            [
              ("rv32i",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                  M.get_associated_function (|
                    Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
                    "with_public_values_and_segment_len",
                    [],
                    []
                  |),
                  [ M.read (| public_values |); M.read (| segment_len |) ]
                |));
              ("mul",
                M.call_closure (|
                  Ty.path "openvm_rv32im_circuit::extension::Rv32M",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "openvm_rv32im_circuit::extension::Rv32M",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_with_public_values_and_segment_len :
      M.IsAssociatedFunction.C
        Self
        "with_public_values_and_segment_len"
        with_public_values_and_segment_len.
    Admitted.
    Global Typeclasses Opaque with_public_values_and_segment_len.
  End Impl_openvm_rv32im_circuit_extension_Rv32ImConfig.
  
  
  
  Module Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32IConfig.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig".
    
    (*
        fn default() -> Self {
            let system = SystemConfig::default().with_continuations();
            Self {
                system,
                base: Default::default(),
                io: Default::default(),
            }
        }
    *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.read (|
            let~ system : Ty.path "openvm_circuit::arch::config::SystemConfig" :=
              M.call_closure (|
                Ty.path "openvm_circuit::arch::config::SystemConfig",
                M.get_associated_function (|
                  Ty.path "openvm_circuit::arch::config::SystemConfig",
                  "with_continuations",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.path "openvm_circuit::arch::config::SystemConfig",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "openvm_circuit::arch::config::SystemConfig",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |)
                ]
              |) in
            M.alloc (|
              Ty.path "openvm_rv32im_circuit::extension::Rv32IConfig",
              Value.mkStructRecord
                "openvm_rv32im_circuit::extension::Rv32IConfig"
                []
                []
                [
                  ("system", M.read (| system |));
                  ("base",
                    M.call_closure (|
                      Ty.path "openvm_rv32im_circuit::extension::Rv32I",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "openvm_rv32im_circuit::extension::Rv32I",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |));
                  ("io",
                    M.call_closure (|
                      Ty.path "openvm_rv32im_circuit::extension::Rv32Io",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "openvm_rv32im_circuit::extension::Rv32Io",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32IConfig.
  
  
  
  (* StructTuple
    {
      name := "Rv32I";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32I.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32I".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32I" ],
              self
            |) in
          M.read (| M.deref (| M.read (| self |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32I.
  
  Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_extension_Rv32I.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32I".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_openvm_rv32im_circuit_extension_Rv32I.
  
  Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32I.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32I".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32I" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32I" |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32I.
  
  Module Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32I.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32I".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic (Value.StructTuple "openvm_rv32im_circuit::extension::Rv32I" [] [] []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32I.
  
  
  
  (* StructTuple
    {
      name := "Rv32Io";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32Io.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32Io".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32Io" ],
              self
            |) in
          M.read (| M.deref (| M.read (| self |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32Io.
  
  Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_extension_Rv32Io.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32Io".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_openvm_rv32im_circuit_extension_Rv32Io.
  
  Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32Io.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32Io".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32Io" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32Io" |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32Io.
  
  Module Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32Io.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32Io".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic (Value.StructTuple "openvm_rv32im_circuit::extension::Rv32Io" [] [] []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32Io.
  
  
  
  (* StructRecord
    {
      name := "Rv32M";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("range_tuple_checker_sizes",
            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ Ty.path "u32" ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32M.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32M".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32M" ],
              self
            |) in
          M.match_operator (|
            Ty.path "openvm_rv32im_circuit::extension::Rv32M",
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_rv32im_circuit_extension_Rv32M.
  
  Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_extension_Rv32M.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32M".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_openvm_rv32im_circuit_extension_Rv32M.
  
  Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32M.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32M".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32M" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32M" |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "range_tuple_checker_sizes" |) |)
              |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u32" ]
                        ]
                    ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u32" ]
                            ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::extension::Rv32M",
                              "range_tuple_checker_sizes"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_extension_Rv32M.
  
  
  
  Module Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32M.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32M".
    
    (*
        fn default() -> Self {
            Self {
                range_tuple_checker_sizes: default_range_tuple_checker_sizes(),
            }
        }
    *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.mkStructRecord
            "openvm_rv32im_circuit::extension::Rv32M"
            []
            []
            [
              ("range_tuple_checker_sizes",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [ Ty.path "u32" ],
                  M.get_function (|
                    "openvm_rv32im_circuit::extension::default_range_tuple_checker_sizes",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_openvm_rv32im_circuit_extension_Rv32M.
  
  (*
  fn default_range_tuple_checker_sizes() -> [u32; 2] {
      [1 << 8, 8 * (1 << 8)]
  }
  *)
  Definition default_range_tuple_checker_sizes
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [], [] =>
      ltac:(M.monadic
        (Value.Array
          [
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shl,
              [ Value.Integer IntegerKind.U32 1; Value.Integer IntegerKind.I32 8 ]
            |);
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.mul,
              [
                Value.Integer IntegerKind.U32 8;
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shl,
                  [ Value.Integer IntegerKind.U32 1; Value.Integer IntegerKind.I32 8 ]
                |)
              ]
            |)
          ]))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_default_range_tuple_checker_sizes :
    M.IsFunction.C
      "openvm_rv32im_circuit::extension::default_range_tuple_checker_sizes"
      default_range_tuple_checker_sizes.
  Admitted.
  Global Typeclasses Opaque default_range_tuple_checker_sizes.
  
  (*
  Enum Rv32IExecutor
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "BaseAlu";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_base_alu_Rv32BaseAluChip_discriminant"
                          |));
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_base_alu_Rv32BaseAluChip_discriminant"
                          |))
                      ]
                      []
                  ]
              ];
        };
        {
          name := "LessThan";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_less_than_Rv32LessThanChip_discriminant"
                          |));
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_less_than_Rv32LessThanChip_discriminant"
                          |))
                      ]
                      []
                  ]
              ];
        };
        {
          name := "Shift";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (| "openvm_rv32im_circuit_shift_Rv32ShiftChip_discriminant" |));
                        M.unevaluated_const
                          (mk_str (| "openvm_rv32im_circuit_shift_Rv32ShiftChip_discriminant" |))
                      ]
                      []
                  ]
              ];
        };
        {
          name := "LoadStore";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_loadstore_Rv32LoadStoreChip_discriminant"
                          |))
                      ]
                      []
                  ]
              ];
        };
        {
          name := "LoadSignExtend";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_load_sign_extend_Rv32LoadSignExtendChip_discriminant"
                          |));
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_load_sign_extend_Rv32LoadSignExtendChip_discriminant"
                          |))
                      ]
                      []
                  ]
              ];
        };
        {
          name := "BranchEqual";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_branch_eq_Rv32BranchEqualChip_discriminant"
                          |))
                      ]
                      []
                  ]
              ];
        };
        {
          name := "BranchLessThan";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_branch_lt_Rv32BranchLessThanChip_discriminant"
                          |));
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_branch_lt_Rv32BranchLessThanChip_discriminant"
                          |))
                      ]
                      []
                  ]
              ];
        };
        {
          name := "JalLui";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                      []
                      [ F ];
                    Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                  ]
              ];
        };
        {
          name := "Jalr";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                      []
                      [ F ];
                    Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                  ]
              ];
        };
        {
          name := "Auipc";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                      []
                      [ F ];
                    Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                  ]
              ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32IExecutor_BaseAlu :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu" 0.
  Axiom IsDiscriminant_Rv32IExecutor_LessThan :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan" 1.
  Axiom IsDiscriminant_Rv32IExecutor_Shift :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift" 2.
  Axiom IsDiscriminant_Rv32IExecutor_LoadStore :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore" 3.
  Axiom IsDiscriminant_Rv32IExecutor_LoadSignExtend :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend" 4.
  Axiom IsDiscriminant_Rv32IExecutor_BranchEqual :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual" 5.
  Axiom IsDiscriminant_Rv32IExecutor_BranchLessThan :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan" 6.
  Axiom IsDiscriminant_Rv32IExecutor_JalLui :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui" 7.
  Axiom IsDiscriminant_Rv32IExecutor_Jalr :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr" 8.
  Axiom IsDiscriminant_Rv32IExecutor_Auipc :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc" 9.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* ChipUsageGetter *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* Chip *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                    [
                                      Value.Integer IntegerKind.Usize 4;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    []
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                    [
                                      Value.Integer IntegerKind.Usize 4;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    []
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    []
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                    [
                                      Value.Integer IntegerKind.Usize 4;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    []
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    []
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                    [
                                      Value.Integer IntegerKind.Usize 4;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    []
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path
                                        "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                    []
                                    [ F ];
                                  Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                    []
                                    [ F ];
                                  Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path
                                        "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                    []
                                    [ F ];
                                  Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* InstructionExecutor *)
    Definition execute (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; memory; instruction; from_state ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ],
              self
            |) in
          let memory :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ]
                ],
              memory
            |) in
          let instruction :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
              instruction
            |) in
          let from_state :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                []
                [ Ty.path "u32" ],
              from_state
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ];
                Ty.path "openvm_circuit::arch::execution::ExecutionError"
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* InstructionExecutor *)
    Definition get_opcode_name
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; opcode ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ],
              self
            |) in
          let opcode := M.alloc (| Ty.path "usize", opcode |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                []
                                [ F ];
                              Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                            []
                            [ F ];
                          Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::execution::InstructionExecutor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("execute", InstanceField.Method (execute F));
          ("get_opcode_name", InstanceField.Method (get_opcode_name F))
        ].
  End Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_alu_Rv32BaseAluAdapterChip_F_openvm_rv32im_circuit_base_alu_core_BaseAluCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_base_alu_Rv32BaseAluChip_discriminant"
                        |));
                      M.unevaluated_const
                        (mk_str (| "openvm_rv32im_circuit_base_alu_Rv32BaseAluChip_discriminant" |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_base_alu_Rv32BaseAluChip_discriminant" |));
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_base_alu_Rv32BaseAluChip_discriminant" |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_alu_Rv32BaseAluAdapterChip_F_openvm_rv32im_circuit_base_alu_core_BaseAluCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_alu_Rv32BaseAluAdapterChip_F_openvm_rv32im_circuit_less_than_core_LessThanCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_less_than_Rv32LessThanChip_discriminant"
                        |));
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_less_than_Rv32LessThanChip_discriminant"
                        |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_less_than_Rv32LessThanChip_discriminant" |));
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_less_than_Rv32LessThanChip_discriminant" |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_alu_Rv32BaseAluAdapterChip_F_openvm_rv32im_circuit_less_than_core_LessThanCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_alu_Rv32BaseAluAdapterChip_F_openvm_rv32im_circuit_shift_core_ShiftCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (| "openvm_rv32im_circuit_shift_Rv32ShiftChip_discriminant" |));
                      M.unevaluated_const
                        (mk_str (| "openvm_rv32im_circuit_shift_Rv32ShiftChip_discriminant" |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_shift_Rv32ShiftChip_discriminant" |));
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_shift_Rv32ShiftChip_discriminant" |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_alu_Rv32BaseAluAdapterChip_F_openvm_rv32im_circuit_shift_core_ShiftCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterChip_F_openvm_rv32im_circuit_loadstore_core_LoadStoreCoreChip_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_loadstore_Rv32LoadStoreChip_discriminant"
                        |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_loadstore_Rv32LoadStoreChip_discriminant" |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterChip_F_openvm_rv32im_circuit_loadstore_core_LoadStoreCoreChip_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterChip_F_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path
                      "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_load_sign_extend_Rv32LoadSignExtendChip_discriminant"
                        |));
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_load_sign_extend_Rv32LoadSignExtendChip_discriminant"
                        |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_load_sign_extend_Rv32LoadSignExtendChip_discriminant"
                    |));
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_load_sign_extend_Rv32LoadSignExtendChip_discriminant"
                    |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterChip_F_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_branch_Rv32BranchAdapterChip_F_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreChip_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_branch_eq_Rv32BranchEqualChip_discriminant"
                        |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_branch_eq_Rv32BranchEqualChip_discriminant"
                    |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_branch_Rv32BranchAdapterChip_F_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreChip_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_branch_Rv32BranchAdapterChip_F_openvm_rv32im_circuit_branch_lt_core_BranchLessThanCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_branch_lt_Rv32BranchLessThanChip_discriminant"
                        |));
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_branch_lt_Rv32BranchLessThanChip_discriminant"
                        |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_branch_lt_Rv32BranchLessThanChip_discriminant"
                    |));
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_branch_lt_Rv32BranchLessThanChip_discriminant"
                    |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_branch_Rv32BranchAdapterChip_F_openvm_rv32im_circuit_branch_lt_core_BranchLessThanCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterChip_F_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreChip_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                    []
                    [ F ];
                  Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                []
                [ F ];
              Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterChip_F_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreChip_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_jalr_Rv32JalrAdapterChip_F_openvm_rv32im_circuit_jalr_core_Rv32JalrCoreChip_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                    []
                    [ F ];
                  Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                []
                [ F ];
              Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_jalr_Rv32JalrAdapterChip_F_openvm_rv32im_circuit_jalr_core_Rv32JalrCoreChip_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterChip_F_openvm_rv32im_circuit_auipc_core_Rv32AuipcCoreChip_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                    []
                    [ F ];
                  Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                []
                [ F ];
              Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterChip_F_openvm_rv32im_circuit_auipc_core_Rv32AuipcCoreChip_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (* AnyEnum *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* AnyEnum *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BaseAlu",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LessThan",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Shift",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadStore",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::LoadSignExtend",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchEqual",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::BranchLessThan",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::JalLui",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Jalr",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IExecutor::Auipc",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IExecutor_F.
  
  (*
  Enum Rv32MExecutor
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "Multiplication";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_mul_Rv32MultiplicationChip_discriminant"
                          |));
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_mul_Rv32MultiplicationChip_discriminant"
                          |))
                      ]
                      []
                  ]
              ];
        };
        {
          name := "MultiplicationHigh";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (| "openvm_rv32im_circuit_mulh_Rv32MulHChip_discriminant" |));
                        M.unevaluated_const
                          (mk_str (| "openvm_rv32im_circuit_mulh_Rv32MulHChip_discriminant" |))
                      ]
                      []
                  ]
              ];
        };
        {
          name := "DivRem";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                      [
                        M.unevaluated_const
                          (mk_str (| "openvm_rv32im_circuit_divrem_Rv32DivRemChip_discriminant" |));
                        M.unevaluated_const
                          (mk_str (| "openvm_rv32im_circuit_divrem_Rv32DivRemChip_discriminant" |))
                      ]
                      []
                  ]
              ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32MExecutor_Multiplication :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication" 0.
  Axiom IsDiscriminant_Rv32MExecutor_MultiplicationHigh :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh" 1.
  Axiom IsDiscriminant_Rv32MExecutor_DivRem :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem" 2.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ].
    
    (* ChipUsageGetter *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ].
    
    (* Chip *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                    [
                                      Value.Integer IntegerKind.Usize 4;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    []
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                    [
                                      Value.Integer IntegerKind.Usize 4;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    []
                                ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
  
  Module Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ].
    
    (* InstructionExecutor *)
    Definition execute (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; memory; instruction; from_state ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ],
              self
            |) in
          let memory :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ]
                ],
              memory
            |) in
          let instruction :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
              instruction
            |) in
          let from_state :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                []
                [ Ty.path "u32" ],
              from_state
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ];
                Ty.path "openvm_circuit::arch::execution::ExecutionError"
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* InstructionExecutor *)
    Definition get_opcode_name
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; opcode ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ],
              self
            |) in
          let opcode := M.alloc (| Ty.path "usize", opcode |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                []
                            ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                            [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::execution::InstructionExecutor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("execute", InstanceField.Method (execute F));
          ("get_opcode_name", InstanceField.Method (get_opcode_name F))
        ].
  End Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F_openvm_rv32im_circuit_mul_core_MultiplicationCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_mul_Rv32MultiplicationChip_discriminant"
                        |));
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_rv32im_circuit_mul_Rv32MultiplicationChip_discriminant"
                        |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_mul_Rv32MultiplicationChip_discriminant" |));
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_mul_Rv32MultiplicationChip_discriminant" |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F_openvm_rv32im_circuit_mul_core_MultiplicationCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F_openvm_rv32im_circuit_mulh_core_MulHCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (| "openvm_rv32im_circuit_mulh_Rv32MulHChip_discriminant" |));
                      M.unevaluated_const
                        (mk_str (| "openvm_rv32im_circuit_mulh_Rv32MulHChip_discriminant" |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_mulh_Rv32MulHChip_discriminant" |));
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_mulh_Rv32MulHChip_discriminant" |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F_openvm_rv32im_circuit_mulh_core_MulHCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F_openvm_rv32im_circuit_divrem_core_DivRemCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                    [
                      M.unevaluated_const
                        (mk_str (| "openvm_rv32im_circuit_divrem_Rv32DivRemChip_discriminant" |));
                      M.unevaluated_const
                        (mk_str (| "openvm_rv32im_circuit_divrem_Rv32DivRemChip_discriminant" |))
                    ]
                    []
                ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
            []
            [
              F;
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                []
                [ F ];
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                [
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_divrem_Rv32DivRemChip_discriminant" |));
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_divrem_Rv32DivRemChip_discriminant" |))
                ]
                []
            ]
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F_openvm_rv32im_circuit_divrem_core_DivRemCoreChip_expr_expr_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ].
    
    (* AnyEnum *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* AnyEnum *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MExecutor::Multiplication",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MExecutor::MultiplicationHigh",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MExecutor::DivRem",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 4;
                                                  Value.Integer IntegerKind.Usize 8
                                                ]
                                                []
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32MExecutor_F.
  
  (*
  Enum Rv32IoExecutor
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "HintStore";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ] ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32IoExecutor_HintStore :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore" 0.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ].
    
    (* ChipUsageGetter *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ].
    
    (* Chip *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                    []
                                    [ F ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
  
  Module Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ].
    
    (* InstructionExecutor *)
    Definition execute (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; memory; instruction; from_state ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ],
              self
            |) in
          let memory :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ]
                ],
              memory
            |) in
          let instruction :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
              instruction
            |) in
          let from_state :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                []
                [ Ty.path "u32" ],
              from_state
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ];
                Ty.path "openvm_circuit::arch::execution::ExecutionError"
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "execute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                      M.read (| from_state |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* InstructionExecutor *)
    Definition get_opcode_name
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; opcode ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ],
              self
            |) in
          let opcode := M.alloc (| Ty.path "usize", opcode |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                            []
                            [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_circuit::arch::execution::InstructionExecutor",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "get_opcode_name",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                      M.read (| opcode |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::execution::InstructionExecutor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("execute", InstanceField.Method (execute F));
          ("get_opcode_name", InstanceField.Method (get_opcode_name F))
        ].
  End Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_F_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_F_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ].
    
    (* AnyEnum *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                            []
                                            [ F ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* AnyEnum *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IoExecutor::HintStore",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                            []
                                            [ F ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IoExecutor_F.
  
  (*
  Enum Rv32IPeriphery
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "BitwiseOperationLookup";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                  [ Value.Integer IntegerKind.Usize 8 ]
                  []
              ];
        };
        {
          name := "Phantom";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32IPeriphery_BitwiseOperationLookup :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup" 0.
  Axiom IsDiscriminant_Rv32IPeriphery_Phantom :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom" 1.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_primitives_bitwise_op_lookup_SharedBitwiseOperationLookupChip_Usize_8_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path
                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                [ Value.Integer IntegerKind.Usize 8 ]
                [],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path
              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
            [ Value.Integer IntegerKind.Usize 8 ]
            []
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_primitives_bitwise_op_lookup_SharedBitwiseOperationLookupChip_Usize_8_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_system_phantom_PhantomChip_F_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_system_phantom_PhantomChip_F_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ].
    
    (* ChipUsageGetter *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ].
    
    (* Chip *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    []
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                []
                                [ F ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ].
    
    (* AnyEnum *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* AnyEnum *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::BitwiseOperationLookup",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IPeriphery::Phantom",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IPeriphery_F.
  
  (*
  Enum Rv32MPeriphery
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "BitwiseOperationLookup";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                  [ Value.Integer IntegerKind.Usize 8 ]
                  []
              ];
        };
        {
          name := "RangeTupleChecker";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  []
              ];
        };
        {
          name := "Phantom";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32MPeriphery_BitwiseOperationLookup :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup" 0.
  Axiom IsDiscriminant_Rv32MPeriphery_RangeTupleChecker :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker" 1.
  Axiom IsDiscriminant_Rv32MPeriphery_Phantom :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom" 2.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_primitives_bitwise_op_lookup_SharedBitwiseOperationLookupChip_Usize_8_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path
                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                [ Value.Integer IntegerKind.Usize 8 ]
                [],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path
              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
            [ Value.Integer IntegerKind.Usize 8 ]
            []
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_primitives_bitwise_op_lookup_SharedBitwiseOperationLookupChip_Usize_8_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_primitives_range_tuple_SharedRangeTupleCheckerChip_Usize_2_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                [ Value.Integer IntegerKind.Usize 2 ]
                [],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
            [ Value.Integer IntegerKind.Usize 2 ]
            []
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_primitives_range_tuple_SharedRangeTupleCheckerChip_Usize_2_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_system_phantom_PhantomChip_F_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_system_phantom_PhantomChip_F_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ].
    
    (* ChipUsageGetter *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ].
    
    (* Chip *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    []
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    []
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                []
                                [ F ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ].
    
    (* AnyEnum *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            []
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            []
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* AnyEnum *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::BitwiseOperationLookup",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::RangeTupleChecker",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            []
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            []
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32MPeriphery::Phantom",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32MPeriphery_F.
  
  (*
  Enum Rv32IoPeriphery
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "BitwiseOperationLookup";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                  [ Value.Integer IntegerKind.Usize 8 ]
                  []
              ];
        };
        {
          name := "Phantom";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Rv32IoPeriphery_BitwiseOperationLookup :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup" 0.
  Axiom IsDiscriminant_Rv32IoPeriphery_Phantom :
    M.IsDiscriminant "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom" 1.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_primitives_bitwise_op_lookup_SharedBitwiseOperationLookupChip_Usize_8_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply
                (Ty.path
                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                [ Value.Integer IntegerKind.Usize 8 ]
                [],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path
              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
            [ Value.Integer IntegerKind.Usize 8 ]
            []
        ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_primitives_bitwise_op_lookup_SharedBitwiseOperationLookupChip_Usize_8_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
  
  Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_system_phantom_PhantomChip_F_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ].
    
    (* From *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
              value
            |) in
          Value.StructTuple
            "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom"
            []
            [ F ]
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_system_phantom_PhantomChip_F_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ].
    
    (* ChipUsageGetter *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "air_name",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition constant_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "constant_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "current_trace_height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* ChipUsageGetter *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ] ],
              self
            |) in
          M.match_operator (|
            Ty.path "usize",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            []
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      γ1_0
                    |) in
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("constant_trace_height", InstanceField.Method (constant_trace_height F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
  
  Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
    Definition Self (F SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ].
    
    (* Chip *)
    Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    []
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom",
                              0
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "openvm_stark_backend::chip::Chip",
                              Ty.apply
                                (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                []
                                [ F ],
                              [],
                              [ SC ],
                              "air",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input",
                      [],
                      []
                    |),
                    [ M.read (| x |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* Chip *)
    Definition generate_air_proof_input_with_id
        (F SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F SC in
      match ε, τ, α with
      | [], [], [ self; air_id ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ],
              self
            |) in
          let air_id := M.alloc (| Ty.path "usize", air_id |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "usize";
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom",
                      0
                    |) in
                  let x :=
                    M.copy (|
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      γ0_0
                    |) in
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ]
                      ],
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::Chip",
                      Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                      [],
                      [ SC ],
                      "generate_air_proof_input_with_id",
                      [],
                      []
                    |),
                    [ M.read (| x |); M.read (| air_id |) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self F SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air F SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
          ("generate_air_proof_input_with_id",
            InstanceField.Method (generate_air_proof_input_with_id F SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
  
  Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ].
    
    (* AnyEnum *)
    Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (* AnyEnum *)
    Definition as_any_kind_mut
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                      (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                            self,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::BitwiseOperationLookup",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            []
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery::Phantom",
                                      0
                                    |) in
                                  let x :=
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ],
                                      γ1_0
                                    |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::AnyEnum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("as_any_kind", InstanceField.Method (as_any_kind F));
          ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
        ].
  End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_rv32im_circuit_extension_Rv32IoPeriphery_F.
  
  Module Impl_openvm_circuit_arch_extensions_VmExtension_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32I.
    Definition Self (F : Ty.t) : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32I".
    
    (*     type Executor = Rv32IExecutor<F>; *)
    Definition _Executor (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ].
    
    (*     type Periphery = Rv32IPeriphery<F>; *)
    Definition _Periphery (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ].
    
    (*
        fn build(
            &self,
            builder: &mut VmInventoryBuilder<F>,
        ) -> Result<VmInventory<Rv32IExecutor<F>, Rv32IPeriphery<F>>, VmInventoryError> {
            let mut inventory = VmInventory::new();
            let SystemPort {
                execution_bus,
                program_bus,
                memory_bridge,
            } = builder.system_port();
    
            let range_checker = builder.system_base().range_checker_chip.clone();
            let offline_memory = builder.system_base().offline_memory();
            let pointer_max_bits = builder.system_config().memory_config.pointer_max_bits;
    
            let bitwise_lu_chip = if let Some(&chip) = builder
                .find_chip::<SharedBitwiseOperationLookupChip<8>>()
                .first()
            {
                chip.clone()
            } else {
                let bitwise_lu_bus = BitwiseOperationLookupBus::new(builder.new_bus_idx());
                let chip = SharedBitwiseOperationLookupChip::new(bitwise_lu_bus);
                inventory.add_periphery_chip(chip.clone());
                chip
            };
    
            let base_alu_chip = Rv32BaseAluChip::new(
                Rv32BaseAluAdapterChip::new(
                    execution_bus,
                    program_bus,
                    memory_bridge,
                    bitwise_lu_chip.clone(),
                ),
                BaseAluCoreChip::new(bitwise_lu_chip.clone(), BaseAluOpcode::CLASS_OFFSET),
                offline_memory.clone(),
            );
            inventory.add_executor(
                base_alu_chip,
                BaseAluOpcode::iter().map(|x| x.global_opcode()),
            )?;
    
            let lt_chip = Rv32LessThanChip::new(
                Rv32BaseAluAdapterChip::new(
                    execution_bus,
                    program_bus,
                    memory_bridge,
                    bitwise_lu_chip.clone(),
                ),
                LessThanCoreChip::new(bitwise_lu_chip.clone(), LessThanOpcode::CLASS_OFFSET),
                offline_memory.clone(),
            );
            inventory.add_executor(lt_chip, LessThanOpcode::iter().map(|x| x.global_opcode()))?;
    
            let shift_chip = Rv32ShiftChip::new(
                Rv32BaseAluAdapterChip::new(
                    execution_bus,
                    program_bus,
                    memory_bridge,
                    bitwise_lu_chip.clone(),
                ),
                ShiftCoreChip::new(
                    bitwise_lu_chip.clone(),
                    range_checker.clone(),
                    ShiftOpcode::CLASS_OFFSET,
                ),
                offline_memory.clone(),
            );
            inventory.add_executor(shift_chip, ShiftOpcode::iter().map(|x| x.global_opcode()))?;
    
            let load_store_chip = Rv32LoadStoreChip::new(
                Rv32LoadStoreAdapterChip::new(
                    execution_bus,
                    program_bus,
                    memory_bridge,
                    pointer_max_bits,
                    range_checker.clone(),
                ),
                LoadStoreCoreChip::new(Rv32LoadStoreOpcode::CLASS_OFFSET),
                offline_memory.clone(),
            );
            inventory.add_executor(
                load_store_chip,
                Rv32LoadStoreOpcode::iter()
                    .take(Rv32LoadStoreOpcode::STOREB as usize + 1)
                    .map(|x| x.global_opcode()),
            )?;
    
            let load_sign_extend_chip = Rv32LoadSignExtendChip::new(
                Rv32LoadStoreAdapterChip::new(
                    execution_bus,
                    program_bus,
                    memory_bridge,
                    pointer_max_bits,
                    range_checker.clone(),
                ),
                LoadSignExtendCoreChip::new(range_checker.clone()),
                offline_memory.clone(),
            );
            inventory.add_executor(
                load_sign_extend_chip,
                [Rv32LoadStoreOpcode::LOADB, Rv32LoadStoreOpcode::LOADH].map(|x| x.global_opcode()),
            )?;
    
            let beq_chip = Rv32BranchEqualChip::new(
                Rv32BranchAdapterChip::new(execution_bus, program_bus, memory_bridge),
                BranchEqualCoreChip::new(BranchEqualOpcode::CLASS_OFFSET, DEFAULT_PC_STEP),
                offline_memory.clone(),
            );
            inventory.add_executor(
                beq_chip,
                BranchEqualOpcode::iter().map(|x| x.global_opcode()),
            )?;
    
            let blt_chip = Rv32BranchLessThanChip::new(
                Rv32BranchAdapterChip::new(execution_bus, program_bus, memory_bridge),
                BranchLessThanCoreChip::new(
                    bitwise_lu_chip.clone(),
                    BranchLessThanOpcode::CLASS_OFFSET,
                ),
                offline_memory.clone(),
            );
            inventory.add_executor(
                blt_chip,
                BranchLessThanOpcode::iter().map(|x| x.global_opcode()),
            )?;
    
            let jal_lui_chip = Rv32JalLuiChip::new(
                Rv32CondRdWriteAdapterChip::new(execution_bus, program_bus, memory_bridge),
                Rv32JalLuiCoreChip::new(bitwise_lu_chip.clone()),
                offline_memory.clone(),
            );
            inventory.add_executor(
                jal_lui_chip,
                Rv32JalLuiOpcode::iter().map(|x| x.global_opcode()),
            )?;
    
            let jalr_chip = Rv32JalrChip::new(
                Rv32JalrAdapterChip::new(execution_bus, program_bus, memory_bridge),
                Rv32JalrCoreChip::new(bitwise_lu_chip.clone(), range_checker.clone()),
                offline_memory.clone(),
            );
            inventory.add_executor(jalr_chip, Rv32JalrOpcode::iter().map(|x| x.global_opcode()))?;
    
            let auipc_chip = Rv32AuipcChip::new(
                Rv32RdWriteAdapterChip::new(execution_bus, program_bus, memory_bridge),
                Rv32AuipcCoreChip::new(bitwise_lu_chip.clone()),
                offline_memory.clone(),
            );
            inventory.add_executor(
                auipc_chip,
                Rv32AuipcOpcode::iter().map(|x| x.global_opcode()),
            )?;
    
            // There is no downside to adding phantom sub-executors, so we do it in the base extension.
            builder.add_phantom_sub_executor(
                phantom::Rv32HintInputSubEx,
                PhantomDiscriminant(Rv32Phantom::HintInput as u16),
            )?;
            builder.add_phantom_sub_executor(
                phantom::Rv32HintRandomSubEx::new(),
                PhantomDiscriminant(Rv32Phantom::HintRandom as u16),
            )?;
            builder.add_phantom_sub_executor(
                phantom::Rv32PrintStrSubEx,
                PhantomDiscriminant(Rv32Phantom::PrintStr as u16),
            )?;
    
            Ok(inventory)
        }
    *)
    Definition build (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; builder ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32I" ],
              self
            |) in
          let builder :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder") [] [ F ]
                ],
              builder
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                  []
                  [
                    Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor") [] [ F ];
                    Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery") [] [ F ]
                  ];
                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ inventory :
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                          []
                          [ F ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                          []
                          [ F ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                            []
                            [ F ]
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                    ],
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                              []
                              [ F ]
                          ];
                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                      ],
                    M.alloc (|
                      Ty.path "openvm_circuit::arch::extensions::SystemPort",
                      M.call_closure (|
                        Ty.path "openvm_circuit::arch::extensions::SystemPort",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                            []
                            [ F ],
                          "system_port",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::arch::extensions::SystemPort",
                              "execution_bus"
                            |) in
                          let γ0_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::arch::extensions::SystemPort",
                              "program_bus"
                            |) in
                          let γ0_2 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::arch::extensions::SystemPort",
                              "memory_bridge"
                            |) in
                          let execution_bus :=
                            M.copy (|
                              Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                              γ0_0
                            |) in
                          let program_bus :=
                            M.copy (|
                              Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                              γ0_1
                            |) in
                          let memory_bridge :=
                            M.copy (|
                              Ty.path
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                              γ0_2
                            |) in
                          M.read (|
                            let~ range_checker :
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip" :=
                              M.call_closure (|
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path
                                    "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::SystemBase")
                                                []
                                                [ F ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                              []
                                              [ F ],
                                            "system_base",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| builder |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      "openvm_circuit::arch::extensions::SystemBase",
                                      "range_checker_chip"
                                    |)
                                  |)
                                ]
                              |) in
                            let~ offline_memory :
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [ F ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [ F ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemBase")
                                    []
                                    [ F ],
                                  "offline_memory",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::SystemBase")
                                              []
                                              [ F ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                            []
                                            [ F ],
                                          "system_base",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| builder |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |) in
                            let~ pointer_max_bits : Ty.path "usize" :=
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                            []
                                            [ F ],
                                          "system_config",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| builder |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    "openvm_circuit::arch::config::SystemConfig",
                                    "memory_config"
                                  |),
                                  "openvm_circuit::arch::config::MemoryConfig",
                                  "pointer_max_bits"
                                |)
                              |) in
                            let~ bitwise_lu_chip :
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [] :=
                              M.match_operator (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                        [ Value.Integer IntegerKind.Usize 8 ]
                                                        []
                                                    ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                          [ Value.Integer IntegerKind.Usize 8 ]
                                                          []
                                                      ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                        [ Value.Integer IntegerKind.Usize 8 ]
                                                        []
                                                    ]
                                                ],
                                              "first",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      8
                                                                  ]
                                                                  []
                                                              ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                [ Value.Integer IntegerKind.Usize 8
                                                                ]
                                                                []
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    ]
                                                                    []
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          8
                                                                      ]
                                                                      []
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                                []
                                                                [ F ],
                                                              "find_chip",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      8
                                                                  ]
                                                                  []
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| builder |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                                      let chip :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                [ Value.Integer IntegerKind.Usize 8 ]
                                                []
                                            ],
                                          γ0_0
                                        |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| chip |) |)
                                          |)
                                        ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        let~ bitwise_lu_bus :
                                            Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus" :=
                                          M.call_closure (|
                                            Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                                            M.get_associated_function (|
                                              Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "u16",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                    []
                                                    [ F ],
                                                  "new_bus_idx",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| builder |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |) in
                                        let~ chip :
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [] :=
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                [ Value.Integer IntegerKind.Usize 8 ]
                                                [],
                                              "new",
                                              [],
                                              []
                                            |),
                                            [ M.read (| bitwise_lu_bus |) ]
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::VmInventory")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                    []
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                    []
                                                    [ F ]
                                                ],
                                              "add_periphery_chip",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  []
                                              ]
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, inventory |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [],
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [],
                                                  [],
                                                  [],
                                                  "clone",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, chip |) ]
                                              |)
                                            ]
                                          |) in
                                        chip
                                      |)))
                                ]
                              |) in
                            let~ base_alu_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::base_alu::core::BaseAluCoreChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 4;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BaseAluOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BaseAluOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| base_alu_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BaseAluOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BaseAluOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::BaseAluOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BaseAluOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BaseAluOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::BaseAluOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::BaseAluOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::BaseAluOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::BaseAluOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ lt_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::less_than::core::LessThanCoreChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 4;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::LessThanOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::LessThanOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| lt_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::LessThanOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::LessThanOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::LessThanOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::LessThanOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::LessThanOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::LessThanOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::LessThanOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::LessThanOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::LessThanOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ shift_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |);
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::alu::Rv32BaseAluAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::shift::core::ShiftCoreChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 4;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::ShiftOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::ShiftOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| shift_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::ShiftOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::ShiftOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::ShiftOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::ShiftOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::ShiftOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::ShiftOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::ShiftOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::ShiftOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::ShiftOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ load_store_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |);
                                      M.read (| pointer_max_bits |);
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::loadstore::core::LoadStoreCoreChip")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::take::Take")
                                                  []
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcodeIter"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| load_store_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::take::Take")
                                                  []
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcodeIter"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::take::Take")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcodeIter"
                                                ],
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::take::Take")
                                                  []
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcodeIter"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcodeIter",
                                                  [],
                                                  [],
                                                  "take",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcodeIter",
                                                    M.get_trait_method (|
                                                      "strum::IntoEnumIterator",
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                      [],
                                                      [],
                                                      "iter",
                                                      [],
                                                      []
                                                    |),
                                                    []
                                                  |);
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.cast
                                                        (Ty.path "usize")
                                                        (Value.Integer IntegerKind.Usize 5);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ load_sign_extend_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |);
                                      M.read (| pointer_max_bits |);
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 4;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "openvm_instructions::VmOpcode" ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| load_sign_extend_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "openvm_instructions::VmOpcode" ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                                                ],
                                              "map",
                                              [],
                                              [
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode");
                                                Ty.path "openvm_instructions::VmOpcode"
                                              ]
                                            |),
                                            [
                                              Value.Array
                                                [
                                                  Value.StructTuple
                                                    "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                                    []
                                                    []
                                                    [];
                                                  Value.StructTuple
                                                    "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADH"
                                                    []
                                                    []
                                                    []
                                                ];
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ beq_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                          Ty.path "usize"
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::program::DEFAULT_PC_STEP",
                                          Ty.path "u32"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BranchEqualOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| beq_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BranchEqualOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::BranchEqualOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BranchEqualOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ blt_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::branch::Rv32BranchAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::branch_lt::core::BranchLessThanCoreChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 4;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BranchLessThanOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BranchLessThanOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| blt_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BranchLessThanOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BranchLessThanOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::BranchLessThanOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BranchLessThanOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BranchLessThanOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::BranchLessThanOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::BranchLessThanOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::BranchLessThanOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::BranchLessThanOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ jal_lui_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                      []
                                      [ F ];
                                    Ty.path
                                      "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                      []
                                      [ F ];
                                    Ty.path
                                      "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path
                                        "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path
                                      "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip",
                                    M.get_associated_function (|
                                      Ty.path
                                        "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip",
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.path
                                                  "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| jal_lui_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ jalr_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                      []
                                      [ F ];
                                    Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                      []
                                      [ F ];
                                    Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip",
                                    M.get_associated_function (|
                                      Ty.path "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip",
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |);
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::jalr::Rv32JalrAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.path
                                                  "openvm_rv32im_circuit::jalr::core::Rv32JalrCoreChip"
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32JalrOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32JalrOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| jalr_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32JalrOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32JalrOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::Rv32JalrOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32JalrOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32JalrOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32JalrOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::Rv32JalrOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32JalrOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32JalrOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ auipc_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                      []
                                      [ F ];
                                    Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                      []
                                      [ F ];
                                    Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path
                                        "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip",
                                    M.get_associated_function (|
                                      Ty.path
                                        "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip",
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.path
                                                  "openvm_rv32im_circuit::auipc::core::Rv32AuipcCoreChip"
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| auipc_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32AuipcOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                            []
                                            [ F ],
                                          "add_phantom_sub_executor",
                                          [],
                                          [
                                            Ty.path
                                              "openvm_rv32im_circuit::extension::phantom::Rv32HintInputSubEx"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| builder |) |)
                                          |);
                                          Value.StructTuple
                                            "openvm_rv32im_circuit::extension::phantom::Rv32HintInputSubEx"
                                            []
                                            []
                                            [];
                                          Value.StructTuple
                                            "openvm_instructions::phantom::PhantomDiscriminant"
                                            []
                                            []
                                            [
                                              M.cast
                                                (Ty.path "u16")
                                                (M.call_closure (|
                                                  Ty.path "u16",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.read (|
                                                      get_constant (|
                                                        "openvm_rv32im_transpiler::instructions::Rv32Phantom::HintInput_discriminant",
                                                        Ty.path "u16"
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.U16 0
                                                  ]
                                                |))
                                            ]
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                            []
                                            [ F ],
                                          "add_phantom_sub_executor",
                                          [],
                                          [
                                            Ty.path
                                              "openvm_rv32im_circuit::extension::phantom::Rv32HintRandomSubEx"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| builder |) |)
                                          |);
                                          M.call_closure (|
                                            Ty.path
                                              "openvm_rv32im_circuit::extension::phantom::Rv32HintRandomSubEx",
                                            M.get_associated_function (|
                                              Ty.path
                                                "openvm_rv32im_circuit::extension::phantom::Rv32HintRandomSubEx",
                                              "new",
                                              [],
                                              []
                                            |),
                                            []
                                          |);
                                          Value.StructTuple
                                            "openvm_instructions::phantom::PhantomDiscriminant"
                                            []
                                            []
                                            [
                                              M.cast
                                                (Ty.path "u16")
                                                (M.call_closure (|
                                                  Ty.path "u16",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.read (|
                                                      get_constant (|
                                                        "openvm_rv32im_transpiler::instructions::Rv32Phantom::HintInput_discriminant",
                                                        Ty.path "u16"
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.U16 2
                                                  ]
                                                |))
                                            ]
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                            []
                                            [ F ],
                                          "add_phantom_sub_executor",
                                          [],
                                          [
                                            Ty.path
                                              "openvm_rv32im_circuit::extension::phantom::Rv32PrintStrSubEx"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| builder |) |)
                                          |);
                                          Value.StructTuple
                                            "openvm_rv32im_circuit::extension::phantom::Rv32PrintStrSubEx"
                                            []
                                            []
                                            [];
                                          Value.StructTuple
                                            "openvm_instructions::phantom::PhantomDiscriminant"
                                            []
                                            []
                                            [
                                              M.cast
                                                (Ty.path "u16")
                                                (M.call_closure (|
                                                  Ty.path "u16",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.read (|
                                                      get_constant (|
                                                        "openvm_rv32im_transpiler::instructions::Rv32Phantom::HintInput_discriminant",
                                                        Ty.path "u16"
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.U16 1
                                                  ]
                                                |))
                                            ]
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                        []
                                        [ F ]
                                    ];
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              Value.StructTuple
                                "core::result::Result::Ok"
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IExecutor")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IPeriphery")
                                        []
                                        [ F ]
                                    ];
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ]
                                [ M.read (| inventory |) ]
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::VmExtension"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("Executor", InstanceField.Ty (_Executor F));
          ("Periphery", InstanceField.Ty (_Periphery F));
          ("build", InstanceField.Method (build F))
        ].
  End Impl_openvm_circuit_arch_extensions_VmExtension_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32I.
  
  Module Impl_openvm_circuit_arch_extensions_VmExtension_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32M.
    Definition Self (F : Ty.t) : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32M".
    
    (*     type Executor = Rv32MExecutor<F>; *)
    Definition _Executor (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ].
    
    (*     type Periphery = Rv32MPeriphery<F>; *)
    Definition _Periphery (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ].
    
    (*
        fn build(
            &self,
            builder: &mut VmInventoryBuilder<F>,
        ) -> Result<VmInventory<Rv32MExecutor<F>, Rv32MPeriphery<F>>, VmInventoryError> {
            let mut inventory = VmInventory::new();
            let SystemPort {
                execution_bus,
                program_bus,
                memory_bridge,
            } = builder.system_port();
            let offline_memory = builder.system_base().offline_memory();
    
            let bitwise_lu_chip = if let Some(&chip) = builder
                .find_chip::<SharedBitwiseOperationLookupChip<8>>()
                .first()
            {
                chip.clone()
            } else {
                let bitwise_lu_bus = BitwiseOperationLookupBus::new(builder.new_bus_idx());
                let chip = SharedBitwiseOperationLookupChip::new(bitwise_lu_bus);
                inventory.add_periphery_chip(chip.clone());
                chip
            };
    
            let range_tuple_checker = if let Some(chip) = builder
                .find_chip::<SharedRangeTupleCheckerChip<2>>()
                .into_iter()
                .find(|c| {
                    c.bus().sizes[0] >= self.range_tuple_checker_sizes[0]
                        && c.bus().sizes[1] >= self.range_tuple_checker_sizes[1]
                }) {
                chip.clone()
            } else {
                let range_tuple_bus =
                    RangeTupleCheckerBus::new(builder.new_bus_idx(), self.range_tuple_checker_sizes);
                let chip = SharedRangeTupleCheckerChip::new(range_tuple_bus);
                inventory.add_periphery_chip(chip.clone());
                chip
            };
    
            let mul_chip = Rv32MultiplicationChip::new(
                Rv32MultAdapterChip::new(execution_bus, program_bus, memory_bridge),
                MultiplicationCoreChip::new(range_tuple_checker.clone(), MulOpcode::CLASS_OFFSET),
                offline_memory.clone(),
            );
            inventory.add_executor(mul_chip, MulOpcode::iter().map(|x| x.global_opcode()))?;
    
            let mul_h_chip = Rv32MulHChip::new(
                Rv32MultAdapterChip::new(execution_bus, program_bus, memory_bridge),
                MulHCoreChip::new(bitwise_lu_chip.clone(), range_tuple_checker.clone()),
                offline_memory.clone(),
            );
            inventory.add_executor(mul_h_chip, MulHOpcode::iter().map(|x| x.global_opcode()))?;
    
            let div_rem_chip = Rv32DivRemChip::new(
                Rv32MultAdapterChip::new(execution_bus, program_bus, memory_bridge),
                DivRemCoreChip::new(
                    bitwise_lu_chip.clone(),
                    range_tuple_checker.clone(),
                    DivRemOpcode::CLASS_OFFSET,
                ),
                offline_memory.clone(),
            );
            inventory.add_executor(
                div_rem_chip,
                DivRemOpcode::iter().map(|x| x.global_opcode()),
            )?;
    
            Ok(inventory)
        }
    *)
    Definition build (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; builder ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32M" ],
              self
            |) in
          let builder :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder") [] [ F ]
                ],
              builder
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                  []
                  [
                    Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor") [] [ F ];
                    Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery") [] [ F ]
                  ];
                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ inventory :
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                          []
                          [ F ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                          []
                          [ F ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                            []
                            [ F ]
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                    ],
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                              []
                              [ F ]
                          ];
                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                      ],
                    M.alloc (|
                      Ty.path "openvm_circuit::arch::extensions::SystemPort",
                      M.call_closure (|
                        Ty.path "openvm_circuit::arch::extensions::SystemPort",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                            []
                            [ F ],
                          "system_port",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::arch::extensions::SystemPort",
                              "execution_bus"
                            |) in
                          let γ0_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::arch::extensions::SystemPort",
                              "program_bus"
                            |) in
                          let γ0_2 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::arch::extensions::SystemPort",
                              "memory_bridge"
                            |) in
                          let execution_bus :=
                            M.copy (|
                              Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                              γ0_0
                            |) in
                          let program_bus :=
                            M.copy (|
                              Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                              γ0_1
                            |) in
                          let memory_bridge :=
                            M.copy (|
                              Ty.path
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                              γ0_2
                            |) in
                          M.read (|
                            let~ offline_memory :
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [ F ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [ F ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemBase")
                                    []
                                    [ F ],
                                  "offline_memory",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::SystemBase")
                                              []
                                              [ F ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                            []
                                            [ F ],
                                          "system_base",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| builder |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |) in
                            let~ bitwise_lu_chip :
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [] :=
                              M.match_operator (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                        [ Value.Integer IntegerKind.Usize 8 ]
                                                        []
                                                    ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                          [ Value.Integer IntegerKind.Usize 8 ]
                                                          []
                                                      ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                        [ Value.Integer IntegerKind.Usize 8 ]
                                                        []
                                                    ]
                                                ],
                                              "first",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      8
                                                                  ]
                                                                  []
                                                              ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                [ Value.Integer IntegerKind.Usize 8
                                                                ]
                                                                []
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    ]
                                                                    []
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          8
                                                                      ]
                                                                      []
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                                []
                                                                [ F ],
                                                              "find_chip",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      8
                                                                  ]
                                                                  []
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| builder |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                                      let chip :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                [ Value.Integer IntegerKind.Usize 8 ]
                                                []
                                            ],
                                          γ0_0
                                        |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| chip |) |)
                                          |)
                                        ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        let~ bitwise_lu_bus :
                                            Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus" :=
                                          M.call_closure (|
                                            Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                                            M.get_associated_function (|
                                              Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "u16",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                    []
                                                    [ F ],
                                                  "new_bus_idx",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| builder |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |) in
                                        let~ chip :
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [] :=
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                [ Value.Integer IntegerKind.Usize 8 ]
                                                [],
                                              "new",
                                              [],
                                              []
                                            |),
                                            [ M.read (| bitwise_lu_bus |) ]
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::VmInventory")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                    []
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                    []
                                                    [ F ]
                                                ],
                                              "add_periphery_chip",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  []
                                              ]
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, inventory |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [],
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [],
                                                  [],
                                                  [],
                                                  "clone",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, chip |) ]
                                              |)
                                            ]
                                          |) in
                                        chip
                                      |)))
                                ]
                              |) in
                            let~ range_tuple_checker :
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [] :=
                              M.match_operator (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    []
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                      [ Value.Integer IntegerKind.Usize 2 ]
                                                      []
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                        [ Value.Integer IntegerKind.Usize 2 ]
                                                        []
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "find",
                                              [],
                                              [
                                                Ty.function
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                              []
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.path "bool")
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            []
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                              []
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                [ Value.Integer IntegerKind.Usize 2
                                                                ]
                                                                []
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "into_iter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                  []
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                            []
                                                            [ F ],
                                                          "find_chip",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                              []
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| builder |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "bool",
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                      []
                                                                  ]
                                                              ],
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let c :=
                                                                  M.copy (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                              []
                                                                          ]
                                                                      ],
                                                                    γ
                                                                  |) in
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.ge,
                                                                    [
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                                                                      [
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          2
                                                                                      ]
                                                                                      []
                                                                                  ],
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        2
                                                                                    ]
                                                                                    [],
                                                                                  "bus",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            c
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |),
                                                                            "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus",
                                                                            "sizes"
                                                                          |),
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            0
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (| self |)
                                                                            |),
                                                                            "openvm_rv32im_circuit::extension::Rv32M",
                                                                            "range_tuple_checker_sizes"
                                                                          |),
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            0
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.ge,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            2
                                                                                        ]
                                                                                        []
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                                      [
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          2
                                                                                      ]
                                                                                      [],
                                                                                    "bus",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              c
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus",
                                                                              "sizes"
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (| self |)
                                                                              |),
                                                                              "openvm_rv32im_circuit::extension::Rv32M",
                                                                              "range_tuple_checker_sizes"
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)))
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        |) in
                                      let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let chip :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                []
                                            ],
                                          γ0_0
                                        |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| chip |) |)
                                          |)
                                        ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        let~ range_tuple_bus :
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [] :=
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [],
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "u16",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                    []
                                                    [ F ],
                                                  "new_bus_idx",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| builder |) |)
                                                  |)
                                                ]
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_rv32im_circuit::extension::Rv32M",
                                                  "range_tuple_checker_sizes"
                                                |)
                                              |)
                                            ]
                                          |) in
                                        let~ chip :
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [] :=
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [],
                                              "new",
                                              [],
                                              []
                                            |),
                                            [ M.read (| range_tuple_bus |) ]
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::VmInventory")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                    []
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                    []
                                                    [ F ]
                                                ],
                                              "add_periphery_chip",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  []
                                              ]
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, inventory |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [],
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [],
                                                  [],
                                                  [],
                                                  "clone",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, chip |) ]
                                              |)
                                            ]
                                          |) in
                                        chip
                                      |)))
                                ]
                              |) in
                            let~ mul_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, range_tuple_checker |) ]
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 4;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::MulOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| mul_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::MulOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::MulOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::MulOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::MulOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::MulOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::MulOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::MulOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ mul_h_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, range_tuple_checker |) ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 4;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::MulHOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| mul_h_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::MulHOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::MulHOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::MulHOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            let~ div_rem_chip :
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      []
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        []
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                        []
                                        [ F ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| execution_bus |);
                                      M.read (| program_bus |);
                                      M.read (| memory_bridge |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                      [
                                        Value.Integer IntegerKind.Usize 4;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                        [
                                          Value.Integer IntegerKind.Usize 4;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                      |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, range_tuple_checker |) ]
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 4;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  []
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::DivRemOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::DivRemOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| div_rem_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::DivRemOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::DivRemOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::DivRemOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::DivRemOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::DivRemOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                        []
                                        [ F ]
                                    ];
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              Value.StructTuple
                                "core::result::Result::Ok"
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MExecutor")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32MPeriphery")
                                        []
                                        [ F ]
                                    ];
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ]
                                [ M.read (| inventory |) ]
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::VmExtension"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("Executor", InstanceField.Ty (_Executor F));
          ("Periphery", InstanceField.Ty (_Periphery F));
          ("build", InstanceField.Method (build F))
        ].
  End Impl_openvm_circuit_arch_extensions_VmExtension_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32M.
  
  Module Impl_openvm_circuit_arch_extensions_VmExtension_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32Io.
    Definition Self (F : Ty.t) : Ty.t := Ty.path "openvm_rv32im_circuit::extension::Rv32Io".
    
    (*     type Executor = Rv32IoExecutor<F>; *)
    Definition _Executor (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor") [] [ F ].
    
    (*     type Periphery = Rv32IoPeriphery<F>; *)
    Definition _Periphery (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery") [] [ F ].
    
    (*
        fn build(
            &self,
            builder: &mut VmInventoryBuilder<F>,
        ) -> Result<VmInventory<Self::Executor, Self::Periphery>, VmInventoryError> {
            let mut inventory = VmInventory::new();
            let SystemPort {
                execution_bus,
                program_bus,
                memory_bridge,
            } = builder.system_port();
            let offline_memory = builder.system_base().offline_memory();
    
            let bitwise_lu_chip = if let Some(&chip) = builder
                .find_chip::<SharedBitwiseOperationLookupChip<8>>()
                .first()
            {
                chip.clone()
            } else {
                let bitwise_lu_bus = BitwiseOperationLookupBus::new(builder.new_bus_idx());
                let chip = SharedBitwiseOperationLookupChip::new(bitwise_lu_bus);
                inventory.add_periphery_chip(chip.clone());
                chip
            };
    
            let mut hintstore_chip = Rv32HintStoreChip::new(
                execution_bus,
                program_bus,
                bitwise_lu_chip.clone(),
                memory_bridge,
                offline_memory.clone(),
                builder.system_config().memory_config.pointer_max_bits,
                Rv32HintStoreOpcode::CLASS_OFFSET,
            );
            hintstore_chip.set_streams(builder.streams().clone());
    
            inventory.add_executor(
                hintstore_chip,
                Rv32HintStoreOpcode::iter().map(|x| x.global_opcode()),
            )?;
    
            Ok(inventory)
        }
    *)
    Definition build (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; builder ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_rv32im_circuit::extension::Rv32Io" ],
              self
            |) in
          let builder :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder") [] [ F ]
                ],
              builder
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_circuit::arch::extensions::VmExtension"
                      []
                      [ F ]
                      (Ty.path "openvm_rv32im_circuit::extension::Rv32Io")
                      "Executor";
                    Ty.associated_in_trait
                      "openvm_circuit::arch::extensions::VmExtension"
                      []
                      [ F ]
                      (Ty.path "openvm_rv32im_circuit::extension::Rv32Io")
                      "Periphery"
                  ];
                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ inventory :
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                          []
                          [ F ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                          []
                          [ F ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                            []
                            [ F ]
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                    ],
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                              []
                              [ F ]
                          ];
                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                      ],
                    M.alloc (|
                      Ty.path "openvm_circuit::arch::extensions::SystemPort",
                      M.call_closure (|
                        Ty.path "openvm_circuit::arch::extensions::SystemPort",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                            []
                            [ F ],
                          "system_port",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::arch::extensions::SystemPort",
                              "execution_bus"
                            |) in
                          let γ0_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::arch::extensions::SystemPort",
                              "program_bus"
                            |) in
                          let γ0_2 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::arch::extensions::SystemPort",
                              "memory_bridge"
                            |) in
                          let execution_bus :=
                            M.copy (|
                              Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                              γ0_0
                            |) in
                          let program_bus :=
                            M.copy (|
                              Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                              γ0_1
                            |) in
                          let memory_bridge :=
                            M.copy (|
                              Ty.path
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                              γ0_2
                            |) in
                          M.read (|
                            let~ offline_memory :
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [ F ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [ F ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::SystemBase")
                                    []
                                    [ F ],
                                  "offline_memory",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::SystemBase")
                                              []
                                              [ F ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                            []
                                            [ F ],
                                          "system_base",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| builder |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |) in
                            let~ bitwise_lu_chip :
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [] :=
                              M.match_operator (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                        [ Value.Integer IntegerKind.Usize 8 ]
                                                        []
                                                    ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                          [ Value.Integer IntegerKind.Usize 8 ]
                                                          []
                                                      ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                        [ Value.Integer IntegerKind.Usize 8 ]
                                                        []
                                                    ]
                                                ],
                                              "first",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      8
                                                                  ]
                                                                  []
                                                              ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                [ Value.Integer IntegerKind.Usize 8
                                                                ]
                                                                []
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    ]
                                                                    []
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          8
                                                                      ]
                                                                      []
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                                []
                                                                [ F ],
                                                              "find_chip",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      8
                                                                  ]
                                                                  []
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| builder |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                                      let chip :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                [ Value.Integer IntegerKind.Usize 8 ]
                                                []
                                            ],
                                          γ0_0
                                        |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [],
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [],
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| chip |) |)
                                          |)
                                        ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        let~ bitwise_lu_bus :
                                            Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus" :=
                                          M.call_closure (|
                                            Ty.path
                                              "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                                            M.get_associated_function (|
                                              Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "u16",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                    []
                                                    [ F ],
                                                  "new_bus_idx",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| builder |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |) in
                                        let~ chip :
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [] :=
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                [ Value.Integer IntegerKind.Usize 8 ]
                                                [],
                                              "new",
                                              [],
                                              []
                                            |),
                                            [ M.read (| bitwise_lu_bus |) ]
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::VmInventory")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                                    []
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                                    []
                                                    [ F ]
                                                ],
                                              "add_periphery_chip",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  []
                                              ]
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, inventory |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [],
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [],
                                                  [],
                                                  [],
                                                  "clone",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, chip |) ]
                                              |)
                                            ]
                                          |) in
                                        chip
                                      |)))
                                ]
                              |) in
                            let~ hintstore_chip :
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                  []
                                  [ F ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                  []
                                  [ F ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                    []
                                    [ F ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| execution_bus |);
                                  M.read (| program_bus |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, bitwise_lu_chip |) ]
                                  |);
                                  M.read (| memory_bridge |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "openvm_circuit::arch::config::SystemConfig"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                []
                                                [ F ],
                                              "system_config",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| builder |) |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        "openvm_circuit::arch::config::SystemConfig",
                                        "memory_config"
                                      |),
                                      "openvm_circuit::arch::config::MemoryConfig",
                                      "pointer_max_bits"
                                    |)
                                  |);
                                  M.read (|
                                    get_constant (|
                                      "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                      Ty.path "usize"
                                    |)
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                    []
                                    [ F ],
                                  "set_streams",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, hintstore_chip |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_circuit::arch::vm::Streams")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "openvm_circuit::arch::vm::Streams")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "std::sync::mutex::Mutex")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::arch::vm::Streams")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                []
                                                [ F ],
                                              "streams",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| builder |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmInventory")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                                []
                                                [ F ]
                                            ],
                                          "add_executor",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                          ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, inventory |);
                                          M.read (| hintstore_chip |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcodeIter";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcodeIter",
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.path "openvm_instructions::VmOpcode";
                                                Ty.function
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode"
                                                  ]
                                                  (Ty.path "openvm_instructions::VmOpcode")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcodeIter",
                                                M.get_trait_method (|
                                                  "strum::IntoEnumIterator",
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                                  [],
                                                  [],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "openvm_instructions::VmOpcode",
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "openvm_instructions::VmOpcode",
                                                                  M.get_trait_method (|
                                                                    "openvm_instructions::LocalOpcode",
                                                                    Ty.path
                                                                      "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                                                    [],
                                                                    [],
                                                                    "global_opcode",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "openvm_circuit::arch::extensions::VmInventoryError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventory")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                                        []
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::VmInventoryError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                      M.read (| val |)))
                                ]
                              |) in
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                        []
                                        [ F ]
                                    ];
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              Value.StructTuple
                                "core::result::Result::Ok"
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::extension::Rv32IoExecutor")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::extension::Rv32IoPeriphery")
                                        []
                                        [ F ]
                                    ];
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ]
                                [ M.read (| inventory |) ]
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::extensions::VmExtension"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("Executor", InstanceField.Ty (_Executor F));
          ("Periphery", InstanceField.Ty (_Periphery F));
          ("build", InstanceField.Method (build F))
        ].
  End Impl_openvm_circuit_arch_extensions_VmExtension_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_Rv32Io.
  
  Module phantom.
    (* StructTuple
      {
        name := "Rv32HintInputSubEx";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    (* StructRecord
      {
        name := "Rv32HintRandomSubEx";
        const_params := [];
        ty_params := [];
        fields := [ ("rng", Ty.path "rand_core::os::OsRng") ];
      } *)
    
    Module Impl_openvm_rv32im_circuit_extension_phantom_Rv32HintRandomSubEx.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::extension::phantom::Rv32HintRandomSubEx".
      
      (*
              pub fn new() -> Self {
                  Self { rng: OsRng }
              }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_rv32im_circuit::extension::phantom::Rv32HintRandomSubEx"
              []
              []
              [ ("rng", Value.StructTuple "rand_core::os::OsRng" [] [] []) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_extension_phantom_Rv32HintRandomSubEx.
    
    (* StructTuple
      {
        name := "Rv32PrintStrSubEx";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_openvm_circuit_arch_execution_PhantomSubExecutor_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_extension_phantom_Rv32HintInputSubEx.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::extension::phantom::Rv32HintInputSubEx".
      
      (*
              fn phantom_execute(
                  &mut self,
                  _: &MemoryController<F>,
                  streams: &mut Streams<F>,
                  _: PhantomDiscriminant,
                  _: F,
                  _: F,
                  _: u16,
              ) -> eyre::Result<()> {
                  let mut hint = match streams.input_stream.pop_front() {
                      Some(hint) => hint,
                      None => {
                          bail!("EndOfInputStream");
                      }
                  };
                  streams.hint_stream.clear();
                  streams.hint_stream.extend(
                      (hint.len() as u32)
                          .to_le_bytes()
                          .iter()
                          .map(|b| F::from_canonical_u8( *b)),
                  );
                  // Extend by 0 for 4 byte alignment
                  let capacity = hint.len().div_ceil(4) * 4;
                  hint.resize(capacity, F::ZERO);
                  streams.hint_stream.extend(hint);
                  Ok(())
              }
      *)
      Definition phantom_execute
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; β1; streams; β3; β4; β5; β6 ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_rv32im_circuit::extension::phantom::Rv32HintInputSubEx" ],
                self
              |) in
            let β1 :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                β1
              |) in
            let streams :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                streams
              |) in
            let β3 :=
              M.alloc (| Ty.path "openvm_instructions::phantom::PhantomDiscriminant", β3 |) in
            let β4 := M.alloc (| F, β4 |) in
            let β5 := M.alloc (| F, β5 |) in
            let β6 := M.alloc (| Ty.path "u16", β6 |) in
            M.match_operator (|
              Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "eyre::Report" ],
              β1,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "eyre::Report" ],
                      β3,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "eyre::Report" ],
                              β4,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "eyre::Report" ],
                                      β5,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [ Ty.tuple []; Ty.path "eyre::Report" ],
                                              β6,
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.catch_return
                                                      (Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [ Ty.tuple []; Ty.path "eyre::Report" ]) (|
                                                      ltac:(M.monadic
                                                        (M.read (|
                                                          let~ hint :
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ F; Ty.path "alloc::alloc::Global"
                                                                ] :=
                                                            M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ F; Ty.path "alloc::alloc::Global"
                                                                ],
                                                              M.alloc (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::collections::vec_deque::VecDeque")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "pop_front",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| streams |)
                                                                        |),
                                                                        "openvm_circuit::arch::vm::Streams",
                                                                        "input_stream"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let hint :=
                                                                      M.copy (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        γ0_0
                                                                      |) in
                                                                    M.read (| hint |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ,
                                                                        "core::option::Option::None"
                                                                      |) in
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          Value.StructTuple
                                                                            "core::result::Result::Err"
                                                                            []
                                                                            [
                                                                              Ty.tuple [];
                                                                              Ty.path "eyre::Report"
                                                                            ]
                                                                            [
                                                                              M.read (|
                                                                                let~ error :
                                                                                    Ty.path
                                                                                      "eyre::Report" :=
                                                                                  M.call_closure (|
                                                                                    Ty.path
                                                                                      "eyre::Report",
                                                                                    M.get_function (|
                                                                                      "eyre::private::format_err",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "core::fmt::Arguments",
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "core::fmt::Arguments",
                                                                                          "new_const",
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          ],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.alloc (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "array")
                                                                                                    [
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        1
                                                                                                    ]
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "str"
                                                                                                        ]
                                                                                                    ],
                                                                                                  Value.Array
                                                                                                    [
                                                                                                      mk_str (|
                                                                                                        "EndOfInputStream"
                                                                                                      |)
                                                                                                    ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |) in
                                                                                error
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::vec_deque::VecDeque")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "clear",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (| streams |)
                                                                    |),
                                                                    "openvm_circuit::arch::vm::Streams",
                                                                    "hint_stream"
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::Extend",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::vec_deque::VecDeque")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                [ F ],
                                                                "extend",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.path "u8" ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "u8" ]
                                                                        ]
                                                                        F
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (| streams |)
                                                                    |),
                                                                    "openvm_circuit::arch::vm::Streams",
                                                                    "hint_stream"
                                                                  |)
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.path "u8" ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "u8" ]
                                                                        ]
                                                                        F
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ Ty.path "u8" ],
                                                                    [],
                                                                    [],
                                                                    "map",
                                                                    [],
                                                                    [
                                                                      F;
                                                                      Ty.function
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "u8" ]
                                                                        ]
                                                                        F
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "u8" ],
                                                                        "iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [ Ty.path "u8" ]
                                                                            ],
                                                                          M.pointer_coercion
                                                                            M.PointerCoercion.Unsize
                                                                            (Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      4
                                                                                  ]
                                                                                  [ Ty.path "u8" ]
                                                                              ])
                                                                            (Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Ty.path "u8" ]
                                                                              ]),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      4
                                                                                  ]
                                                                                  [ Ty.path "u8" ],
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        4
                                                                                    ]
                                                                                    [ Ty.path "u8"
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.path "u32",
                                                                                    "to_le_bytes",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.cast
                                                                                      (Ty.path
                                                                                        "u32")
                                                                                      (M.call_closure (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              F;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          "len",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            hint
                                                                                          |)
                                                                                        ]
                                                                                      |))
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            ltac:(M.monadic
                                                                              (M.match_operator (|
                                                                                F,
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [ Ty.path "u8"
                                                                                    ],
                                                                                  α0
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let b :=
                                                                                        M.copy (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "u8"
                                                                                            ],
                                                                                          γ
                                                                                        |) in
                                                                                      M.call_closure (|
                                                                                        F,
                                                                                        M.get_trait_method (|
                                                                                          "p3_field::field::FieldAlgebra",
                                                                                          F,
                                                                                          [],
                                                                                          [],
                                                                                          "from_canonical_u8",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                b
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)))
                                                                                ]
                                                                              |)))
                                                                          | _ =>
                                                                            M.impossible
                                                                              "wrong number of arguments"
                                                                          end))
                                                                  ]
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ capacity : Ty.path "usize" :=
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.mul,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.path "usize",
                                                                    "div_ceil",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "len",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          hint
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                |);
                                                                Value.Integer IntegerKind.Usize 4
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "resize",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  hint
                                                                |);
                                                                M.read (| capacity |);
                                                                M.read (|
                                                                  get_constant (|
                                                                    "p3_field::field::FieldAlgebra::ZERO",
                                                                    F
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::Extend",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::vec_deque::VecDeque")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                [ F ],
                                                                "extend",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (| streams |)
                                                                    |),
                                                                    "openvm_circuit::arch::vm::Streams",
                                                                    "hint_stream"
                                                                  |)
                                                                |);
                                                                M.read (| hint |)
                                                              ]
                                                            |) in
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [ Ty.tuple []; Ty.path "eyre::Report"
                                                              ],
                                                            Value.StructTuple
                                                              "core::result::Result::Ok"
                                                              []
                                                              [ Ty.tuple []; Ty.path "eyre::Report"
                                                              ]
                                                              [ Value.Tuple [] ]
                                                          |)
                                                        |)))
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::execution::PhantomSubExecutor"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("phantom_execute", InstanceField.Method (phantom_execute F)) ].
    End Impl_openvm_circuit_arch_execution_PhantomSubExecutor_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_extension_phantom_Rv32HintInputSubEx.
    
    Module Impl_openvm_circuit_arch_execution_PhantomSubExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_phantom_Rv32HintRandomSubEx.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::extension::phantom::Rv32HintRandomSubEx".
      
      (*
              fn phantom_execute(
                  &mut self,
                  memory: &MemoryController<F>,
                  streams: &mut Streams<F>,
                  _: PhantomDiscriminant,
                  a: F,
                  _: F,
                  _: u16,
              ) -> eyre::Result<()> {
                  let len = unsafe_read_rv32_register(memory, a) as usize;
                  streams.hint_stream.clear();
                  streams.hint_stream.extend(
                      std::iter::repeat_with(|| F::from_canonical_u8(self.rng.gen::<u8>())).take(len * 4),
                  );
                  Ok(())
              }
      *)
      Definition phantom_execute
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; streams; β3; a; β5; β6 ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_rv32im_circuit::extension::phantom::Rv32HintRandomSubEx" ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let streams :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                streams
              |) in
            let β3 :=
              M.alloc (| Ty.path "openvm_instructions::phantom::PhantomDiscriminant", β3 |) in
            let a := M.alloc (| F, a |) in
            let β5 := M.alloc (| F, β5 |) in
            let β6 := M.alloc (| Ty.path "u16", β6 |) in
            M.match_operator (|
              Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "eyre::Report" ],
              β3,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "eyre::Report" ],
                      β5,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "eyre::Report" ],
                              β6,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.read (|
                                      let~ len : Ty.path "usize" :=
                                        M.cast
                                          (Ty.path "usize")
                                          (M.call_closure (|
                                            Ty.path "u32",
                                            M.get_function (|
                                              "openvm_rv32im_circuit::adapters::unsafe_read_rv32_register",
                                              [],
                                              [ F ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| memory |) |)
                                              |);
                                              M.read (| a |)
                                            ]
                                          |)) in
                                      let~ _ : Ty.tuple [] :=
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::collections::vec_deque::VecDeque")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            "clear",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| streams |) |),
                                                "openvm_circuit::arch::vm::Streams",
                                                "hint_stream"
                                              |)
                                            |)
                                          ]
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::Extend",
                                            Ty.apply
                                              (Ty.path "alloc::collections::vec_deque::VecDeque")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            [],
                                            [ F ],
                                            "extend",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::take::Take")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::sources::repeat_with::RepeatWith")
                                                    []
                                                    [ Ty.function [] F ]
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| streams |) |),
                                                "openvm_circuit::arch::vm::Streams",
                                                "hint_stream"
                                              |)
                                            |);
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::take::Take")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::sources::repeat_with::RepeatWith")
                                                    []
                                                    [ Ty.function [] F ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::sources::repeat_with::RepeatWith")
                                                  []
                                                  [ Ty.function [] F ],
                                                [],
                                                [],
                                                "take",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::sources::repeat_with::RepeatWith")
                                                    []
                                                    [ Ty.function [] F ],
                                                  M.get_function (|
                                                    "core::iter::sources::repeat_with::repeat_with",
                                                    [],
                                                    [ F; Ty.function [] F ]
                                                  |),
                                                  [
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                F,
                                                                M.alloc (| Ty.tuple [], α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.call_closure (|
                                                                        F,
                                                                        M.get_trait_method (|
                                                                          "p3_field::field::FieldAlgebra",
                                                                          F,
                                                                          [],
                                                                          [],
                                                                          "from_canonical_u8",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u8",
                                                                            M.get_trait_method (|
                                                                              "rand::rng::Rng",
                                                                              Ty.path
                                                                                "rand_core::os::OsRng",
                                                                              [],
                                                                              [],
                                                                              "gen",
                                                                              [],
                                                                              [ Ty.path "u8" ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      self
                                                                                    |)
                                                                                  |),
                                                                                  "openvm_rv32im_circuit::extension::phantom::Rv32HintRandomSubEx",
                                                                                  "rng"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                          | _ =>
                                                            M.impossible "wrong number of arguments"
                                                          end))
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.mul,
                                                  [
                                                    M.read (| len |);
                                                    Value.Integer IntegerKind.Usize 4
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |) in
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.tuple []; Ty.path "eyre::Report" ],
                                        Value.StructTuple
                                          "core::result::Result::Ok"
                                          []
                                          [ Ty.tuple []; Ty.path "eyre::Report" ]
                                          [ Value.Tuple [] ]
                                      |)
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::execution::PhantomSubExecutor"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("phantom_execute", InstanceField.Method (phantom_execute F)) ].
    End Impl_openvm_circuit_arch_execution_PhantomSubExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_phantom_Rv32HintRandomSubEx.
    
    Module Impl_openvm_circuit_arch_execution_PhantomSubExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_phantom_Rv32PrintStrSubEx.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::extension::phantom::Rv32PrintStrSubEx".
      
      (*
              fn phantom_execute(
                  &mut self,
                  memory: &MemoryController<F>,
                  _: &mut Streams<F>,
                  _: PhantomDiscriminant,
                  a: F,
                  b: F,
                  _: u16,
              ) -> eyre::Result<()> {
                  let rd = unsafe_read_rv32_register(memory, a);
                  let rs1 = unsafe_read_rv32_register(memory, b);
                  let bytes = (0..rs1)
                      .map(|i| -> eyre::Result<u8> {
                          let val = memory.unsafe_read_cell(F::TWO, F::from_canonical_u32(rd + i));
                          let byte: u8 = val.as_canonical_u32().try_into()?;
                          Ok(byte)
                      })
                      .collect::<eyre::Result<Vec<u8>>>()?;
                  let peeked_str = String::from_utf8(bytes)?;
                  print!("{peeked_str}");
                  Ok(())
              }
      *)
      Definition phantom_execute
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; β2; β3; a; b; β6 ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_rv32im_circuit::extension::phantom::Rv32PrintStrSubEx" ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let β2 :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                β2
              |) in
            let β3 :=
              M.alloc (| Ty.path "openvm_instructions::phantom::PhantomDiscriminant", β3 |) in
            let a := M.alloc (| F, a |) in
            let b := M.alloc (| F, b |) in
            let β6 := M.alloc (| Ty.path "u16", β6 |) in
            M.match_operator (|
              Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "eyre::Report" ],
              β2,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "eyre::Report" ],
                      β3,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "eyre::Report" ],
                              β6,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.catch_return
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "eyre::Report" ]) (|
                                      ltac:(M.monadic
                                        (M.read (|
                                          let~ rd : Ty.path "u32" :=
                                            M.call_closure (|
                                              Ty.path "u32",
                                              M.get_function (|
                                                "openvm_rv32im_circuit::adapters::unsafe_read_rv32_register",
                                                [],
                                                [ F ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| memory |) |)
                                                |);
                                                M.read (| a |)
                                              ]
                                            |) in
                                          let~ rs1 : Ty.path "u32" :=
                                            M.call_closure (|
                                              Ty.path "u32",
                                              M.get_function (|
                                                "openvm_rv32im_circuit::adapters::unsafe_read_rv32_register",
                                                [],
                                                [ F ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| memory |) |)
                                                |);
                                                M.read (| b |)
                                              ]
                                            |) in
                                          let~ bytes :
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] :=
                                            M.match_operator (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "eyre::Report"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "eyre::Report"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "u8";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "eyre::Report"
                                                      ],
                                                    [],
                                                    [],
                                                    "branch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.path "u8";
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "eyre::Report"
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              []
                                                              [ Ty.path "u32" ];
                                                            Ty.function
                                                              [ Ty.path "u32" ]
                                                              (Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.path "u8";
                                                                  Ty.path "eyre::Report"
                                                                ])
                                                          ],
                                                        [],
                                                        [],
                                                        "collect",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.path "u8";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "eyre::Report"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::map::Map")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "u32" ];
                                                              Ty.function
                                                                [ Ty.path "u32" ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path "u8";
                                                                    Ty.path "eyre::Report"
                                                                  ])
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              []
                                                              [ Ty.path "u32" ],
                                                            [],
                                                            [],
                                                            "map",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.path "u8";
                                                                  Ty.path "eyre::Report"
                                                                ];
                                                              Ty.function
                                                                [ Ty.path "u32" ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path "u8";
                                                                    Ty.path "eyre::Report"
                                                                  ])
                                                            ]
                                                          |),
                                                          [
                                                            Value.mkStructRecord
                                                              "core::ops::range::Range"
                                                              []
                                                              [ Ty.path "u32" ]
                                                              [
                                                                ("start",
                                                                  Value.Integer IntegerKind.U32 0);
                                                                ("end_", M.read (| rs1 |))
                                                              ];
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.path "u8";
                                                                            Ty.path "eyre::Report"
                                                                          ],
                                                                        M.alloc (|
                                                                          Ty.path "u32",
                                                                          α0
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let i :=
                                                                                M.copy (|
                                                                                  Ty.path "u32",
                                                                                  γ
                                                                                |) in
                                                                              M.read (|
                                                                                let~ val : F :=
                                                                                  M.call_closure (|
                                                                                    F,
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_circuit::system::memory::controller::MemoryController")
                                                                                        []
                                                                                        [ F ],
                                                                                      "unsafe_read_cell",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            memory
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.read (|
                                                                                        get_constant (|
                                                                                          "p3_field::field::FieldAlgebra::TWO",
                                                                                          F
                                                                                        |)
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        F,
                                                                                        M.get_trait_method (|
                                                                                          "p3_field::field::FieldAlgebra",
                                                                                          F,
                                                                                          [],
                                                                                          [],
                                                                                          "from_canonical_u32",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "u32",
                                                                                            BinOp.Wrap.add,
                                                                                            [
                                                                                              M.read (|
                                                                                                rd
                                                                                              |);
                                                                                              M.read (|
                                                                                                i
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |) in
                                                                                let~ byte :
                                                                                    Ty.path "u8" :=
                                                                                  M.match_operator (|
                                                                                    Ty.path "u8",
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::control_flow::ControlFlow")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::convert::Infallible";
                                                                                              Ty.path
                                                                                                "core::num::error::TryFromIntError"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "u8"
                                                                                        ],
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::ops::control_flow::ControlFlow")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::result::Result")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "core::convert::Infallible";
                                                                                                Ty.path
                                                                                                  "core::num::error::TryFromIntError"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "u8"
                                                                                          ],
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::try_trait::Try",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "u8";
                                                                                              Ty.path
                                                                                                "core::num::error::TryFromIntError"
                                                                                            ],
                                                                                          [],
                                                                                          [],
                                                                                          "branch",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::result::Result")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u8";
                                                                                                Ty.path
                                                                                                  "core::num::error::TryFromIntError"
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::convert::TryInto",
                                                                                              Ty.path
                                                                                                "u32",
                                                                                              [],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u8"
                                                                                              ],
                                                                                              "try_into",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "u32",
                                                                                                M.get_trait_method (|
                                                                                                  "p3_field::field::PrimeField32",
                                                                                                  F,
                                                                                                  [],
                                                                                                  [],
                                                                                                  "as_canonical_u32",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    val
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                              γ,
                                                                                              "core::ops::control_flow::ControlFlow::Break",
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                residual :=
                                                                                            M.copy (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "core::convert::Infallible";
                                                                                                  Ty.path
                                                                                                    "core::num::error::TryFromIntError"
                                                                                                ],
                                                                                              γ0_0
                                                                                            |) in
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::result::Result")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u8";
                                                                                                      Ty.path
                                                                                                        "eyre::Report"
                                                                                                    ],
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "u8";
                                                                                                        Ty.path
                                                                                                          "eyre::Report"
                                                                                                      ],
                                                                                                    [],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "core::num::error::TryFromIntError"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                              γ,
                                                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                                                              0
                                                                                            |) in
                                                                                          let val :=
                                                                                            M.copy (|
                                                                                              Ty.path
                                                                                                "u8",
                                                                                              γ0_0
                                                                                            |) in
                                                                                          M.read (|
                                                                                            val
                                                                                          |)))
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.path "u8";
                                                                                      Ty.path
                                                                                        "eyre::Report"
                                                                                    ],
                                                                                  Value.StructTuple
                                                                                    "core::result::Result::Ok"
                                                                                    []
                                                                                    [
                                                                                      Ty.path "u8";
                                                                                      Ty.path
                                                                                        "eyre::Report"
                                                                                    ]
                                                                                    [
                                                                                      M.read (|
                                                                                        byte
                                                                                      |)
                                                                                    ]
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                  | _ =>
                                                                    M.impossible
                                                                      "wrong number of arguments"
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "eyre::Report"
                                                          ],
                                                        γ0_0
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [ Ty.tuple []; Ty.path "eyre::Report"
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "eyre::Report"
                                                                ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "eyre::Report"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "u8";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        γ0_0
                                                      |) in
                                                    M.read (| val |)))
                                              ]
                                            |) in
                                          let~ peeked_str : Ty.path "alloc::string::String" :=
                                            M.match_operator (|
                                              Ty.path "alloc::string::String",
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "alloc::string::FromUtf8Error"
                                                      ];
                                                    Ty.path "alloc::string::String"
                                                  ],
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "alloc::string::FromUtf8Error"
                                                        ];
                                                      Ty.path "alloc::string::String"
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "alloc::string::String";
                                                        Ty.path "alloc::string::FromUtf8Error"
                                                      ],
                                                    [],
                                                    [],
                                                    "branch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "alloc::string::String";
                                                          Ty.path "alloc::string::FromUtf8Error"
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.path "alloc::string::String",
                                                        "from_utf8",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| bytes |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "alloc::string::FromUtf8Error"
                                                          ],
                                                        γ0_0
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [ Ty.tuple []; Ty.path "eyre::Report"
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "eyre::Report"
                                                                ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "alloc::string::FromUtf8Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val :=
                                                      M.copy (|
                                                        Ty.path "alloc::string::String",
                                                        γ0_0
                                                      |) in
                                                    M.read (| val |)))
                                              ]
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_function (|
                                                    "std::io::stdio::_print",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::Arguments",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::Arguments",
                                                        "new_v1",
                                                        [
                                                          Value.Integer IntegerKind.Usize 1;
                                                          Value.Integer IntegerKind.Usize 1
                                                        ],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "str" ]
                                                                  ],
                                                                Value.Array [ mk_str (| "" |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                  [
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument"
                                                                  ],
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path
                                                                        "core::fmt::rt::Argument",
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "core::fmt::rt::Argument",
                                                                        "new_display",
                                                                        [],
                                                                        [
                                                                          Ty.path
                                                                            "alloc::string::String"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              peeked_str
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |) in
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [ Ty.tuple []; Ty.path "eyre::Report" ],
                                            Value.StructTuple
                                              "core::result::Result::Ok"
                                              []
                                              [ Ty.tuple []; Ty.path "eyre::Report" ]
                                              [ Value.Tuple [] ]
                                          |)
                                        |)))
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::execution::PhantomSubExecutor"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("phantom_execute", InstanceField.Method (phantom_execute F)) ].
    End Impl_openvm_circuit_arch_execution_PhantomSubExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_extension_phantom_Rv32PrintStrSubEx.
  End phantom.
End extension.
