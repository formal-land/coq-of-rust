(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module hintstore.
  (* StructRecord
    {
      name := "Rv32HintStoreCols";
      const_params := [];
      ty_params := [ "T" ];
      fields :=
        [
          ("is_single", T);
          ("is_buffer", T);
          ("rem_words_limbs",
            Ty.apply
              (Ty.path "array")
              [
                M.unevaluated_const
                  (mk_str (|
                    "openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_rem_words_limbs_discriminant"
                  |))
              ]
              [ T ]);
          ("from_state",
            Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ T ]);
          ("mem_ptr_ptr", T);
          ("mem_ptr_limbs",
            Ty.apply
              (Ty.path "array")
              [
                M.unevaluated_const
                  (mk_str (|
                    "openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_mem_ptr_limbs_discriminant"
                  |))
              ]
              [ T ]);
          ("mem_ptr_aux_cols",
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
              []
              [ T ]);
          ("write_aux",
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
              [
                M.unevaluated_const
                  (mk_str (| "openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_discriminant" |))
              ]
              [ T ]);
          ("data",
            Ty.apply
              (Ty.path "array")
              [
                M.unevaluated_const
                  (mk_str (|
                    "openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_data_discriminant"
                  |))
              ]
              [ T ]);
          ("is_buffer_start", T);
          ("num_words_ptr", T);
          ("num_words_aux_cols",
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
              []
              [ T ])
        ];
    } *)
  
  Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_T_for_slice_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
    
    (* AlignedBorrow *)
    Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ], self |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.tuple
                                [
                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                ],
                              Value.Tuple
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.path "usize",
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ T ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.path "usize",
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                            []
                                            [ T ],
                                          "width",
                                          [],
                                          []
                                        |),
                                        []
                                      |)
                                    |)
                                  |)
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val :=
                                    M.copy (|
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      γ0_0
                                    |) in
                                  let right_val :=
                                    M.copy (|
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      γ0_1
                                    |) in
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                Ty.path "bool",
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.eq,
                                                    [
                                                      M.read (|
                                                        M.deref (| M.read (| left_val |) |)
                                                      |);
                                                      M.read (|
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                Value.StructTuple
                                                  "core::panicking::AssertKind::Eq"
                                                  []
                                                  []
                                                  [] in
                                              M.alloc (|
                                                Ty.path "never",
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                      [ Ty.path "core::fmt::Arguments" ]
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |)))
                            ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)));
                  fun γ => ltac:(M.monadic (Value.Tuple []))
                ]
              |) in
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols") [] [ T ]
                ],
              M.match_operator (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                      []
                      [ T ]
                  ],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                []
                                [ T ]
                            ]
                        ];
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                  []
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ T ],
                      "align_to",
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                          []
                          [ T ]
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                      let prefix :=
                        M.copy (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          γ0_0
                        |) in
                      let shorts :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                    []
                                    [ T ]
                                ]
                            ],
                          γ0_1
                        |) in
                      let _suffix :=
                        M.copy (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          γ0_2
                        |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_associated_function (|
                                                          Ty.apply (Ty.path "slice") [] [ T ],
                                                          "is_empty",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| prefix |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.never_to_any (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::panic_fmt",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::Arguments",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::Arguments",
                                                        "new_const",
                                                        [ Value.Integer IntegerKind.Usize 1 ],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "str" ]
                                                                  ],
                                                                Value.Array
                                                                  [
                                                                    mk_str (|
                                                                      "Alignment should match"
                                                                    |)
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                            ],
                                          Value.Tuple
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path "usize",
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                                            []
                                                            [ T ]
                                                        ],
                                                      "len",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| shorts |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path "usize",
                                                  Value.Integer IntegerKind.Usize 1
                                                |)
                                              |)
                                            ]
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let left_val :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                  γ0_0
                                                |) in
                                              let right_val :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                  γ0_1
                                                |) in
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.eq,
                                                                [
                                                                  M.read (|
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |);
                                                                  M.read (|
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.path
                                                                "core::panicking::AssertKind" :=
                                                            Value.StructTuple
                                                              "core::panicking::AssertKind::Eq"
                                                              []
                                                              []
                                                              [] in
                                                          M.alloc (|
                                                            Ty.path "never",
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [ Ty.path "usize"; Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                                  [ Ty.path "core::fmt::Arguments" ]
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |) in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                []
                                [ T ]
                            ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| shorts |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::borrow::Borrow"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
  End Impl_core_borrow_Borrow_openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_T_for_slice_T.
  
  Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_T_for_slice_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
    
    (* AlignedBorrow *)
    Definition borrow_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                    ],
                                  Value.Tuple
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                                []
                                                [ T ],
                                              "width",
                                              [],
                                              []
                                            |),
                                            []
                                          |)
                                        |)
                                      |)
                                    ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let left_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_0
                                        |) in
                                      let right_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_1
                                        |) in
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (|
                                                            M.deref (| M.read (| left_val |) |)
                                                          |);
                                                          M.read (|
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ kind :
                                                      Ty.path "core::panicking::AssertKind" :=
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                      []
                                                      [] in
                                                  M.alloc (|
                                                    Ty.path "never",
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::assert_failed",
                                                        [],
                                                        [ Ty.path "usize"; Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.read (| kind |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| left_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                          [ Ty.path "core::fmt::Arguments" ]
                                                          []
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                        []
                        [ T ]
                    ],
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                          []
                          [ T ]
                      ],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                    []
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ T ],
                          "align_to_mut",
                          [],
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                              []
                              [ T ]
                          ]
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                          let prefix :=
                            M.copy (|
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              γ0_0
                            |) in
                          let shorts :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                        []
                                        [ T ]
                                    ]
                                ],
                              γ0_1
                            |) in
                          let _suffix :=
                            M.copy (|
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              γ0_2
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [] [ T ],
                                                              "is_empty",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| prefix |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::panic_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_const",
                                                            [ Value.Integer IntegerKind.Usize 1 ],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "str" ]
                                                                      ],
                                                                    Value.Array
                                                                      [
                                                                        mk_str (|
                                                                          "Alignment should match"
                                                                        |)
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ],
                                              Value.Tuple
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                                                []
                                                                [ T ]
                                                            ],
                                                          "len",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| shorts |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      Value.Integer IntegerKind.Usize 1
                                                    |)
                                                  |)
                                                ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let left_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_0
                                                    |) in
                                                  let right_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_1
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.eq,
                                                                    [
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let~ kind :
                                                                  Ty.path
                                                                    "core::panicking::AssertKind" :=
                                                                Value.StructTuple
                                                                  "core::panicking::AssertKind::Eq"
                                                                  []
                                                                  []
                                                                  [] in
                                                              M.alloc (|
                                                                Ty.path "never",
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [],
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::fmt::Arguments"
                                                                      ]
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                    []
                                    [ T ]
                                ],
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| shorts |) |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::borrow::BorrowMut"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
  End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_T_for_slice_T.
  
  Module Impl_openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols") [] [ T ].
    
    (* AlignedBorrow *)
    Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            Ty.path "usize",
            M.get_function (|
              "core::mem::size_of",
              [],
              [
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                  []
                  [ Ty.path "u8" ]
              ]
            |),
            []
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_width :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "width" (width T).
    Admitted.
    Global Typeclasses Opaque width.
  End Impl_openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_T.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols") [] [ T ].
    
    (* Debug *)
    Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols") [] [ T ]
                ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.read (|
            let~ names :
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 12 ]
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                  ] :=
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 12 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                      Value.Array
                        [
                          mk_str (| "is_single" |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_buffer" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "rem_words_limbs" |) |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "from_state" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "mem_ptr_ptr" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "mem_ptr_limbs" |) |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "mem_ptr_aux_cols" |) |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "write_aux" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "is_buffer_start" |) |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "num_words_ptr" |) |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "num_words_aux_cols" |) |)
                          |)
                        ]
                    |)
                  |)
                |)
              |) in
            let~ values :
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 12 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ])
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 12 ]
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                            ],
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply (Ty.path "&") [] [ T ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "is_single"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply (Ty.path "&") [] [ T ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "is_buffer"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ T ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "rem_words_limbs"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                        []
                                        [ T ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "from_state"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply (Ty.path "&") [] [ T ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "mem_ptr_ptr"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ T ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "mem_ptr_limbs"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                        []
                                        [ T ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "mem_ptr_aux_cols"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ T ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "write_aux"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ T ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "data"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply (Ty.path "&") [] [ T ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "is_buffer_start"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply (Ty.path "&") [] [ T ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                          "num_words_ptr"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                            []
                                            [ T ]
                                        ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                                []
                                                [ T ]
                                            ],
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                              "num_words_aux_cols"
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                        |)
                      |)
                    |)
                  |)
                ]
              |) in
            M.alloc (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32HintStoreCols" |) |) |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 12 ]
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ])
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreCols_T.
  
  (* StructRecord
    {
      name := "Rv32HintStoreAir";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("execution_bridge", Ty.path "openvm_circuit::arch::execution::ExecutionBridge");
          ("memory_bridge",
            Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge");
          ("bitwise_operation_lookup_bus",
            Ty.path "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus");
          ("offset", Ty.path "usize");
          ("pointer_max_bits", Ty.path "usize")
        ];
    } *)
  
  Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
  
  Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir" ],
              self
            |) in
          M.match_operator (|
            Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
            Value.DeclaredButUndefined,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                    Value.DeclaredButUndefined,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                            Value.DeclaredButUndefined,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                    Value.DeclaredButUndefined,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.read (| M.deref (| M.read (| self |) |) |)))
                                    ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
  
  Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
    Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field5_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32HintStoreAir" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "execution_bridge" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::execution::ExecutionBridge" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                          "execution_bridge"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory_bridge" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                    ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                          "memory_bridge"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "bitwise_operation_lookup_bus" |) |)
              |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus"
                    ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                          "bitwise_operation_lookup_bus"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "offset" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                          "offset"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pointer_max_bits" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                              "pointer_max_bits"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
  
  Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir".
    
    (*
        fn width(&self) -> usize {
            Rv32HintStoreCols::<F>::width()
        }
    *)
    Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir" ],
              self
            |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols") [] [ F ],
              "width",
              [],
              []
            |),
            []
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_air::air::BaseAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *) [ ("width", InstanceField.Method (width F)) ].
  End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
  
  Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir".
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::rap::BaseAirWithPublicValues"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *) [].
  End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
  
  Module Impl_openvm_stark_backend_rap_PartitionedBaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir".
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::rap::PartitionedBaseAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *) [].
  End Impl_openvm_stark_backend_rap_PartitionedBaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
  
  Module Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
    Definition Self (AB : Ty.t) : Ty.t :=
      Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir".
    
    (*
        fn eval(&self, builder: &mut AB) {
            let main = builder.main();
            let local = main.row_slice(0);
            let local_cols: &Rv32HintStoreCols<AB::Var> = ( *local).borrow();
            let next = main.row_slice(1);
            let next_cols: &Rv32HintStoreCols<AB::Var> = ( *next).borrow();
    
            let timestamp: AB::Var = local_cols.from_state.timestamp;
            let mut timestamp_delta: usize = 0;
            let mut timestamp_pp = || {
                timestamp_delta += 1;
                timestamp + AB::Expr::from_canonical_usize(timestamp_delta - 1)
            };
    
            builder.assert_bool(local_cols.is_single);
            builder.assert_bool(local_cols.is_buffer);
            builder.assert_bool(local_cols.is_buffer_start);
            builder
                .when(local_cols.is_buffer_start)
                .assert_one(local_cols.is_buffer);
            builder.assert_bool(local_cols.is_single + local_cols.is_buffer);
    
            let is_valid = local_cols.is_single + local_cols.is_buffer;
            let is_start = local_cols.is_single + local_cols.is_buffer_start;
            // `is_end` is false iff the next row is a buffer row that is not buffer start
            // This is boolean because is_buffer_start == 1 => is_buffer == 1
            // Note: every non-valid row has `is_end == 1`
            let is_end = not::<AB::Expr>(next_cols.is_buffer) + next_cols.is_buffer_start;
    
            let mut rem_words = AB::Expr::ZERO;
            let mut next_rem_words = AB::Expr::ZERO;
            let mut mem_ptr = AB::Expr::ZERO;
            let mut next_mem_ptr = AB::Expr::ZERO;
            for i in (0..RV32_REGISTER_NUM_LIMBS).rev() {
                rem_words = rem_words * AB::F::from_canonical_u32(1 << RV32_CELL_BITS)
                    + local_cols.rem_words_limbs[i];
                next_rem_words = next_rem_words * AB::F::from_canonical_u32(1 << RV32_CELL_BITS)
                    + next_cols.rem_words_limbs[i];
                mem_ptr = mem_ptr * AB::F::from_canonical_u32(1 << RV32_CELL_BITS)
                    + local_cols.mem_ptr_limbs[i];
                next_mem_ptr = next_mem_ptr * AB::F::from_canonical_u32(1 << RV32_CELL_BITS)
                    + next_cols.mem_ptr_limbs[i];
            }
    
            // Constrain that if local is invalid, then the next state is invalid as well
            builder
                .when_transition()
                .when(not::<AB::Expr>(is_valid.clone()))
                .assert_zero(next_cols.is_single + next_cols.is_buffer);
    
            // Constrain that when we start a buffer, the is_buffer_start is set to 1
            builder
                .when(local_cols.is_single)
                .assert_one(is_end.clone());
            builder
                .when_first_row()
                .assert_one(not::<AB::Expr>(local_cols.is_buffer) + local_cols.is_buffer_start);
    
            // read mem_ptr
            self.memory_bridge
                .read(
                    MemoryAddress::new(
                        AB::F::from_canonical_u32(RV32_REGISTER_AS),
                        local_cols.mem_ptr_ptr,
                    ),
                    local_cols.mem_ptr_limbs,
                    timestamp_pp(),
                    &local_cols.mem_ptr_aux_cols,
                )
                .eval(builder, is_start.clone());
    
            // read num_words
            self.memory_bridge
                .read(
                    MemoryAddress::new(
                        AB::F::from_canonical_u32(RV32_REGISTER_AS),
                        local_cols.num_words_ptr,
                    ),
                    local_cols.rem_words_limbs,
                    timestamp_pp(),
                    &local_cols.num_words_aux_cols,
                )
                .eval(builder, local_cols.is_buffer_start);
    
            // write hint
            self.memory_bridge
                .write(
                    MemoryAddress::new(AB::F::from_canonical_u32(RV32_MEMORY_AS), mem_ptr.clone()),
                    local_cols.data,
                    timestamp_pp(),
                    &local_cols.write_aux,
                )
                .eval(builder, is_valid.clone());
    
            let expected_opcode = (local_cols.is_single
                * AB::F::from_canonical_usize(HINT_STOREW as usize + self.offset))
                + (local_cols.is_buffer
                    * AB::F::from_canonical_usize(HINT_BUFFER as usize + self.offset));
    
            self.execution_bridge
                .execute_and_increment_pc(
                    expected_opcode,
                    [
                        local_cols.is_buffer * (local_cols.num_words_ptr),
                        local_cols.mem_ptr_ptr.into(),
                        AB::Expr::ZERO,
                        AB::Expr::from_canonical_u32(RV32_REGISTER_AS),
                        AB::Expr::from_canonical_u32(RV32_MEMORY_AS),
                    ],
                    local_cols.from_state,
                    rem_words.clone() * AB::F::from_canonical_usize(timestamp_delta),
                )
                .eval(builder, is_start.clone());
    
            // Preventing mem_ptr and rem_words overflow
            // Constraining mem_ptr_limbs[RV32_REGISTER_NUM_LIMBS - 1] < 2^(pointer_max_bits -
            // (RV32_REGISTER_NUM_LIMBS - 1)*RV32_CELL_BITS) which implies mem_ptr <=
            // 2^pointer_max_bits Similarly for rem_words <= 2^pointer_max_bits
            self.bitwise_operation_lookup_bus
                .send_range(
                    local_cols.mem_ptr_limbs[RV32_REGISTER_NUM_LIMBS - 1]
                        * AB::F::from_canonical_usize(
                            1 << (RV32_REGISTER_NUM_LIMBS * RV32_CELL_BITS - self.pointer_max_bits),
                        ),
                    local_cols.rem_words_limbs[RV32_REGISTER_NUM_LIMBS - 1]
                        * AB::F::from_canonical_usize(
                            1 << (RV32_REGISTER_NUM_LIMBS * RV32_CELL_BITS - self.pointer_max_bits),
                        ),
                )
                .eval(builder, is_start.clone());
    
            // Checking that hint is bytes
            for i in 0..RV32_REGISTER_NUM_LIMBS / 2 {
                self.bitwise_operation_lookup_bus
                    .send_range(local_cols.data[2 * i], local_cols.data[(2 * i) + 1])
                    .eval(builder, is_valid.clone());
            }
    
            // buffer transition
            // `is_end` implies that the next row belongs to a new instruction,
            // which could be one of empty, hint_single, or hint_buffer
            // Constrains that when the current row is not empty and `is_end == 1`, then `rem_words` is
            // 1
            builder
                .when(is_valid)
                .when(is_end.clone())
                .assert_one(rem_words.clone());
    
            let mut when_buffer_transition = builder.when(not::<AB::Expr>(is_end.clone()));
            // Notes on `rem_words`: we constrain that `rem_words` doesn't overflow when we first read
            // it and that on each row it decreases by one (below). We also constrain that when
            // the current instruction ends then `rem_words` is 1. However, we don't constrain
            // that when `rem_words` is 1 then we have to end the current instruction.
            // The only way to exploit this if we to do some multiple of `p` number of additional
            // illegal `buffer` rows where `p` is the modulus of `F`. However, when doing `p`
            // additional `buffer` rows we will always increment `mem_ptr` to an illegal memory address
            // at some point, which prevents this exploit.
            when_buffer_transition.assert_one(rem_words.clone() - next_rem_words.clone());
            // Note: we only care about the `next_mem_ptr = compose(next_mem_ptr_limb)` and not the
            // individual limbs: the limbs do not need to be in the range, they can be anything
            // to make `next_mem_ptr` correct -- this is just a way to not have to have another
            // column for `mem_ptr`. The constraint we care about is `next.mem_ptr ==
            // local.mem_ptr + 4`. Finally, since we increment by `4` each time, any out of
            // bounds memory access will be rejected by the memory bus before we overflow the field.
            when_buffer_transition.assert_eq(
                next_mem_ptr.clone() - mem_ptr.clone(),
                AB::F::from_canonical_usize(RV32_REGISTER_NUM_LIMBS),
            );
            when_buffer_transition.assert_eq(
                timestamp + AB::F::from_canonical_usize(timestamp_delta),
                next_cols.from_state.timestamp,
            );
        }
    *)
    Definition eval (AB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self AB in
      match ε, τ, α with
      | [], [], [ self; builder ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir" ],
              self
            |) in
          let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
          M.read (|
            let~ main : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" :=
              M.call_closure (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                M.get_trait_method (| "p3_air::air::AirBuilder", AB, [], [], "main", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
              |) in
            let~ local :
                Ty.associated_in_trait
                  "p3_matrix::Matrix"
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                  "{{synthetic}}'2" :=
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_matrix::Matrix"
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                  "{{synthetic}}'2",
                M.get_trait_method (|
                  "p3_matrix::Matrix",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                  "row_slice",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
              |) in
            let~ local_cols :
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ] :=
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ],
                    M.get_trait_method (|
                      "core::borrow::Borrow",
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ],
                      "borrow",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.associated_in_trait
                                "p3_matrix::Matrix"
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                                (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                                "{{synthetic}}'2",
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, local |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |) in
            let~ next :
                Ty.associated_in_trait
                  "p3_matrix::Matrix"
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                  "{{synthetic}}'2" :=
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_matrix::Matrix"
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                  "{{synthetic}}'2",
                M.get_trait_method (|
                  "p3_matrix::Matrix",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                  "row_slice",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 1 ]
              |) in
            let~ next_cols :
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ] :=
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ],
                    M.get_trait_method (|
                      "core::borrow::Borrow",
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ],
                      "borrow",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.associated_in_trait
                                "p3_matrix::Matrix"
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                                (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                                "{{synthetic}}'2",
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, next |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |) in
            let~ timestamp : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" :=
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| local_cols |) |),
                    "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                    "from_state"
                  |),
                  "openvm_circuit::arch::execution::ExecutionState",
                  "timestamp"
                |)
              |) in
            let~ timestamp_delta : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
            let~ timestamp_pp :
                Ty.function [] (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr") :=
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.alloc (| Ty.tuple [], α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    let β := timestamp_delta in
                                    M.write (|
                                      β,
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                      |)
                                    |) in
                                  M.alloc (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Add",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                        "add",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| timestamp |);
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            [],
                                            [],
                                            "from_canonical_usize",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.sub,
                                              [
                                                M.read (| timestamp_delta |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end)) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  AB,
                  [],
                  [],
                  "assert_bool",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_single"
                    |)
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  AB,
                  [],
                  [],
                  "assert_bool",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_buffer"
                    |)
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  AB,
                  [],
                  [],
                  "assert_bool",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_buffer_start"
                    |)
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                  [],
                  [],
                  "assert_one",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.get_trait_method (|
                          "p3_air::air::AirBuilder",
                          AB,
                          [],
                          [],
                          "when",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                              "is_buffer_start"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_buffer"
                    |)
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  AB,
                  [],
                  [],
                  "assert_bool",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "is_single"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "is_buffer"
                        |)
                      |)
                    ]
                  |)
                ]
              |) in
            let~ is_valid : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
              M.call_closure (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                  "add",
                  [],
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_single"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_buffer"
                    |)
                  |)
                ]
              |) in
            let~ is_start : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
              M.call_closure (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                  "add",
                  [],
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_single"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_buffer_start"
                    |)
                  |)
                ]
              |) in
            let~ is_end : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
              M.call_closure (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                  "add",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_function (|
                      "openvm_circuit_primitives::utils::not",
                      [],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| next_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "is_buffer"
                        |)
                      |)
                    ]
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| next_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_buffer_start"
                    |)
                  |)
                ]
              |) in
            let~ rem_words : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
              M.read (|
                get_constant (|
                  "p3_field::field::FieldAlgebra::ZERO",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                |)
              |) in
            let~ next_rem_words :
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
              M.read (|
                get_constant (|
                  "p3_field::field::FieldAlgebra::ZERO",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                |)
              |) in
            let~ mem_ptr : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
              M.read (|
                get_constant (|
                  "p3_field::field::FieldAlgebra::ZERO",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                |)
              |) in
            let~ next_mem_ptr : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
              M.read (|
                get_constant (|
                  "p3_field::field::FieldAlgebra::ZERO",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                [],
                                [],
                                "rev",
                                [],
                                []
                              |),
                              [
                                Value.mkStructRecord
                                  "core::ops::range::Range"
                                  []
                                  [ Ty.path "usize" ]
                                  [
                                    ("start", Value.Integer IntegerKind.Usize 0);
                                    ("end_",
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                          Ty.path "usize"
                                        |)
                                      |))
                                  ]
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::rev::Rev")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  rem_words,
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "F"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| rem_words |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "F",
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F",
                                                              [],
                                                              [],
                                                              "from_canonical_u32",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u32",
                                                                BinOp.Wrap.shl,
                                                                [
                                                                  Value.Integer IntegerKind.U32 1;
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_instructions::riscv::RV32_CELL_BITS",
                                                                      Ty.path "usize"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| local_cols |) |),
                                                            "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                            "rem_words_limbs"
                                                          |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  next_rem_words,
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "F"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| next_rem_words |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "F",
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F",
                                                              [],
                                                              [],
                                                              "from_canonical_u32",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u32",
                                                                BinOp.Wrap.shl,
                                                                [
                                                                  Value.Integer IntegerKind.U32 1;
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_instructions::riscv::RV32_CELL_BITS",
                                                                      Ty.path "usize"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| next_cols |) |),
                                                            "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                            "rem_words_limbs"
                                                          |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  mem_ptr,
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "F"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| mem_ptr |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "F",
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F",
                                                              [],
                                                              [],
                                                              "from_canonical_u32",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u32",
                                                                BinOp.Wrap.shl,
                                                                [
                                                                  Value.Integer IntegerKind.U32 1;
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_instructions::riscv::RV32_CELL_BITS",
                                                                      Ty.path "usize"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| local_cols |) |),
                                                            "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                            "mem_ptr_limbs"
                                                          |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  next_mem_ptr,
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "F"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| next_mem_ptr |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "F",
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F",
                                                              [],
                                                              [],
                                                              "from_canonical_u32",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u32",
                                                                BinOp.Wrap.shl,
                                                                [
                                                                  Value.Integer IntegerKind.U32 1;
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_instructions::riscv::RV32_CELL_BITS",
                                                                      Ty.path "usize"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| next_cols |) |),
                                                            "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                            "mem_ptr_limbs"
                                                          |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  Ty.apply
                    (Ty.path "p3_air::air::FilteredAirBuilder")
                    []
                    [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                  [],
                  [],
                  "assert_zero",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      Ty.apply
                        (Ty.path "p3_air::air::FilteredAirBuilder")
                        []
                        [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_air::air::FilteredAirBuilder")
                          []
                          [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                        M.get_trait_method (|
                          "p3_air::air::AirBuilder",
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          [],
                          [],
                          "when",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.alloc (|
                              Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                              M.call_closure (|
                                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                M.get_trait_method (|
                                  "p3_air::air::AirBuilder",
                                  AB,
                                  [],
                                  [],
                                  "when_transition",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| builder |) |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_function (|
                              "openvm_circuit_primitives::utils::not",
                              [],
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| next_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "is_single"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| next_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "is_buffer"
                        |)
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                  [],
                  [],
                  "assert_one",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.get_trait_method (|
                          "p3_air::air::AirBuilder",
                          AB,
                          [],
                          [],
                          "when",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                              "is_single"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, is_end |) ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                  [],
                  [],
                  "assert_one",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.get_trait_method (|
                          "p3_air::air::AirBuilder",
                          AB,
                          [],
                          [],
                          "when_first_row",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |) ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_function (|
                          "openvm_circuit_primitives::utils::not",
                          [],
                          [
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                          ]
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                              "is_buffer"
                            |)
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "is_buffer_start"
                        |)
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                    ],
                  "eval",
                  [],
                  [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ],
                    M.get_associated_function (|
                      Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                      "read",
                      [ Value.Integer IntegerKind.Usize 4 ],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                          "memory_bridge"
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                          []
                          [
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            M.get_trait_method (|
                              "p3_field::field::FieldAlgebra",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              [],
                              [],
                              "from_canonical_u32",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::riscv::RV32_REGISTER_AS",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                              "mem_ptr_ptr"
                            |)
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "mem_ptr_limbs"
                        |)
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::function::FnMut",
                          Ty.function
                            []
                            (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"),
                          [],
                          [ Ty.tuple [] ],
                          "call_mut",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, timestamp_pp |); Value.Tuple [] ]
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                              "mem_ptr_aux_cols"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, is_start |) ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                    ],
                  "eval",
                  [],
                  [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ],
                    M.get_associated_function (|
                      Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                      "read",
                      [ Value.Integer IntegerKind.Usize 4 ],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                          "memory_bridge"
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                          []
                          [
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            M.get_trait_method (|
                              "p3_field::field::FieldAlgebra",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              [],
                              [],
                              "from_canonical_u32",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::riscv::RV32_REGISTER_AS",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                              "num_words_ptr"
                            |)
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "rem_words_limbs"
                        |)
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::function::FnMut",
                          Ty.function
                            []
                            (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"),
                          [],
                          [ Ty.tuple [] ],
                          "call_mut",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, timestamp_pp |); Value.Tuple [] ]
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                              "num_words_aux_cols"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                      "is_buffer_start"
                    |)
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                    ],
                  "eval",
                  [],
                  [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ],
                    M.get_associated_function (|
                      Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                      "write",
                      [ Value.Integer IntegerKind.Usize 4 ],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                          "memory_bridge"
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                          []
                          [
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            M.get_trait_method (|
                              "p3_field::field::FieldAlgebra",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              [],
                              [],
                              "from_canonical_u32",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::riscv::RV32_MEMORY_AS",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, mem_ptr |) ]
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "data"
                        |)
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::function::FnMut",
                          Ty.function
                            []
                            (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"),
                          [],
                          [ Ty.tuple [] ],
                          "call_mut",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, timestamp_pp |); Value.Tuple [] ]
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                              "write_aux"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                  |)
                ]
              |) in
            let~ expected_opcode :
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
              M.call_closure (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  "add",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                      "mul",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "is_single"
                        |)
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          [],
                          [],
                          "from_canonical_usize",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [
                              M.cast (Ty.path "usize") (Value.Integer IntegerKind.Usize 0);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                  "offset"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                      "mul",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "is_buffer"
                        |)
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          [],
                          [],
                          "from_canonical_usize",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [
                              M.cast (Ty.path "usize") (Value.Integer IntegerKind.Usize 1);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                  "offset"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                    []
                    [ AB ],
                  "eval",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                      []
                      [ AB ],
                    M.get_associated_function (|
                      Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                      "execute_and_increment_pc",
                      [],
                      [
                        AB;
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 5 ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                          "execution_bridge"
                        |)
                      |);
                      M.read (| expected_opcode |);
                      Value.Array
                        [
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "core::ops::arith::Mul",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                              [],
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              "mul",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local_cols |) |),
                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                  "is_buffer"
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local_cols |) |),
                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                  "num_words_ptr"
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "core::convert::Into",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                              [],
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                              "into",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local_cols |) |),
                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                  "mem_ptr_ptr"
                                |)
                              |)
                            ]
                          |);
                          M.read (|
                            get_constant (|
                              "p3_field::field::FieldAlgebra::ZERO",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            |)
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "p3_field::field::FieldAlgebra",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              [],
                              [],
                              "from_canonical_u32",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::riscv::RV32_REGISTER_AS",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "p3_field::field::FieldAlgebra",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              [],
                              [],
                              "from_canonical_u32",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::riscv::RV32_MEMORY_AS",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |)
                        ];
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "from_state"
                        |)
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, rem_words |) ]
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            M.get_trait_method (|
                              "p3_field::field::FieldAlgebra",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              [],
                              [],
                              "from_canonical_usize",
                              [],
                              []
                            |),
                            [ M.read (| timestamp_delta |) ]
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, is_start |) ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                    []
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  "eval",
                  [],
                  [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    M.get_associated_function (|
                      Ty.path
                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                      "send_range",
                      [],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                          "bitwise_operation_lookup_bus"
                        |)
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local_cols |) |),
                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                "mem_ptr_limbs"
                              |),
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [
                                  M.read (|
                                    get_constant (|
                                      "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                      Ty.path "usize"
                                    |)
                                  |);
                                  Value.Integer IntegerKind.Usize 1
                                ]
                              |)
                            |)
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            M.get_trait_method (|
                              "p3_field::field::FieldAlgebra",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              [],
                              [],
                              "from_canonical_usize",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.shl,
                                [
                                  Value.Integer IntegerKind.Usize 1;
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.mul,
                                        [
                                          M.read (|
                                            get_constant (|
                                              "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                              Ty.path "usize"
                                            |)
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "openvm_instructions::riscv::RV32_CELL_BITS",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                          "pointer_max_bits"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local_cols |) |),
                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                "rem_words_limbs"
                              |),
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [
                                  M.read (|
                                    get_constant (|
                                      "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                      Ty.path "usize"
                                    |)
                                  |);
                                  Value.Integer IntegerKind.Usize 1
                                ]
                              |)
                            |)
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            M.get_trait_method (|
                              "p3_field::field::FieldAlgebra",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              [],
                              [],
                              "from_canonical_usize",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.shl,
                                [
                                  Value.Integer IntegerKind.Usize 1;
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.mul,
                                        [
                                          M.read (|
                                            get_constant (|
                                              "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                              Ty.path "usize"
                                            |)
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "openvm_instructions::riscv::RV32_CELL_BITS",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                          "pointer_max_bits"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, is_start |) ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [
                                ("start", Value.Integer IntegerKind.Usize 0);
                                ("end_",
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.div,
                                    [
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                          Ty.path "usize"
                                        |)
                                      |);
                                      Value.Integer IntegerKind.Usize 2
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                    "eval",
                                                    [],
                                                    [
                                                      AB;
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                                                        "send_range",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr";
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var";
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var"
                                                        ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                                            "bitwise_operation_lookup_bus"
                                                          |)
                                                        |);
                                                        M.read (|
                                                          M.SubPointer.get_array_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| local_cols |) |),
                                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                              "data"
                                                            |),
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.mul,
                                                              [
                                                                Value.Integer IntegerKind.Usize 2;
                                                                M.read (| i |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (|
                                                          M.SubPointer.get_array_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| local_cols |) |),
                                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                              "data"
                                                            |),
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.add,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.mul,
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2;
                                                                    M.read (| i |)
                                                                  ]
                                                                |);
                                                                Value.Integer IntegerKind.Usize 1
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| builder |) |)
                                                    |);
                                                    M.call_closure (|
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        [],
                                                        [],
                                                        "clone",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  Ty.apply
                    (Ty.path "p3_air::air::FilteredAirBuilder")
                    []
                    [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                  [],
                  [],
                  "assert_one",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      Ty.apply
                        (Ty.path "p3_air::air::FilteredAirBuilder")
                        []
                        [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_air::air::FilteredAirBuilder")
                          []
                          [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                        M.get_trait_method (|
                          "p3_air::air::AirBuilder",
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          [],
                          [],
                          "when",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.alloc (|
                              Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                              M.call_closure (|
                                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                M.get_trait_method (|
                                  "p3_air::air::AirBuilder",
                                  AB,
                                  [],
                                  [],
                                  "when",
                                  [],
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| builder |) |)
                                  |);
                                  M.read (| is_valid |)
                                ]
                              |)
                            |)
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, is_end |) ]
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, rem_words |) ]
                  |)
                ]
              |) in
            let~ when_buffer_transition :
                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] :=
              M.call_closure (|
                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  AB,
                  [],
                  [],
                  "when",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_function (|
                      "openvm_circuit_primitives::utils::not",
                      [],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, is_end |) ]
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                  [],
                  [],
                  "assert_one",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, when_buffer_transition |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      "sub",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, rem_words |) ]
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, next_rem_words |) ]
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                  [],
                  [],
                  "assert_eq",
                  [],
                  [
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, when_buffer_transition |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      "sub",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, next_mem_ptr |) ]
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, mem_ptr |) ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                      [],
                      [],
                      "from_canonical_usize",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        get_constant (|
                          "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                          Ty.path "usize"
                        |)
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                  [],
                  [],
                  "assert_eq",
                  [],
                  [
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, when_buffer_transition |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.read (| timestamp |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          [],
                          [],
                          "from_canonical_usize",
                          [],
                          []
                        |),
                        [ M.read (| timestamp_delta |) ]
                      |)
                    ]
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| next_cols |) |),
                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                        "from_state"
                      |),
                      "openvm_circuit::arch::execution::ExecutionState",
                      "timestamp"
                    |)
                  |)
                ]
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (AB : Ty.t),
      M.IsTraitInstance
        "p3_air::air::Air"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ AB ]
        (Self AB)
        (* Instance *) [ ("eval", InstanceField.Method (eval AB)) ].
  End Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreAir.
  
  (* StructRecord
    {
      name := "Rv32HintStoreRecord";
      const_params := [];
      ty_params := [ "F" ];
      fields :=
        [
          ("from_state",
            Ty.apply
              (Ty.path "openvm_circuit::arch::execution::ExecutionState")
              []
              [ Ty.path "u32" ]);
          ("instruction",
            Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ]);
          ("mem_ptr_read", Ty.path "openvm_circuit::system::memory::controller::RecordId");
          ("mem_ptr", Ty.path "u32");
          ("num_words", Ty.path "u32");
          ("num_words_read",
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]);
          ("hints",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "array")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_hintstore_Rv32HintStoreRecord_hints_discriminant"
                          |))
                      ]
                      [ F ];
                    Ty.path "openvm_circuit::system::memory::controller::RecordId"
                  ];
                Ty.path "alloc::alloc::Global"
              ])
        ];
    } *)
  
  Module underscore.
    Module Impl_serde_ser_Serialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreRecord_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord") [] [ F ].
      
      (* Serialize *)
      Definition serialize (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                      []
                      [ F ]
                  ],
                self
              |) in
            let __serializer := M.alloc (| __S, __serializer |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct" :=
                    M.match_operator (|
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_struct",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "Rv32HintStoreRecord" |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.add,
                                                          [
                                                            M.cast
                                                              (Ty.path "usize")
                                                              (Value.Bool false);
                                                            Value.Integer IntegerKind.Usize 1
                                                          ]
                                                        |);
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                    []
                                    [ Ty.path "u32" ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "from_state" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                        "from_state"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "openvm_instructions::instruction::Instruction")
                                    []
                                    [ F ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "instruction" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                        "instruction"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "mem_ptr_read" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                        "mem_ptr_read"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "u32" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "mem_ptr" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                        "mem_ptr"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "u32" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "num_words" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                        "num_words"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "openvm_circuit::system::memory::controller::RecordId"
                                    ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "num_words_read" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                        "num_words_read"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [ F ];
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::RecordId"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "hints" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                        "hints"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
    End Impl_serde_ser_Serialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreRecord_F.
    Module Impl_serde_de_Deserialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreRecord_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord") [] [ F ].
      
      (* Deserialize *)
      Definition deserialize (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __D, __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                    []
                    [ F ];
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_struct",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::hintstore::_'1::deserialize::__Visitor")
                    []
                    [ F ]
                ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "Rv32HintStoreRecord" |);
                M.read (|
                  get_constant (|
                    "openvm_rv32im_circuit::hintstore::_'1::deserialize::FIELDS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.mkStructRecord
                  "openvm_rv32im_circuit::hintstore::_'1::deserialize::__Visitor"
                  []
                  [ F ]
                  [
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                            []
                            [ F ]
                        ]
                        []);
                    ("lifetime",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                        [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
    End Impl_serde_de_Deserialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreRecord_F.
  End underscore.
  
  
  (* StructRecord
    {
      name := "Rv32HintStoreChip";
      const_params := [];
      ty_params := [ "F" ];
      fields :=
        [
          ("air", Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir");
          ("records",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord") [] [ F ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("height", Ty.path "usize");
          ("offline_memory",
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.apply
                  (Ty.path "std::sync::mutex::Mutex")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ]
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("streams",
            Ty.apply
              (Ty.path "std::sync::once_lock::OnceLock")
              []
              [
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "std::sync::mutex::Mutex")
                      []
                      [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                    Ty.path "alloc::alloc::Global"
                  ]
              ]);
          ("bitwise_lookup_chip",
            Ty.apply
              (Ty.path
                "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
              [
                M.unevaluated_const
                  (mk_str (| "openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_discriminant" |))
              ]
              [])
        ];
    } *)
  
  Module Impl_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ].
    
    (*
        pub fn new(
            execution_bus: ExecutionBus,
            program_bus: ProgramBus,
            bitwise_lookup_chip: SharedBitwiseOperationLookupChip<RV32_CELL_BITS>,
            memory_bridge: MemoryBridge,
            offline_memory: Arc<Mutex<OfflineMemory<F>>>,
            pointer_max_bits: usize,
            offset: usize,
        ) -> Self {
            let air = Rv32HintStoreAir {
                execution_bridge: ExecutionBridge::new(execution_bus, program_bus),
                memory_bridge,
                bitwise_operation_lookup_bus: bitwise_lookup_chip.bus(),
                offset,
                pointer_max_bits,
            };
            Self {
                records: vec![],
                air,
                height: 0,
                offline_memory,
                streams: OnceLock::new(),
                bitwise_lookup_chip,
            }
        }
    *)
    Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [],
          [],
          [
            execution_bus;
            program_bus;
            bitwise_lookup_chip;
            memory_bridge;
            offline_memory;
            pointer_max_bits;
            offset
          ] =>
        ltac:(M.monadic
          (let execution_bus :=
            M.alloc (| Ty.path "openvm_circuit::arch::execution::ExecutionBus", execution_bus |) in
          let program_bus :=
            M.alloc (| Ty.path "openvm_circuit::system::program::bus::ProgramBus", program_bus |) in
          let bitwise_lookup_chip :=
            M.alloc (|
              Ty.apply
                (Ty.path
                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                [
                  M.unevaluated_const
                    (mk_str (| "openvm_rv32im_circuit_hintstore_new_discriminant" |))
                ]
                [],
              bitwise_lookup_chip
            |) in
          let memory_bridge :=
            M.alloc (|
              Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
              memory_bridge
            |) in
          let offline_memory :=
            M.alloc (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.apply
                    (Ty.path "std::sync::mutex::Mutex")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                        []
                        [ F ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              offline_memory
            |) in
          let pointer_max_bits := M.alloc (| Ty.path "usize", pointer_max_bits |) in
          let offset := M.alloc (| Ty.path "usize", offset |) in
          M.read (|
            let~ air : Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir" :=
              Value.mkStructRecord
                "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir"
                []
                []
                [
                  ("execution_bridge",
                    M.call_closure (|
                      Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| execution_bus |); M.read (| program_bus |) ]
                    |));
                  ("memory_bridge", M.read (| memory_bridge |));
                  ("bitwise_operation_lookup_bus",
                    M.call_closure (|
                      Ty.path
                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [],
                        "bus",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, bitwise_lookup_chip |) ]
                    |));
                  ("offset", M.read (| offset |));
                  ("pointer_max_bits", M.read (| pointer_max_bits |))
                ] in
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ],
              Value.mkStructRecord
                "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip"
                []
                [ F ]
                [
                  ("records",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        [],
                        []
                      |),
                      []
                    |));
                  ("air", M.read (| air |));
                  ("height", Value.Integer IntegerKind.Usize 0);
                  ("offline_memory", M.read (| offline_memory |));
                  ("streams",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "std::sync::once_lock::OnceLock")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                []
                                [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::sync::once_lock::OnceLock")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::Mutex")
                                  []
                                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        "new",
                        [],
                        []
                      |),
                      []
                    |));
                  ("bitwise_lookup_chip", M.read (| bitwise_lookup_chip |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "new" (new F).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn set_streams(&mut self, streams: Arc<Mutex<Streams<F>>>) {
            self.streams.set(streams).unwrap();
        }
    *)
    Definition set_streams (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; streams ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ]
                ],
              self
            |) in
          let streams :=
            M.alloc (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.apply
                    (Ty.path "std::sync::mutex::Mutex")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                  Ty.path "alloc::alloc::Global"
                ],
              streams
            |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple [];
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            []
                            [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                  "unwrap",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.tuple [];
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::Mutex")
                              []
                              [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "std::sync::once_lock::OnceLock")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                []
                                [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      "set",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                          "streams"
                        |)
                      |);
                      M.read (| streams |)
                    ]
                  |)
                ]
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_set_streams :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "set_streams" (set_streams F).
    Admitted.
    Global Typeclasses Opaque set_streams.
    (*
        fn record_to_rows(
            record: Rv32HintStoreRecord<F>,
            aux_cols_factory: &MemoryAuxColsFactory<F>,
            slice: &mut [F],
            memory: &OfflineMemory<F>,
            bitwise_lookup_chip: &SharedBitwiseOperationLookupChip<RV32_CELL_BITS>,
            pointer_max_bits: usize,
        ) -> usize {
            let width = Rv32HintStoreCols::<F>::width();
            let cols: &mut Rv32HintStoreCols<F> = slice[..width].borrow_mut();
    
            cols.is_single = F::from_bool(record.num_words_read.is_none());
            cols.is_buffer = F::from_bool(record.num_words_read.is_some());
            cols.is_buffer_start = cols.is_buffer;
    
            cols.from_state = record.from_state.map(F::from_canonical_u32);
            cols.mem_ptr_ptr = record.instruction.b;
            aux_cols_factory.generate_read_aux(
                memory.record_by_id(record.mem_ptr_read),
                &mut cols.mem_ptr_aux_cols,
            );
    
            cols.num_words_ptr = record.instruction.a;
            if let Some(num_words_read) = record.num_words_read {
                aux_cols_factory.generate_read_aux(
                    memory.record_by_id(num_words_read),
                    &mut cols.num_words_aux_cols,
                );
            }
    
            let mut mem_ptr = record.mem_ptr;
            let mut rem_words = record.num_words;
            let mut used_u32s = 0;
    
            let mem_ptr_msl = mem_ptr >> ((RV32_REGISTER_NUM_LIMBS - 1) * RV32_CELL_BITS);
            let rem_words_msl = rem_words >> ((RV32_REGISTER_NUM_LIMBS - 1) * RV32_CELL_BITS);
            bitwise_lookup_chip.request_range(
                mem_ptr_msl << (RV32_REGISTER_NUM_LIMBS * RV32_CELL_BITS - pointer_max_bits),
                rem_words_msl << (RV32_REGISTER_NUM_LIMBS * RV32_CELL_BITS - pointer_max_bits),
            );
            for (i, &(data, write)) in record.hints.iter().enumerate() {
                for half in 0..(RV32_REGISTER_NUM_LIMBS / 2) {
                    bitwise_lookup_chip.request_range(
                        data[2 * half].as_canonical_u32(),
                        data[2 * half + 1].as_canonical_u32(),
                    );
                }
    
                let cols: &mut Rv32HintStoreCols<F> = slice[used_u32s..used_u32s + width].borrow_mut();
                cols.from_state.timestamp =
                    F::from_canonical_u32(record.from_state.timestamp + (3 * i as u32));
                cols.data = data;
                aux_cols_factory.generate_write_aux(memory.record_by_id(write), &mut cols.write_aux);
                cols.rem_words_limbs = decompose(rem_words);
                cols.mem_ptr_limbs = decompose(mem_ptr);
                if i != 0 {
                    cols.is_buffer = F::ONE;
                }
                used_u32s += width;
                mem_ptr += RV32_REGISTER_NUM_LIMBS as u32;
                rem_words -= 1;
            }
    
            used_u32s
        }
    *)
    Definition record_to_rows
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [],
          [],
          [ record; aux_cols_factory; slice; memory; bitwise_lookup_chip; pointer_max_bits ] =>
        ltac:(M.monadic
          (let record :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord") [] [ F ],
              record
            |) in
          let aux_cols_factory :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ]
                ],
              aux_cols_factory
            |) in
          let slice :=
            M.alloc (|
              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
              slice
            |) in
          let memory :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                    []
                    [ F ]
                ],
              memory
            |) in
          let bitwise_lookup_chip :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                    [
                      M.unevaluated_const
                        (mk_str (| "openvm_rv32im_circuit_hintstore_record_to_rows_discriminant" |))
                    ]
                    []
                ],
              bitwise_lookup_chip
            |) in
          let pointer_max_bits := M.alloc (| Ty.path "usize", pointer_max_bits |) in
          M.read (|
            let~ width : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols") [] [ F ],
                  "width",
                  [],
                  []
                |),
                []
              |) in
            let~ cols :
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                      []
                      [ F ]
                  ] :=
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                          []
                          [ F ]
                      ],
                    M.get_trait_method (|
                      "core::borrow::BorrowMut",
                      Ty.apply (Ty.path "slice") [] [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                          []
                          [ F ]
                      ],
                      "borrow_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply (Ty.path "slice") [] [ F ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| slice |) |) |);
                              Value.mkStructRecord
                                "core::ops::range::RangeTo"
                                []
                                [ Ty.path "usize" ]
                                [ ("end_", M.read (| width |)) ]
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| cols |) |),
                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                  "is_single"
                |),
                M.call_closure (|
                  F,
                  M.get_trait_method (|
                    "p3_field::field::FieldAlgebra",
                    F,
                    [],
                    [],
                    "from_bool",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                        "is_none",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            record,
                            "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                            "num_words_read"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| cols |) |),
                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                  "is_buffer"
                |),
                M.call_closure (|
                  F,
                  M.get_trait_method (|
                    "p3_field::field::FieldAlgebra",
                    F,
                    [],
                    [],
                    "from_bool",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                        "is_some",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            record,
                            "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                            "num_words_read"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| cols |) |),
                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                  "is_buffer_start"
                |),
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                    "is_buffer"
                  |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| cols |) |),
                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                  "from_state"
                |),
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                      []
                      [ Ty.path "u32" ],
                    "map",
                    [],
                    [ F; Ty.function [ Ty.path "u32" ] F ]
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        record,
                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                        "from_state"
                      |)
                    |);
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_canonical_u32",
                      [],
                      []
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| cols |) |),
                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                  "mem_ptr_ptr"
                |),
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                      "instruction"
                    |),
                    "openvm_instructions::instruction::Instruction",
                    "b"
                  |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ],
                  "generate_read_aux",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| aux_cols_factory |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                              []
                              [ F ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                            []
                            [ F ],
                          "record_by_id",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                              "mem_ptr_read"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| cols |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                          "mem_ptr_aux_cols"
                        |)
                      |)
                    |)
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| cols |) |),
                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                  "num_words_ptr"
                |),
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                      "instruction"
                    |),
                    "openvm_instructions::instruction::Instruction",
                    "a"
                  |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.SubPointer.get_struct_record_field (|
                          record,
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                          "num_words_read"
                        |) in
                      let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let num_words_read :=
                        M.copy (|
                          Ty.path "openvm_circuit::system::memory::controller::RecordId",
                          γ0_0
                        |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                                []
                                [ F ],
                              "generate_read_aux",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.read (| aux_cols_factory |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::MemoryRecord")
                                          []
                                          [ F ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline::OfflineMemory")
                                        []
                                        [ F ],
                                      "record_by_id",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| memory |) |)
                                      |);
                                      M.read (| num_words_read |)
                                    ]
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                      "num_words_aux_cols"
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)));
                  fun γ => ltac:(M.monadic (Value.Tuple []))
                ]
              |) in
            let~ mem_ptr : Ty.path "u32" :=
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  record,
                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                  "mem_ptr"
                |)
              |) in
            let~ rem_words : Ty.path "u32" :=
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  record,
                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                  "num_words"
                |)
              |) in
            let~ used_u32s : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
            let~ mem_ptr_msl : Ty.path "u32" :=
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.shr,
                [
                  M.read (| mem_ptr |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.read (|
                            get_constant (|
                              "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                              Ty.path "usize"
                            |)
                          |);
                          Value.Integer IntegerKind.Usize 1
                        ]
                      |);
                      M.read (|
                        get_constant (|
                          "openvm_instructions::riscv::RV32_CELL_BITS",
                          Ty.path "usize"
                        |)
                      |)
                    ]
                  |)
                ]
              |) in
            let~ rem_words_msl : Ty.path "u32" :=
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.shr,
                [
                  M.read (| rem_words |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.read (|
                            get_constant (|
                              "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                              Ty.path "usize"
                            |)
                          |);
                          Value.Integer IntegerKind.Usize 1
                        ]
                      |);
                      M.read (|
                        get_constant (|
                          "openvm_instructions::riscv::RV32_CELL_BITS",
                          Ty.path "usize"
                        |)
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                    [ Value.Integer IntegerKind.Usize 8 ]
                    [],
                  "request_range",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bitwise_lookup_chip |) |) |);
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shl,
                    [
                      M.read (| mem_ptr_msl |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.mul,
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                  Ty.path "usize"
                                |)
                              |);
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::riscv::RV32_CELL_BITS",
                                  Ty.path "usize"
                                |)
                              |)
                            ]
                          |);
                          M.read (| pointer_max_bits |)
                        ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shl,
                    [
                      M.read (| rem_words_msl |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.mul,
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                  Ty.path "usize"
                                |)
                              |);
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::riscv::RV32_CELL_BITS",
                                  Ty.path "usize"
                                |)
                              |)
                            ]
                          |);
                          M.read (| pointer_max_bits |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [ F ];
                                    Ty.path "openvm_circuit::system::memory::controller::RecordId"
                                  ]
                              ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ F ];
                                      Ty.path "openvm_circuit::system::memory::controller::RecordId"
                                    ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ F ];
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId"
                                      ]
                                  ]
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [ F ];
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::RecordId"
                                        ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ F ];
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId"
                                      ]
                                  ],
                                [],
                                [],
                                "enumerate",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [ F ];
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::RecordId"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ F ];
                                            Ty.path
                                              "openvm_circuit::system::memory::controller::RecordId"
                                          ]
                                      ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 4 ]
                                                        [ F ];
                                                      Ty.path
                                                        "openvm_circuit::system::memory::controller::RecordId"
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [ F ];
                                                    Ty.path
                                                      "openvm_circuit::system::memory::controller::RecordId"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                record,
                                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                                "hints"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ F ];
                                            Ty.path
                                              "openvm_circuit::system::memory::controller::RecordId"
                                          ]
                                      ]
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 4 ]
                                                          [ F ];
                                                        Ty.path
                                                          "openvm_circuit::system::memory::controller::RecordId"
                                                      ]
                                                  ]
                                              ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 4 ]
                                                            [ F ];
                                                          Ty.path
                                                            "openvm_circuit::system::memory::controller::RecordId"
                                                        ]
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 4 ]
                                                          [ F ];
                                                        Ty.path
                                                          "openvm_circuit::system::memory::controller::RecordId"
                                                      ]
                                                  ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                            let γ1_1 := M.deref (| M.read (| γ1_1 |) |) in
                                            let γ3_0 :=
                                              M.SubPointer.get_tuple_field (| γ1_1, 0 |) in
                                            let γ3_1 :=
                                              M.SubPointer.get_tuple_field (| γ1_1, 1 |) in
                                            let data :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ F ],
                                                γ3_0
                                              |) in
                                            let write :=
                                              M.copy (|
                                                Ty.path
                                                  "openvm_circuit::system::memory::controller::RecordId",
                                                γ3_1
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              Value.mkStructRecord
                                                                "core::ops::range::Range"
                                                                []
                                                                [ Ty.path "usize" ]
                                                                [
                                                                  ("start",
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      0);
                                                                  ("end_",
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.div,
                                                                      [
                                                                        M.read (|
                                                                          get_constant (|
                                                                            "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                                                            Ty.path "usize"
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                    |))
                                                                ]
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                M.loop (|
                                                                  Ty.tuple [],
                                                                  ltac:(M.monadic
                                                                    (let~ _ : Ty.tuple [] :=
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [ Ty.path "usize" ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::Range")
                                                                                []
                                                                                [ Ty.path "usize" ],
                                                                              [],
                                                                              [],
                                                                              "next",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    iter
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.is_struct_tuple (|
                                                                                  γ,
                                                                                  "core::option::Option::None"
                                                                                |) in
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let half :=
                                                                                M.copy (|
                                                                                  Ty.path "usize",
                                                                                  γ0_0
                                                                                |) in
                                                                              M.read (|
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  M.call_closure (|
                                                                                    Ty.tuple [],
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            8
                                                                                        ]
                                                                                        [],
                                                                                      "request_range",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            bitwise_lookup_chip
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "u32",
                                                                                        M.get_trait_method (|
                                                                                          "p3_field::field::PrimeField32",
                                                                                          F,
                                                                                          [],
                                                                                          [],
                                                                                          "as_canonical_u32",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.SubPointer.get_array_field (|
                                                                                              data,
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "usize",
                                                                                                BinOp.Wrap.mul,
                                                                                                [
                                                                                                  Value.Integer
                                                                                                    IntegerKind.Usize
                                                                                                    2;
                                                                                                  M.read (|
                                                                                                    half
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "u32",
                                                                                        M.get_trait_method (|
                                                                                          "p3_field::field::PrimeField32",
                                                                                          F,
                                                                                          [],
                                                                                          [],
                                                                                          "as_canonical_u32",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.SubPointer.get_array_field (|
                                                                                              data,
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "usize",
                                                                                                BinOp.Wrap.add,
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "usize",
                                                                                                    BinOp.Wrap.mul,
                                                                                                    [
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        2;
                                                                                                      M.read (|
                                                                                                        half
                                                                                                      |)
                                                                                                    ]
                                                                                                  |);
                                                                                                  Value.Integer
                                                                                                    IntegerKind.Usize
                                                                                                    1
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)))
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |))
                                                |) in
                                              let~ cols :
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                                        []
                                                        [ F ]
                                                    ] :=
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                                            []
                                                            [ F ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::borrow::BorrowMut",
                                                        Ty.apply (Ty.path "slice") [] [ F ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols")
                                                            []
                                                            [ F ]
                                                        ],
                                                        "borrow_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ F ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::index::IndexMut",
                                                                Ty.apply (Ty.path "slice") [] [ F ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                                "index_mut",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| slice |) |)
                                                                |);
                                                                Value.mkStructRecord
                                                                  "core::ops::range::Range"
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                                  [
                                                                    ("start",
                                                                      M.read (| used_u32s |));
                                                                    ("end_",
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.add,
                                                                        [
                                                                          M.read (| used_u32s |);
                                                                          M.read (| width |)
                                                                        ]
                                                                      |))
                                                                  ]
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| cols |) |),
                                                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                      "from_state"
                                                    |),
                                                    "openvm_circuit::arch::execution::ExecutionState",
                                                    "timestamp"
                                                  |),
                                                  M.call_closure (|
                                                    F,
                                                    M.get_trait_method (|
                                                      "p3_field::field::FieldAlgebra",
                                                      F,
                                                      [],
                                                      [],
                                                      "from_canonical_u32",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                record,
                                                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                                                "from_state"
                                                              |),
                                                              "openvm_circuit::arch::execution::ExecutionState",
                                                              "timestamp"
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            BinOp.Wrap.mul,
                                                            [
                                                              Value.Integer IntegerKind.U32 3;
                                                              M.cast
                                                                (Ty.path "u32")
                                                                (M.read (| i |))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| cols |) |),
                                                    "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                    "data"
                                                  |),
                                                  M.read (| data |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                                                      []
                                                      [ F ],
                                                    "generate_write_aux",
                                                    [ Value.Integer IntegerKind.Usize 4 ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| aux_cols_factory |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::offline::MemoryRecord")
                                                                []
                                                                [ F ]
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                                              []
                                                              [ F ],
                                                            "record_by_id",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| memory |) |)
                                                            |);
                                                            M.read (| write |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| cols |) |),
                                                            "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                            "write_aux"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| cols |) |),
                                                    "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                    "rem_words_limbs"
                                                  |),
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [ F ],
                                                    M.get_function (|
                                                      "openvm_rv32im_circuit::adapters::decompose",
                                                      [],
                                                      [ F ]
                                                    |),
                                                    [ M.read (| rem_words |) ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| cols |) |),
                                                    "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                    "mem_ptr_limbs"
                                                  |),
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [ F ],
                                                    M.get_function (|
                                                      "openvm_rv32im_circuit::adapters::decompose",
                                                      [],
                                                      [ F ]
                                                    |),
                                                    [ M.read (| mem_ptr |) ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.ne,
                                                                [
                                                                  M.read (| i |);
                                                                  Value.Integer IntegerKind.Usize 0
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| cols |) |),
                                                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols",
                                                                "is_buffer"
                                                              |),
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ONE",
                                                                  F
                                                                |)
                                                              |)
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                let β := used_u32s in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [ M.read (| β |); M.read (| width |) ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                let β := mem_ptr in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| β |);
                                                      M.cast
                                                        (Ty.path "u32")
                                                        (M.read (|
                                                          get_constant (|
                                                            "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                                            Ty.path "usize"
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                let β := rem_words in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.read (| β |);
                                                      Value.Integer IntegerKind.U32 1
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            used_u32s
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_record_to_rows :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "record_to_rows" (record_to_rows F).
    Admitted.
    Global Typeclasses Opaque record_to_rows.
    
    (*
        fn generate_trace(self) -> RowMajorMatrix<F> {
            let width = self.trace_width();
            let height = next_power_of_two_or_zero(self.height);
            let mut flat_trace = F::zero_vec(width * height);
    
            let memory = self.offline_memory.lock().unwrap();
    
            let aux_cols_factory = memory.aux_cols_factory();
    
            let mut used_u32s = 0;
            for record in self.records {
                used_u32s += Self::record_to_rows(
                    record,
                    &aux_cols_factory,
                    &mut flat_trace[used_u32s..],
                    &memory,
                    &self.bitwise_lookup_chip,
                    self.air.pointer_max_bits,
                );
            }
            // padding rows can just be all zeros
            RowMajorMatrix::new(flat_trace, width)
        }
    *)
    Definition generate_trace
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ],
              self
            |) in
          M.read (|
            let~ width : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "openvm_stark_backend::chip::ChipUsageGetter",
                  Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ],
                  [],
                  [],
                  "trace_width",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, self |) ]
              |) in
            let~ height : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_function (|
                  "openvm_circuit_primitives::utils::next_power_of_two_or_zero",
                  [],
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                      "height"
                    |)
                  |)
                ]
              |) in
            let~ flat_trace :
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] :=
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "p3_field::field::FieldAlgebra",
                  F,
                  [],
                  [],
                  "zero_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [ M.read (| width |); M.read (| height |) ]
                  |)
                ]
              |) in
            let~ memory :
                Ty.apply
                  (Ty.path "std::sync::mutex::MutexGuard")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ]
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "std::sync::mutex::MutexGuard")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "std::sync::mutex::MutexGuard")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                            []
                            [ F ]
                        ];
                      Ty.apply
                        (Ty.path "std::sync::poison::PoisonError")
                        []
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::MutexGuard")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                []
                                [ F ]
                            ]
                        ]
                    ],
                  "unwrap",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [ F ]
                          ];
                        Ty.apply
                          (Ty.path "std::sync::poison::PoisonError")
                          []
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                  []
                                  [ F ]
                              ]
                          ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "std::sync::mutex::Mutex")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                            []
                            [ F ]
                        ],
                      "lock",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::Mutex")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline::OfflineMemory")
                                        []
                                        [ F ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                  "offline_memory"
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |) in
            let~ aux_cols_factory :
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                  []
                  [ F ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                  []
                  [ F ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                    []
                    [ F ],
                  "aux_cols_factory",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [ F ]
                          ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "std::sync::mutex::MutexGuard")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                []
                                [ F ]
                            ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, memory |) ]
                      |)
                    |)
                  |)
                ]
              |) in
            let~ used_u32s : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                "records"
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                                              []
                                              [ F ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                                                []
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let record :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                                                  []
                                                  [ F ],
                                                γ0_0
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                let β := used_u32s in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| β |);
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                                                            []
                                                            [ F ],
                                                          "record_to_rows",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| record |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                aux_cols_factory
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::IndexMut",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::RangeFrom")
                                                                          []
                                                                          [ Ty.path "usize" ]
                                                                      ],
                                                                      "index_mut",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        flat_trace
                                                                      |);
                                                                      Value.mkStructRecord
                                                                        "core::ops::range::RangeFrom"
                                                                        []
                                                                        [ Ty.path "usize" ]
                                                                        [
                                                                          ("start",
                                                                            M.read (| used_u32s |))
                                                                        ]
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "std::sync::mutex::MutexGuard")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::system::memory::offline::OfflineMemory")
                                                                        []
                                                                        [ F ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        memory
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  self,
                                                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                                                  "bitwise_lookup_chip"
                                                                |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                self,
                                                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                                                "air"
                                                              |),
                                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                                              "pointer_max_bits"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            M.alloc (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                ],
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| flat_trace |); M.read (| width |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_generate_trace :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "generate_trace" (generate_trace F).
    Admitted.
    Global Typeclasses Opaque generate_trace.
  End Impl_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_F.
  
  Module Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ].
    
    (*
        fn execute(
            &mut self,
            memory: &mut MemoryController<F>,
            instruction: &Instruction<F>,
            from_state: ExecutionState<u32>,
        ) -> Result<ExecutionState<u32>, ExecutionError> {
            let &Instruction {
                opcode,
                a: num_words_ptr,
                b: mem_ptr_ptr,
                d,
                e,
                ..
            } = instruction;
            debug_assert_eq!(d.as_canonical_u32(), RV32_REGISTER_AS);
            debug_assert_eq!(e.as_canonical_u32(), RV32_MEMORY_AS);
            let local_opcode =
                Rv32HintStoreOpcode::from_usize(opcode.local_opcode_idx(self.air.offset));
    
            let (mem_ptr_read, mem_ptr_limbs) = memory.read::<RV32_REGISTER_NUM_LIMBS>(d, mem_ptr_ptr);
            let (num_words, num_words_read) = if local_opcode == HINT_STOREW {
                memory.increment_timestamp();
                (1, None)
            } else {
                let (num_words_read, num_words_limbs) =
                    memory.read::<RV32_REGISTER_NUM_LIMBS>(d, num_words_ptr);
                (compose(num_words_limbs), Some(num_words_read))
            };
            debug_assert_ne!(num_words, 0);
            debug_assert!(num_words <= (1 << self.air.pointer_max_bits));
    
            let mem_ptr = compose(mem_ptr_limbs);
    
            debug_assert!(mem_ptr <= (1 << self.air.pointer_max_bits));
    
            let mut streams = self.streams.get().unwrap().lock().unwrap();
            if streams.hint_stream.len() < RV32_REGISTER_NUM_LIMBS * num_words as usize {
                return Err(ExecutionError::HintOutOfBounds { pc: from_state.pc });
            }
    
            let mut record = Rv32HintStoreRecord {
                from_state,
                instruction: instruction.clone(),
                mem_ptr_read,
                mem_ptr,
                num_words,
                num_words_read,
                hints: vec![],
            };
    
            for word_index in 0..num_words {
                if word_index != 0 {
                    memory.increment_timestamp();
                    memory.increment_timestamp();
                }
    
                let data: [F; RV32_REGISTER_NUM_LIMBS] =
                    std::array::from_fn(|_| streams.hint_stream.pop_front().unwrap());
                let (write, _) = memory.write(
                    e,
                    F::from_canonical_u32(mem_ptr + (RV32_REGISTER_NUM_LIMBS as u32 * word_index)),
                    data,
                );
                record.hints.push((data, write));
            }
    
            self.height += record.hints.len();
            self.records.push(record);
    
            let next_state = ExecutionState {
                pc: from_state.pc + DEFAULT_PC_STEP,
                timestamp: memory.timestamp(),
            };
            Ok(next_state)
        }
    *)
    Definition execute (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; memory; instruction; from_state ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ]
                ],
              self
            |) in
          let memory :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ]
                ],
              memory
            |) in
          let instruction :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
              instruction
            |) in
          let from_state :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                []
                [ Ty.path "u32" ],
              from_state
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ];
                Ty.path "openvm_circuit::arch::execution::ExecutionError"
              ]) (|
            ltac:(M.monadic
              (M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                      []
                      [ Ty.path "u32" ];
                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                  ],
                instruction,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_instructions::instruction::Instruction",
                          "opcode"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_instructions::instruction::Instruction",
                          "a"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_instructions::instruction::Instruction",
                          "b"
                        |) in
                      let γ1_3 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_instructions::instruction::Instruction",
                          "d"
                        |) in
                      let γ1_4 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_instructions::instruction::Instruction",
                          "e"
                        |) in
                      let opcode := M.copy (| Ty.path "openvm_instructions::VmOpcode", γ1_0 |) in
                      let num_words_ptr := M.copy (| F, γ1_1 |) in
                      let mem_ptr_ptr := M.copy (| F, γ1_2 |) in
                      let d := M.copy (| F, γ1_3 |) in
                      let e := M.copy (| F, γ1_4 |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ];
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                                            ],
                                          Value.Tuple
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path "u32",
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    M.get_trait_method (|
                                                      "p3_field::field::PrimeField32",
                                                      F,
                                                      [],
                                                      [],
                                                      "as_canonical_u32",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, d |) ]
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                get_constant (|
                                                  "openvm_instructions::riscv::RV32_REGISTER_AS",
                                                  Ty.path "u32"
                                                |)
                                              |)
                                            ]
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let left_val :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                  γ0_0
                                                |) in
                                              let right_val :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                  γ0_1
                                                |) in
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.eq,
                                                                [
                                                                  M.read (|
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |);
                                                                  M.read (|
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.path
                                                                "core::panicking::AssertKind" :=
                                                            Value.StructTuple
                                                              "core::panicking::AssertKind::Eq"
                                                              []
                                                              []
                                                              [] in
                                                          M.alloc (|
                                                            Ty.path "never",
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [ Ty.path "u32"; Ty.path "u32" ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                                  [ Ty.path "core::fmt::Arguments" ]
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ];
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                                            ],
                                          Value.Tuple
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path "u32",
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    M.get_trait_method (|
                                                      "p3_field::field::PrimeField32",
                                                      F,
                                                      [],
                                                      [],
                                                      "as_canonical_u32",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, e |) ]
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                get_constant (|
                                                  "openvm_instructions::riscv::RV32_MEMORY_AS",
                                                  Ty.path "u32"
                                                |)
                                              |)
                                            ]
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let left_val :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                  γ0_0
                                                |) in
                                              let right_val :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                  γ0_1
                                                |) in
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.eq,
                                                                [
                                                                  M.read (|
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |);
                                                                  M.read (|
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.path
                                                                "core::panicking::AssertKind" :=
                                                            Value.StructTuple
                                                              "core::panicking::AssertKind::Eq"
                                                              []
                                                              []
                                                              [] in
                                                          M.alloc (|
                                                            Ty.path "never",
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [ Ty.path "u32"; Ty.path "u32" ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                                  [ Ty.path "core::fmt::Arguments" ]
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |) in
                        let~ local_opcode :
                            Ty.path "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode" :=
                          M.call_closure (|
                            Ty.path "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                            M.get_trait_method (|
                              "openvm_instructions::LocalOpcode",
                              Ty.path "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                              [],
                              [],
                              "from_usize",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.path "openvm_instructions::VmOpcode",
                                  "local_opcode_idx",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, opcode |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                        "air"
                                      |),
                                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                      "offset"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |) in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                []
                                [ Ty.path "u32" ];
                              Ty.path "openvm_circuit::arch::execution::ExecutionError"
                            ],
                          M.match_operator (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ],
                            M.alloc (|
                              Ty.tuple
                                [
                                  Ty.path "openvm_circuit::system::memory::controller::RecordId";
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [ F ]
                                ],
                              M.call_closure (|
                                Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::system::memory::controller::RecordId";
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [ F ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::controller::MemoryController")
                                    []
                                    [ F ],
                                  "read",
                                  [ Value.Integer IntegerKind.Usize 4 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| memory |) |)
                                  |);
                                  M.read (| d |);
                                  M.read (| mem_ptr_ptr |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let mem_ptr_read :=
                                    M.copy (|
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::RecordId",
                                      γ0_0
                                    |) in
                                  let mem_ptr_limbs :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ F ],
                                      γ0_1
                                    |) in
                                  M.match_operator (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::execution::ExecutionState")
                                          []
                                          [ Ty.path "u32" ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    M.alloc (|
                                      Ty.tuple
                                        [
                                          Ty.path "u32";
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.path
                                                "openvm_circuit::system::memory::controller::RecordId"
                                            ]
                                        ],
                                      M.match_operator (|
                                        Ty.tuple
                                          [
                                            Ty.path "u32";
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_circuit::system::memory::controller::RecordId"
                                              ]
                                          ],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialEq",
                                                        Ty.path
                                                          "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode"
                                                        ],
                                                        "eq",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          local_opcode
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path
                                                              "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                                            Value.StructTuple
                                                              "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode::HINT_STOREW"
                                                              []
                                                              []
                                                              []
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::controller::MemoryController")
                                                        []
                                                        [ F ],
                                                      "increment_timestamp",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| memory |) |)
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.path "u32";
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.path
                                                            "openvm_circuit::system::memory::controller::RecordId"
                                                        ]
                                                    ],
                                                  Value.Tuple
                                                    [
                                                      Value.Integer IntegerKind.U32 1;
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [
                                                          Ty.path
                                                            "openvm_circuit::system::memory::controller::RecordId"
                                                        ]
                                                        []
                                                    ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.tuple
                                                  [
                                                    Ty.path "u32";
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.path
                                                          "openvm_circuit::system::memory::controller::RecordId"
                                                      ]
                                                  ],
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.path
                                                        "openvm_circuit::system::memory::controller::RecordId";
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 4 ]
                                                        [ F ]
                                                    ],
                                                  M.call_closure (|
                                                    Ty.tuple
                                                      [
                                                        Ty.path
                                                          "openvm_circuit::system::memory::controller::RecordId";
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 4 ]
                                                          [ F ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::controller::MemoryController")
                                                        []
                                                        [ F ],
                                                      "read",
                                                      [ Value.Integer IntegerKind.Usize 4 ],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| memory |) |)
                                                      |);
                                                      M.read (| d |);
                                                      M.read (| num_words_ptr |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let num_words_read :=
                                                        M.copy (|
                                                          Ty.path
                                                            "openvm_circuit::system::memory::controller::RecordId",
                                                          γ0_0
                                                        |) in
                                                      let num_words_limbs :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 4 ]
                                                            [ F ],
                                                          γ0_1
                                                        |) in
                                                      Value.Tuple
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            M.get_function (|
                                                              "openvm_rv32im_circuit::adapters::compose",
                                                              [],
                                                              [ F ]
                                                            |),
                                                            [ M.read (| num_words_limbs |) ]
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::Some"
                                                            []
                                                            [
                                                              Ty.path
                                                                "openvm_circuit::system::memory::controller::RecordId"
                                                            ]
                                                            [ M.read (| num_words_read |) ]
                                                        ]))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let num_words := M.copy (| Ty.path "u32", γ0_0 |) in
                                          let num_words_read :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_circuit::system::memory::controller::RecordId"
                                                ],
                                              γ0_1
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            Value.Bool true
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u32" ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u32" ]
                                                                ],
                                                              Value.Tuple
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    num_words
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.path "u32",
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        0
                                                                    |)
                                                                  |)
                                                                ]
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ,
                                                                      0
                                                                    |) in
                                                                  let γ0_1 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ,
                                                                      1
                                                                    |) in
                                                                  let left_val :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u32" ],
                                                                      γ0_0
                                                                    |) in
                                                                  let right_val :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u32" ],
                                                                      γ0_1
                                                                    |) in
                                                                  M.match_operator (|
                                                                    Ty.tuple [],
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                Ty.path "bool",
                                                                                M.call_closure (|
                                                                                  Ty.path "bool",
                                                                                  BinOp.eq,
                                                                                  [
                                                                                    M.read (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          left_val
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    M.read (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          right_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)) in
                                                                          let _ :=
                                                                            is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              let~ kind :
                                                                                  Ty.path
                                                                                    "core::panicking::AssertKind" :=
                                                                                Value.StructTuple
                                                                                  "core::panicking::AssertKind::Ne"
                                                                                  []
                                                                                  []
                                                                                  [] in
                                                                              M.alloc (|
                                                                                Ty.path "never",
                                                                                M.call_closure (|
                                                                                  Ty.path "never",
                                                                                  M.get_function (|
                                                                                    "core::panicking::assert_failed",
                                                                                    [],
                                                                                    [
                                                                                      Ty.path "u32";
                                                                                      Ty.path "u32"
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      kind
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              left_val
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              right_val
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    Value.StructTuple
                                                                                      "core::option::Option::None"
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "core::fmt::Arguments"
                                                                                      ]
                                                                                      []
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (Value.Tuple []))
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            Value.Bool true
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.path "bool",
                                                                        UnOp.not (|
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            BinOp.le,
                                                                            [
                                                                              M.read (|
                                                                                num_words
                                                                              |);
                                                                              M.call_closure (|
                                                                                Ty.path "u32",
                                                                                BinOp.Wrap.shl,
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.U32
                                                                                    1;
                                                                                  M.read (|
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            self
                                                                                          |)
                                                                                        |),
                                                                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                                                                        "air"
                                                                                      |),
                                                                                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                                                                      "pointer_max_bits"
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.never_to_any (|
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::panic",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        mk_str (|
                                                                          "assertion failed: num_words <= (1 << self.air.pointer_max_bits)"
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic (Value.Tuple []))
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |) in
                                            let~ mem_ptr : Ty.path "u32" :=
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_function (|
                                                  "openvm_rv32im_circuit::adapters::compose",
                                                  [],
                                                  [ F ]
                                                |),
                                                [ M.read (| mem_ptr_limbs |) ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            Value.Bool true
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.path "bool",
                                                                        UnOp.not (|
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            BinOp.le,
                                                                            [
                                                                              M.read (| mem_ptr |);
                                                                              M.call_closure (|
                                                                                Ty.path "u32",
                                                                                BinOp.Wrap.shl,
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.U32
                                                                                    1;
                                                                                  M.read (|
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            self
                                                                                          |)
                                                                                        |),
                                                                                        "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                                                                        "air"
                                                                                      |),
                                                                                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir",
                                                                                      "pointer_max_bits"
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.never_to_any (|
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::panic",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        mk_str (|
                                                                          "assertion failed: mem_ptr <= (1 << self.air.pointer_max_bits)"
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic (Value.Tuple []))
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |) in
                                            let~ streams :
                                                Ty.apply
                                                  (Ty.path "std::sync::mutex::MutexGuard")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "openvm_circuit::arch::vm::Streams")
                                                      []
                                                      [ F ]
                                                  ] :=
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "std::sync::mutex::MutexGuard")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "openvm_circuit::arch::vm::Streams")
                                                      []
                                                      [ F ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "std::sync::mutex::MutexGuard")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::arch::vm::Streams")
                                                            []
                                                            [ F ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "std::sync::poison::PoisonError")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::arch::vm::Streams")
                                                                []
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ],
                                                  "unwrap",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "std::sync::mutex::MutexGuard")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::arch::vm::Streams")
                                                              []
                                                              [ F ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "std::sync::poison::PoisonError")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::sync::mutex::MutexGuard")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::arch::vm::Streams")
                                                                  []
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "std::sync::mutex::Mutex")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::arch::vm::Streams")
                                                            []
                                                            [ F ]
                                                        ],
                                                      "lock",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "std::sync::mutex::Mutex")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::arch::vm::Streams")
                                                                      []
                                                                      [ F ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "std::sync::mutex::Mutex")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::vm::Streams")
                                                                        []
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "std::sync::mutex::Mutex")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_circuit::arch::vm::Streams")
                                                                                  []
                                                                                  [ F ]
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::sync::Arc")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "std::sync::mutex::Mutex")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_circuit::arch::vm::Streams")
                                                                                        []
                                                                                        [ F ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      "unwrap",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "std::sync::mutex::Mutex")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "openvm_circuit::arch::vm::Streams")
                                                                                          []
                                                                                          [ F ]
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "std::sync::once_lock::OnceLock")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::sync::Arc")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "std::sync::mutex::Mutex")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_circuit::arch::vm::Streams")
                                                                                        []
                                                                                        [ F ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ],
                                                                          "get",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (| self |)
                                                                              |),
                                                                              "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                                                              "streams"
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.lt,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::collections::vec_deque::VecDeque")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "len",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_circuit::arch::vm::Streams")
                                                                                  []
                                                                                  [ F ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "std::sync::mutex::MutexGuard")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_circuit::arch::vm::Streams")
                                                                                    []
                                                                                    [ F ]
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "deref",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                streams
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        "openvm_circuit::arch::vm::Streams",
                                                                        "hint_stream"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.mul,
                                                                  [
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                                                        Ty.path "usize"
                                                                      |)
                                                                    |);
                                                                    M.cast
                                                                      (Ty.path "usize")
                                                                      (M.read (| num_words |))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            Value.StructTuple
                                                              "core::result::Result::Err"
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::arch::execution::ExecutionState")
                                                                  []
                                                                  [ Ty.path "u32" ];
                                                                Ty.path
                                                                  "openvm_circuit::arch::execution::ExecutionError"
                                                              ]
                                                              [
                                                                Value.mkStructRecord
                                                                  "openvm_circuit::arch::execution::ExecutionError::HintOutOfBounds"
                                                                  []
                                                                  []
                                                                  [
                                                                    ("pc",
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          from_state,
                                                                          "openvm_circuit::arch::execution::ExecutionState",
                                                                          "pc"
                                                                        |)
                                                                      |))
                                                                  ]
                                                              ]
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |) in
                                            let~ record :
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                                                  []
                                                  [ F ] :=
                                              Value.mkStructRecord
                                                "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord"
                                                []
                                                [ F ]
                                                [
                                                  ("from_state", M.read (| from_state |));
                                                  ("instruction",
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_instructions::instruction::Instruction")
                                                        []
                                                        [ F ],
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_instructions::instruction::Instruction")
                                                          []
                                                          [ F ],
                                                        [],
                                                        [],
                                                        "clone",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| instruction |) |)
                                                        |)
                                                      ]
                                                    |));
                                                  ("mem_ptr_read", M.read (| mem_ptr_read |));
                                                  ("mem_ptr", M.read (| mem_ptr |));
                                                  ("num_words", M.read (| num_words |));
                                                  ("num_words_read", M.read (| num_words_read |));
                                                  ("hints",
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [ F ];
                                                              Ty.path
                                                                "openvm_circuit::system::memory::controller::RecordId"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [ F ];
                                                                Ty.path
                                                                  "openvm_circuit::system::memory::controller::RecordId"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      []
                                                    |))
                                                ] in
                                            let~ _ : Ty.tuple [] :=
                                              M.read (|
                                                M.use
                                                  (M.alloc (|
                                                    Ty.tuple [],
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "u32" ],
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "u32" ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              []
                                                              [ Ty.path "u32" ],
                                                            [],
                                                            [],
                                                            "into_iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.mkStructRecord
                                                              "core::ops::range::Range"
                                                              []
                                                              [ Ty.path "u32" ]
                                                              [
                                                                ("start",
                                                                  Value.Integer IntegerKind.U32 0);
                                                                ("end_", M.read (| num_words |))
                                                              ]
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let iter :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  []
                                                                  [ Ty.path "u32" ],
                                                                γ
                                                              |) in
                                                            M.read (|
                                                              M.loop (|
                                                                Ty.tuple [],
                                                                ltac:(M.monadic
                                                                  (let~ _ : Ty.tuple [] :=
                                                                    M.match_operator (|
                                                                      Ty.tuple [],
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [ Ty.path "u32" ],
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "u32" ],
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::ops::range::Range")
                                                                              []
                                                                              [ Ty.path "u32" ],
                                                                            [],
                                                                            [],
                                                                            "next",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  iter
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let _ :=
                                                                              M.is_struct_tuple (|
                                                                                γ,
                                                                                "core::option::Option::None"
                                                                              |) in
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.break (||)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::option::Option::Some",
                                                                                0
                                                                              |) in
                                                                            let word_index :=
                                                                              M.copy (|
                                                                                Ty.path "u32",
                                                                                γ0_0
                                                                              |) in
                                                                            M.read (|
                                                                              let~ _ :
                                                                                  Ty.tuple [] :=
                                                                                M.match_operator (|
                                                                                  Ty.tuple [],
                                                                                  M.alloc (|
                                                                                    Ty.tuple [],
                                                                                    Value.Tuple []
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ :=
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "bool",
                                                                                                BinOp.ne,
                                                                                                [
                                                                                                  M.read (|
                                                                                                    word_index
                                                                                                  |);
                                                                                                  Value.Integer
                                                                                                    IntegerKind.U32
                                                                                                    0
                                                                                                ]
                                                                                              |)
                                                                                            |)) in
                                                                                        let _ :=
                                                                                          is_constant_or_break_match (|
                                                                                            M.read (|
                                                                                              γ
                                                                                            |),
                                                                                            Value.Bool
                                                                                              true
                                                                                          |) in
                                                                                        M.read (|
                                                                                          let~ _ :
                                                                                              Ty.tuple
                                                                                                [] :=
                                                                                            M.call_closure (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                                                                  []
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                "increment_timestamp",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      memory
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |) in
                                                                                          let~ _ :
                                                                                              Ty.tuple
                                                                                                [] :=
                                                                                            M.call_closure (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                                                                  []
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                "increment_timestamp",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      memory
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Ty.tuple
                                                                                              [],
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (Value.Tuple
                                                                                          []))
                                                                                  ]
                                                                                |) in
                                                                              let~ data :
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        4
                                                                                    ]
                                                                                    [ F ] :=
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        4
                                                                                    ]
                                                                                    [ F ],
                                                                                  M.get_function (|
                                                                                    "core::array::from_fn",
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        4
                                                                                    ],
                                                                                    [
                                                                                      F;
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                        F
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.closure
                                                                                      (fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          match γ
                                                                                          with
                                                                                          | [ α0
                                                                                              ] =>
                                                                                            ltac:(M.monadic
                                                                                              (M.match_operator (|
                                                                                                F,
                                                                                                M.alloc (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  α0
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (M.call_closure (|
                                                                                                        F,
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::option::Option")
                                                                                                            []
                                                                                                            [
                                                                                                              F
                                                                                                            ],
                                                                                                          "unwrap",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::option::Option")
                                                                                                              []
                                                                                                              [
                                                                                                                F
                                                                                                              ],
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::collections::vec_deque::VecDeque")
                                                                                                                []
                                                                                                                [
                                                                                                                  F;
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ],
                                                                                                              "pop_front",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.MutRef,
                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                  M.deref (|
                                                                                                                    M.call_closure (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&mut")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "openvm_circuit::arch::vm::Streams")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              F
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::deref::DerefMut",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "std::sync::mutex::MutexGuard")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "openvm_circuit::arch::vm::Streams")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                F
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        [],
                                                                                                                        "deref_mut",
                                                                                                                        [],
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.MutRef,
                                                                                                                          streams
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |),
                                                                                                                  "openvm_circuit::arch::vm::Streams",
                                                                                                                  "hint_stream"
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)))
                                                                                                ]
                                                                                              |)))
                                                                                          | _ =>
                                                                                            M.impossible
                                                                                              "wrong number of arguments"
                                                                                          end))
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Ty.tuple [],
                                                                                M.match_operator (|
                                                                                  Ty.tuple [],
                                                                                  M.alloc (|
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "openvm_circuit::system::memory::controller::RecordId";
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              4
                                                                                          ]
                                                                                          [ F ]
                                                                                      ],
                                                                                    M.call_closure (|
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_circuit::system::memory::controller::RecordId";
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "array")
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                4
                                                                                            ]
                                                                                            [ F ]
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "openvm_circuit::system::memory::controller::MemoryController")
                                                                                          []
                                                                                          [ F ],
                                                                                        "write",
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            4
                                                                                        ],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              memory
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.read (|
                                                                                          e
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          F,
                                                                                          M.get_trait_method (|
                                                                                            "p3_field::field::FieldAlgebra",
                                                                                            F,
                                                                                            [],
                                                                                            [],
                                                                                            "from_canonical_u32",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "u32",
                                                                                              BinOp.Wrap.add,
                                                                                              [
                                                                                                M.read (|
                                                                                                  mem_ptr
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "u32",
                                                                                                  BinOp.Wrap.mul,
                                                                                                  [
                                                                                                    M.cast
                                                                                                      (Ty.path
                                                                                                        "u32")
                                                                                                      (M.read (|
                                                                                                        get_constant (|
                                                                                                          "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        |)
                                                                                                      |));
                                                                                                    M.read (|
                                                                                                      word_index
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.read (|
                                                                                          data
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ,
                                                                                            0
                                                                                          |) in
                                                                                        let γ0_1 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ,
                                                                                            1
                                                                                          |) in
                                                                                        let write :=
                                                                                          M.copy (|
                                                                                            Ty.path
                                                                                              "openvm_circuit::system::memory::controller::RecordId",
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.read (|
                                                                                          let~ _ :
                                                                                              Ty.tuple
                                                                                                [] :=
                                                                                            M.call_closure (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "array")
                                                                                                          [
                                                                                                            Value.Integer
                                                                                                              IntegerKind.Usize
                                                                                                              4
                                                                                                          ]
                                                                                                          [
                                                                                                            F
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "openvm_circuit::system::memory::controller::RecordId"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ],
                                                                                                "push",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    record,
                                                                                                    "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                                                                                    "hints"
                                                                                                  |)
                                                                                                |);
                                                                                                Value.Tuple
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      data
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      write
                                                                                                    |)
                                                                                                  ]
                                                                                              ]
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Ty.tuple
                                                                                              [],
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (|
                                                                    Ty.tuple [],
                                                                    Value.Tuple []
                                                                  |)))
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  |))
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              let β :=
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                                  "height"
                                                |) in
                                              M.write (|
                                                β,
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.read (| β |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [ F ];
                                                                Ty.path
                                                                  "openvm_circuit::system::memory::controller::RecordId"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            record,
                                                            "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord",
                                                            "hints"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreRecord")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                                                      "records"
                                                    |)
                                                  |);
                                                  M.read (| record |)
                                                ]
                                              |) in
                                            let~ next_state :
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::arch::execution::ExecutionState")
                                                  []
                                                  [ Ty.path "u32" ] :=
                                              Value.mkStructRecord
                                                "openvm_circuit::arch::execution::ExecutionState"
                                                []
                                                [ Ty.path "u32" ]
                                                [
                                                  ("pc",
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.add,
                                                      [
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            from_state,
                                                            "openvm_circuit::arch::execution::ExecutionState",
                                                            "pc"
                                                          |)
                                                        |);
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_instructions::program::DEFAULT_PC_STEP",
                                                            Ty.path "u32"
                                                          |)
                                                        |)
                                                      ]
                                                    |));
                                                  ("timestamp",
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::controller::MemoryController")
                                                          []
                                                          [ F ],
                                                        "timestamp",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| memory |) |)
                                                        |)
                                                      ]
                                                    |))
                                                ] in
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::execution::ExecutionState")
                                                    []
                                                    [ Ty.path "u32" ];
                                                  Ty.path
                                                    "openvm_circuit::arch::execution::ExecutionError"
                                                ],
                                              Value.StructTuple
                                                "core::result::Result::Ok"
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::execution::ExecutionState")
                                                    []
                                                    [ Ty.path "u32" ];
                                                  Ty.path
                                                    "openvm_circuit::arch::execution::ExecutionError"
                                                ]
                                                [ M.read (| next_state |) ]
                                            |)
                                          |)))
                                    ]
                                  |)))
                            ]
                          |)
                        |)
                      |)))
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn get_opcode_name(&self, opcode: usize) -> String {
            if opcode == HINT_STOREW.global_opcode().as_usize() {
                String::from("HINT_STOREW")
            } else if opcode == HINT_BUFFER.global_opcode().as_usize() {
                String::from("HINT_BUFFER")
            } else {
                unreachable!("unsupported opcode: {}", opcode)
            }
        }
    *)
    Definition get_opcode_name
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; opcode ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ]
                ],
              self
            |) in
          let opcode := M.alloc (| Ty.path "usize", opcode |) in
          M.match_operator (|
            Ty.path "alloc::string::String",
            M.alloc (| Ty.tuple [], Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        Ty.path "bool",
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.eq,
                          [
                            M.read (| opcode |);
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "openvm_instructions::VmOpcode",
                                "as_usize",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.path "openvm_instructions::VmOpcode",
                                    M.call_closure (|
                                      Ty.path "openvm_instructions::VmOpcode",
                                      M.get_trait_method (|
                                        "openvm_instructions::LocalOpcode",
                                        Ty.path
                                          "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                        [],
                                        [],
                                        "global_opcode",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path
                                              "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                            Value.StructTuple
                                              "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode::HINT_STOREW"
                                              []
                                              []
                                              []
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "alloc::string::String",
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                      "from",
                      [],
                      []
                    |),
                    [ mk_str (| "HINT_STOREW" |) ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.path "alloc::string::String",
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [
                                    M.read (| opcode |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.path "openvm_instructions::VmOpcode",
                                        "as_usize",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "openvm_instructions::VmOpcode",
                                            M.call_closure (|
                                              Ty.path "openvm_instructions::VmOpcode",
                                              M.get_trait_method (|
                                                "openvm_instructions::LocalOpcode",
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                                [],
                                                [],
                                                "global_opcode",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode",
                                                    Value.StructTuple
                                                      "openvm_rv32im_transpiler::instructions::Rv32HintStoreOpcode::HINT_BUFFER"
                                                      []
                                                      []
                                                      []
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.call_closure (|
                            Ty.path "alloc::string::String",
                            M.get_trait_method (|
                              "core::convert::From",
                              Ty.path "alloc::string::String",
                              [],
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                              "from",
                              [],
                              []
                            |),
                            [ mk_str (| "HINT_BUFFER" |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    [
                                      Value.Integer IntegerKind.Usize 1;
                                      Value.Integer IntegerKind.Usize 1
                                    ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [
                                                mk_str (|
                                                  "internal error: entered unreachable code: unsupported opcode: "
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.path "core::fmt::rt::Argument" ],
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_display",
                                                    [],
                                                    [ Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, opcode |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)))
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_circuit::arch::execution::InstructionExecutor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("execute", InstanceField.Method (execute F));
          ("get_opcode_name", InstanceField.Method (get_opcode_name F))
        ].
  End Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_F.
  
  Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ].
    
    (*
        fn air_name(&self) -> String {
            "Rv32HintStoreAir".to_string()
        }
    *)
    Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.path "alloc::string::String",
            M.get_trait_method (|
              "alloc::string::ToString",
              Ty.path "str",
              [],
              [],
              "to_string",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32HintStoreAir" |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn current_trace_height(&self) -> usize {
            self.height
        }
    *)
    Definition current_trace_height
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ]
                ],
              self
            |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
              "height"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn trace_width(&self) -> usize {
            Rv32HintStoreCols::<F>::width()
        }
    *)
    Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip") [] [ F ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreCols") [] [ F ],
              "width",
              [],
              []
            |),
            []
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::ChipUsageGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("air_name", InstanceField.Method (air_name F));
          ("current_trace_height", InstanceField.Method (current_trace_height F));
          ("trace_width", InstanceField.Method (trace_width F))
        ].
  End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_F.
  
  
  Module Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
        []
        [
          Ty.associated_in_trait
            "p3_commit::domain::PolynomialSpace"
            []
            []
            (Ty.associated_in_trait
              "p3_commit::pcs::Pcs"
              []
              [
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenge";
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenger"
              ]
              (Ty.associated_in_trait
                "openvm_stark_backend::config::StarkGenericConfig"
                []
                []
                SC
                "Pcs")
              "Domain")
            "Val"
        ].
    
    (*
        fn air(&self) -> Arc<dyn AnyRap<SC>> {
            Arc::new(self.air)
        }
    *)
    Definition air (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ]
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
              (Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ]),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir";
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreAir";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip",
                          "air"
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn generate_air_proof_input(self) -> AirProofInput<SC> {
            AirProofInput::simple_no_pis(self.generate_trace())
        }
    *)
    Definition generate_air_proof_input
        (SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                []
                [
                  Ty.associated_in_trait
                    "p3_commit::domain::PolynomialSpace"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Domain")
                    "Val"
                ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
            M.get_associated_function (|
              Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
              "simple_no_pis",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val";
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::hintstore::Rv32HintStoreChip")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ],
                  "generate_trace",
                  [],
                  []
                |),
                [ M.read (| self |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SC : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::chip::Chip"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self SC)
        (* Instance *)
        [
          ("air", InstanceField.Method (air SC));
          ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input SC))
        ].
  End Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_rv32im_circuit_hintstore_Rv32HintStoreChip_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
End hintstore.
