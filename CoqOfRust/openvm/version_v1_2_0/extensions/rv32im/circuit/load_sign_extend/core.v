(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module load_sign_extend.
  Module core.
    (* StructRecord
      {
        name := "LoadSignExtendCoreCols";
        const_params := [ "NUM_CELLS" ];
        ty_params := [ "T" ];
        fields :=
          [
            ("opcode_loadb_flag0", T);
            ("opcode_loadb_flag1", T);
            ("opcode_loadh_flag", T);
            ("shift_most_sig_bit", T);
            ("data_most_sig_bit", T);
            ("shifted_read_data", Ty.apply (Ty.path "array") [ NUM_CELLS ] [ T ]);
            ("prev_data", Ty.apply (Ty.path "array") [ NUM_CELLS ] [ T ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T.
      Definition Self (NUM_CELLS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
          [ NUM_CELLS ]
          [ T ].
      
      (* Debug *)
      Definition fmt
          (NUM_CELLS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                      [ NUM_CELLS ]
                      [ T ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 7 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "opcode_loadb_flag0" |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "opcode_loadb_flag1" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "opcode_loadh_flag" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "shift_most_sig_bit" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "data_most_sig_bit" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "shifted_read_data" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "prev_data" |) |) |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 7 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                                            "opcode_loadb_flag0"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                                            "opcode_loadb_flag1"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                                            "opcode_loadh_flag"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                                            "shift_most_sig_bit"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                                            "data_most_sig_bit"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                                            "shifted_read_data"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ T ] ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ T ] ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                                                "prev_data"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "LoadSignExtendCoreCols" |) |)
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 7 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_CELLS T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_CELLS T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T.
      Definition Self (NUM_CELLS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
          [ NUM_CELLS ]
          [ T ].
      
      (* Clone *)
      Definition clone
          (NUM_CELLS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                      [ NUM_CELLS ]
                      [ T ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols"
              [ NUM_CELLS ]
              [ T ]
              [
                ("opcode_loadb_flag0",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                              "opcode_loadb_flag0"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("opcode_loadb_flag1",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                              "opcode_loadb_flag1"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("opcode_loadh_flag",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                              "opcode_loadh_flag"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("shift_most_sig_bit",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                              "shift_most_sig_bit"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("data_most_sig_bit",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                              "data_most_sig_bit"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("shifted_read_data",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_CELLS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_CELLS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                              "shifted_read_data"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("prev_data",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_CELLS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_CELLS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                              "prev_data"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_CELLS T)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_CELLS T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T.
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T_for_slice_T.
      Definition Self (NUM_CELLS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow
          (NUM_CELLS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                              [ NUM_CELLS ]
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                      [ NUM_CELLS ]
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                        [ NUM_CELLS ]
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                  [ NUM_CELLS ]
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                    [ NUM_CELLS ]
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                            [ NUM_CELLS ]
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                      [ NUM_CELLS ]
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                                              [ NUM_CELLS ]
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                  [ NUM_CELLS ]
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
              [ NUM_CELLS ]
              [ T ]
          ]
          (Self NUM_CELLS T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow NUM_CELLS T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T_for_slice_T.
      Definition Self (NUM_CELLS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut
          (NUM_CELLS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                                  [ NUM_CELLS ]
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                          [ NUM_CELLS ]
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                            [ NUM_CELLS ]
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                      [ NUM_CELLS ]
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                        [ NUM_CELLS ]
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                [ NUM_CELLS ]
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                          [ NUM_CELLS ]
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                                                  [ NUM_CELLS ]
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                                      [ NUM_CELLS ]
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
              [ NUM_CELLS ]
              [ T ]
          ]
          (Self NUM_CELLS T)
          (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut NUM_CELLS T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T.
      Definition Self (NUM_CELLS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
          [ NUM_CELLS ]
          [ T ].
      
      (* AlignedBorrow *)
      Definition width
          (NUM_CELLS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path
                      "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                    [ NUM_CELLS ]
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (NUM_CELLS : Value.t) (T : Ty.t),
        M.IsAssociatedFunction.C (Self NUM_CELLS T) "width" (width NUM_CELLS T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreCols_NUM_CELLS_T.
    
    (* StructRecord
      {
        name := "LoadSignExtendCoreRecord";
        const_params := [ "NUM_CELLS" ];
        ty_params := [ "F" ];
        fields :=
          [
            ("shifted_read_data", Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ]);
            ("prev_data", Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ]);
            ("opcode", Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode");
            ("shift_amount", Ty.path "u32");
            ("most_sig_bit", Ty.path "bool")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreRecord_NUM_CELLS_F.
      Definition Self (NUM_CELLS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
          [ NUM_CELLS ]
          [ F ].
      
      (* Debug *)
      Definition fmt
          (NUM_CELLS : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                      [ NUM_CELLS ]
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field5_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "LoadSignExtendCoreRecord" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "shifted_read_data" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                            "shifted_read_data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "prev_data" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                            "prev_data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "opcode" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                            "opcode"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "shift_amount" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                            "shift_amount"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "most_sig_bit" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "bool" ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "bool" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                                "most_sig_bit"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_CELLS F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_CELLS F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreRecord_NUM_CELLS_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreRecord_NUM_CELLS_F.
      Definition Self (NUM_CELLS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
          [ NUM_CELLS ]
          [ F ].
      
      (* Clone *)
      Definition clone
          (NUM_CELLS : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                      [ NUM_CELLS ]
                      [ F ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord"
              [ NUM_CELLS ]
              [ F ]
              [
                ("shifted_read_data",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                              "shifted_read_data"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("prev_data",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                              "prev_data"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("opcode",
                  M.call_closure (|
                    Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                              "opcode"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("shift_amount",
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "u32",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                              "shift_amount"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("most_sig_bit",
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "bool",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                              "most_sig_bit"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_CELLS F)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_CELLS F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreRecord_NUM_CELLS_F.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_where_serde_de_DeserializeOwned_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreRecord_NUM_CELLS_F.
        Definition Self (NUM_CELLS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
            [ NUM_CELLS ]
            [ F ].
        
        (* Serialize *)
        Definition serialize
            (NUM_CELLS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_CELLS F in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                        [ NUM_CELLS ]
                        [ F ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "LoadSignExtendCoreRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.cast (Ty.path "usize") (Value.Bool false);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::_::serialize::__SerializeWith")
                                      [ NUM_CELLS ]
                                      [ F ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "shifted_read_data" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::load_sign_extend::core::_::serialize::__SerializeWith")
                                            [ NUM_CELLS ]
                                            [ F ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::load_sign_extend::core::_::serialize::__SerializeWith"
                                            [ NUM_CELLS ]
                                            [ F ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                                                            "shifted_read_data"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                                                      [ NUM_CELLS ]
                                                      [ F ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::_::serialize::__SerializeWith'1")
                                      [ NUM_CELLS ]
                                      [ F ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "prev_data" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::load_sign_extend::core::_::serialize::__SerializeWith'1")
                                            [ NUM_CELLS ]
                                            [ F ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::load_sign_extend::core::_::serialize::__SerializeWith'1"
                                            [ NUM_CELLS ]
                                            [ F ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                                                            "prev_data"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                                                      [ NUM_CELLS ]
                                                      [ F ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.path
                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "opcode" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                                          "opcode"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "u32" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "shift_amount" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                                          "shift_amount"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "most_sig_bit" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                                          "most_sig_bit"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_CELLS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_CELLS F)
            (* Instance *) [ ("serialize", InstanceField.Method (serialize NUM_CELLS F)) ].
      End Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_where_serde_de_DeserializeOwned_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreRecord_NUM_CELLS_F.
      Module Impl_serde_de_Deserialize_where_serde_ser_Serialize_F_where_serde_de_DeserializeOwned_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreRecord_NUM_CELLS_F.
        Definition Self (NUM_CELLS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
            [ NUM_CELLS ]
            [ F ].
        
        (* Deserialize *)
        Definition deserialize
            (NUM_CELLS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_CELLS F in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                      [ NUM_CELLS ]
                      [ F ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::_'1::deserialize::__Visitor")
                      [ NUM_CELLS ]
                      [ F ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "LoadSignExtendCoreRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::load_sign_extend::core::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::load_sign_extend::core::_'1::deserialize::__Visitor"
                    [ NUM_CELLS ]
                    [ F ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                              [ NUM_CELLS ]
                              [ F ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_CELLS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_CELLS F)
            (* Instance *) [ ("deserialize", InstanceField.Method (deserialize NUM_CELLS F)) ].
      End Impl_serde_de_Deserialize_where_serde_ser_Serialize_F_where_serde_de_DeserializeOwned_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreRecord_NUM_CELLS_F.
    End underscore.
    
    
    (* StructRecord
      {
        name := "LoadSignExtendCoreAir";
        const_params := [ "NUM_CELLS"; "LIMB_BITS" ];
        ty_params := [];
        fields :=
          [
            ("range_bus",
              Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
      Definition Self (NUM_CELLS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
          [ NUM_CELLS; LIMB_BITS ]
          [].
      
      (* Debug *)
      Definition fmt
          (NUM_CELLS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
                      [ NUM_CELLS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "LoadSignExtendCoreAir" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "range_bus" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus"
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir",
                                "range_bus"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_CELLS LIMB_BITS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_CELLS LIMB_BITS)) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
      Definition Self (NUM_CELLS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
          [ NUM_CELLS; LIMB_BITS ]
          [].
      
      (* Clone *)
      Definition clone
          (NUM_CELLS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
                      [ NUM_CELLS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir"
              [ NUM_CELLS; LIMB_BITS ]
              []
              [
                ("range_bus",
                  M.call_closure (|
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir",
                              "range_bus"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_CELLS LIMB_BITS)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_CELLS LIMB_BITS)) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
      Definition Self (NUM_CELLS LIMB_BITS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
          [ NUM_CELLS; LIMB_BITS ]
          [].
      
      (*
          fn width(&self) -> usize {
              LoadSignExtendCoreCols::<F, NUM_CELLS>::width()
          }
      *)
      Definition width
          (NUM_CELLS LIMB_BITS : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
                      [ NUM_CELLS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                  [ NUM_CELLS ]
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS LIMB_BITS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_CELLS LIMB_BITS F)
          (* Instance *) [ ("width", InstanceField.Method (width NUM_CELLS LIMB_BITS F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
    
    Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
      Definition Self (NUM_CELLS LIMB_BITS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
          [ NUM_CELLS; LIMB_BITS ]
          [].
      
      Axiom Implements :
        forall (NUM_CELLS LIMB_BITS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::rap::BaseAirWithPublicValues"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_CELLS LIMB_BITS F)
          (* Instance *) [].
    End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_Tuple_array_NUM_CELLS_associated_in_trait_p3_air_air_AirBuilder___AB_Var_array_NUM_CELLS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr__where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_NUM_CELLS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_rv32im_circuit_adapters_loadstore_LoadStoreInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
      Definition Self (NUM_CELLS LIMB_BITS : Value.t) (AB I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
          [ NUM_CELLS; LIMB_BITS ]
          [].
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local_core: &[AB::Var],
              _from_pc: AB::Var,
          ) -> AdapterAirContext<AB::Expr, I> {
              let cols: &LoadSignExtendCoreCols<AB::Var, NUM_CELLS> = ( *local_core).borrow();
              let LoadSignExtendCoreCols::<AB::Var, NUM_CELLS> {
                  shifted_read_data,
                  prev_data,
                  opcode_loadb_flag0: is_loadb0,
                  opcode_loadb_flag1: is_loadb1,
                  opcode_loadh_flag: is_loadh,
                  data_most_sig_bit,
                  shift_most_sig_bit,
              } = *cols;
      
              let flags = [is_loadb0, is_loadb1, is_loadh];
      
              let is_valid = flags.iter().fold(AB::Expr::ZERO, |acc, &flag| {
                  builder.assert_bool(flag);
                  acc + flag
              });
      
              builder.assert_bool(is_valid.clone());
              builder.assert_bool(data_most_sig_bit);
              builder.assert_bool(shift_most_sig_bit);
      
              let expected_opcode = (is_loadb0 + is_loadb1) * AB::F::from_canonical_u8(LOADB as u8)
                  + is_loadh * AB::F::from_canonical_u8(LOADH as u8)
                  + AB::Expr::from_canonical_usize(Rv32LoadStoreOpcode::CLASS_OFFSET);
      
              let limb_mask = data_most_sig_bit * AB::Expr::from_canonical_u32((1 << LIMB_BITS) - 1);
      
              // there are three parts to write_data:
              // - 1st limb is always shifted_read_data
              // - 2nd to (NUM_CELLS/2)th limbs are read_data if loadh and sign extended if loadb
              // - (NUM_CELLS/2 + 1)th to last limbs are always sign extended limbs
              let write_data: [AB::Expr; NUM_CELLS] = array::from_fn(|i| {
                  if i == 0 {
                      (is_loadh + is_loadb0) * shifted_read_data[i].into()
                          + is_loadb1 * shifted_read_data[i + 1].into()
                  } else if i < NUM_CELLS / 2 {
                      shifted_read_data[i] * is_loadh + (is_loadb0 + is_loadb1) * limb_mask.clone()
                  } else {
                      limb_mask.clone()
                  }
              });
      
              // Constrain that most_sig_bit is correct
              let most_sig_limb = shifted_read_data[0] * is_loadb0
                  + shifted_read_data[1] * is_loadb1
                  + shifted_read_data[NUM_CELLS / 2 - 1] * is_loadh;
      
              self.range_bus
                  .range_check(
                      most_sig_limb
                          - data_most_sig_bit * AB::Expr::from_canonical_u32(1 << (LIMB_BITS - 1)),
                      LIMB_BITS - 1,
                  )
                  .eval(builder, is_valid.clone());
      
              // Unshift the shifted_read_data to get the original read_data
              let read_data = array::from_fn(|i| {
                  select(
                      shift_most_sig_bit,
                      shifted_read_data[(i + NUM_CELLS - 2) % NUM_CELLS],
                      shifted_read_data[i],
                  )
              });
              let load_shift_amount = shift_most_sig_bit * AB::Expr::TWO + is_loadb1;
      
              AdapterAirContext {
                  to_pc: None,
                  reads: (prev_data, read_data).into(),
                  writes: [write_data].into(),
                  instruction: LoadStoreInstruction {
                      is_valid: is_valid.clone(),
                      opcode: expected_opcode,
                      is_load: is_valid,
                      load_shift_amount,
                      store_shift_amount: AB::Expr::ZERO,
                  }
                  .into(),
              }
          }
      *)
      Definition eval
          (NUM_CELLS LIMB_BITS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS AB I in
        match ε, τ, α with
        | [], [], [ self; builder; local_core; _from_pc ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
                      [ NUM_CELLS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local_core :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local_core
              |) in
            let _from_pc :=
              M.alloc (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                _from_pc
              |) in
            M.read (|
              let~ cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                        [ NUM_CELLS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                            [ NUM_CELLS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                            [ NUM_CELLS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local_core |) |) |) ]
                    |)
                  |)
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                    []
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ],
                  M.deref (| M.read (| cols |) |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                            "shifted_read_data"
                          |) in
                        let γ0_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                            "prev_data"
                          |) in
                        let γ0_2 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                            "opcode_loadb_flag0"
                          |) in
                        let γ0_3 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                            "opcode_loadb_flag1"
                          |) in
                        let γ0_4 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                            "opcode_loadh_flag"
                          |) in
                        let γ0_5 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                            "data_most_sig_bit"
                          |) in
                        let γ0_6 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                            "shift_most_sig_bit"
                          |) in
                        let shifted_read_data :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "array")
                              [ NUM_CELLS ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            γ0_0
                          |) in
                        let prev_data :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "array")
                              [ NUM_CELLS ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            γ0_1
                          |) in
                        let is_loadb0 :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            γ0_2
                          |) in
                        let is_loadb1 :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            γ0_3
                          |) in
                        let is_loadh :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            γ0_4
                          |) in
                        let data_most_sig_bit :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            γ0_5
                          |) in
                        let shift_most_sig_bit :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            γ0_6
                          |) in
                        M.read (|
                          let~ flags :
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 3 ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                ] :=
                            Value.Array
                              [
                                M.read (| is_loadb0 |);
                                M.read (| is_loadb1 |);
                                M.read (| is_loadh |)
                              ] in
                          let~ is_valid :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                [],
                                [],
                                "fold",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.function
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr";
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ]
                                    (Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 3 ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ]
                                          ]),
                                      [ M.borrow (| Pointer.Kind.Ref, flags |) ]
                                    |)
                                  ]
                                |);
                                M.read (|
                                  get_constant (|
                                    "p3_field::field::FieldAlgebra::ZERO",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  |)
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0; α1 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.alloc (|
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              α0
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let acc :=
                                                    M.copy (|
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      γ
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var"
                                                        ],
                                                      α1
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ := M.deref (| M.read (| γ |) |) in
                                                          let flag :=
                                                            M.copy (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var",
                                                              γ
                                                            |) in
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.call_closure (|
                                                                Ty.tuple [],
                                                                M.get_trait_method (|
                                                                  "p3_air::air::AirBuilder",
                                                                  AB,
                                                                  [],
                                                                  [],
                                                                  "assert_bool",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.read (| builder |)
                                                                    |)
                                                                  |);
                                                                  M.read (| flag |)
                                                                ]
                                                              |) in
                                                            M.alloc (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Add",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ],
                                                                  "add",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| acc |);
                                                                  M.read (| flag |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "assert_bool",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "assert_bool",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.read (| data_most_sig_bit |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "assert_bool",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.read (| shift_most_sig_bit |)
                              ]
                            |) in
                          let~ expected_opcode :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "add",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F"
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          M.get_trait_method (|
                                            "core::ops::arith::Add",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var",
                                            [],
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                            "add",
                                            [],
                                            []
                                          |),
                                          [ M.read (| is_loadb0 |); M.read (| is_loadb1 |) ]
                                        |);
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F",
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F",
                                            [],
                                            [],
                                            "from_canonical_u8",
                                            [],
                                            []
                                          |),
                                          [
                                            M.cast
                                              (Ty.path "u8")
                                              (Value.Integer IntegerKind.Usize 6)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F"
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| is_loadh |);
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F",
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F",
                                            [],
                                            [],
                                            "from_canonical_u8",
                                            [],
                                            []
                                          |),
                                          [
                                            M.cast
                                              (Ty.path "u8")
                                              (Value.Integer IntegerKind.Usize 7)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "p3_field::field::FieldAlgebra",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "from_canonical_usize",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      get_constant (|
                                        "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ limb_mask :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Mul",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "mul",
                                [],
                                []
                              |),
                              [
                                M.read (| data_most_sig_bit |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "p3_field::field::FieldAlgebra",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "from_canonical_u32",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.path "u32",
                                      BinOp.Wrap.sub,
                                      [
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.shl,
                                          [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                        |);
                                        Value.Integer IntegerKind.U32 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ write_data :
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_CELLS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_CELLS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                              M.get_function (|
                                "core::array::from_fn",
                                [ NUM_CELLS ],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.function
                                    [ Ty.path "usize" ]
                                    (Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr")
                                ]
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.alloc (| Ty.path "usize", α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let i := M.copy (| Ty.path "usize", γ |) in
                                                  M.match_operator (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (| i |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      0
                                                                  ]
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Add",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "add",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr"
                                                                  ],
                                                                  "mul",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Add",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var",
                                                                      [],
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Var"
                                                                      ],
                                                                      "add",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| is_loadh |);
                                                                      M.read (| is_loadb0 |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var",
                                                                      [],
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ],
                                                                      "into",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          shifted_read_data,
                                                                          M.read (| i |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Var",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr"
                                                                  ],
                                                                  "mul",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| is_loadb1 |);
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var",
                                                                      [],
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ],
                                                                      "into",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          shifted_read_data,
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.add,
                                                                            [
                                                                              M.read (| i |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.match_operator (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.path "bool",
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.lt,
                                                                          [
                                                                            M.read (| i |);
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              BinOp.Wrap.div,
                                                                              [
                                                                                NUM_CELLS;
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Add",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      [],
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ],
                                                                      "add",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr",
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Mul",
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Var",
                                                                          [],
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::AirBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "Var"
                                                                          ],
                                                                          "mul",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.SubPointer.get_array_field (|
                                                                              shifted_read_data,
                                                                              M.read (| i |)
                                                                            |)
                                                                          |);
                                                                          M.read (| is_loadh |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr",
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Mul",
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr",
                                                                          [],
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::AirBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "Expr"
                                                                          ],
                                                                          "mul",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::AirBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "Expr",
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::Add",
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Var",
                                                                              [],
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Var"
                                                                              ],
                                                                              "add",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                is_loadb0
                                                                              |);
                                                                              M.read (| is_loadb1 |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::AirBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "Expr",
                                                                            M.get_trait_method (|
                                                                              "core::clone::Clone",
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr",
                                                                              [],
                                                                              [],
                                                                              "clone",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                limb_mask
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        limb_mask
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |) in
                          let~ most_sig_limb :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "add",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            shifted_read_data,
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |);
                                        M.read (| is_loadb0 |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            shifted_read_data,
                                            Value.Integer IntegerKind.Usize 1
                                          |)
                                        |);
                                        M.read (| is_loadb1 |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_array_field (|
                                        shifted_read_data,
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.sub,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.div,
                                              [ NUM_CELLS; Value.Integer IntegerKind.Usize 2 ]
                                            |);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.read (| is_loadh |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                "eval",
                                [],
                                [
                                  AB;
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                  M.get_associated_function (|
                                    Ty.path
                                      "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                    "range_check",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir",
                                        "range_bus"
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Sub",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                        "sub",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| most_sig_limb |);
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var",
                                            [],
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr"
                                            ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| data_most_sig_bit |);
                                            M.call_closure (|
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              M.get_trait_method (|
                                                "p3_field::field::FieldAlgebra",
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr",
                                                [],
                                                [],
                                                "from_canonical_u32",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shl,
                                                  [
                                                    Value.Integer IntegerKind.U32 1;
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.sub,
                                                      [ LIMB_BITS; Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  ]
                                |);
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                                |)
                              ]
                            |) in
                          let~ read_data :
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_CELLS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_CELLS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                              M.get_function (|
                                "core::array::from_fn",
                                [ NUM_CELLS ],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.function
                                    [ Ty.path "usize" ]
                                    (Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr")
                                ]
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.alloc (| Ty.path "usize", α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let i := M.copy (| Ty.path "usize", γ |) in
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_function (|
                                                      "openvm_circuit_primitives::utils::select",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr";
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var";
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var";
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.read (| shift_most_sig_bit |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          shifted_read_data,
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.rem,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.sub,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.add,
                                                                    [ M.read (| i |); NUM_CELLS ]
                                                                  |);
                                                                  Value.Integer IntegerKind.Usize 2
                                                                ]
                                                              |);
                                                              NUM_CELLS
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          shifted_read_data,
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |) in
                          let~ load_shift_amount :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| shift_most_sig_bit |);
                                    M.read (|
                                      get_constant (|
                                        "p3_field::field::FieldAlgebra::TWO",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (| is_loadb1 |)
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I
                              ],
                            Value.mkStructRecord
                              "openvm_circuit::arch::integration_api::AdapterAirContext"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I
                              ]
                              [
                                ("to_pc",
                                  Value.StructTuple
                                    "core::option::Option::None"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                    []);
                                ("reads",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                      I
                                      "Reads",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ NUM_CELLS ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ];
                                          Ty.apply
                                            (Ty.path "array")
                                            [ NUM_CELLS ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr"
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                          I
                                          "Reads"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [ Value.Tuple [ M.read (| prev_data |); M.read (| read_data |) ]
                                    ]
                                  |));
                                ("writes",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                      I
                                      "Writes",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ NUM_CELLS ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr"
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                          I
                                          "Writes"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [ Value.Array [ M.read (| write_data |) ] ]
                                  |));
                                ("instruction",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                      I
                                      "ProcessedInstruction",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::loadstore::LoadStoreInstruction")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                          I
                                          "ProcessedInstruction"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [
                                      Value.mkStructRecord
                                        "openvm_rv32im_circuit::adapters::loadstore::LoadStoreInstruction"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                        [
                                          ("is_valid",
                                            M.call_closure (|
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              M.get_trait_method (|
                                                "core::clone::Clone",
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr",
                                                [],
                                                [],
                                                "clone",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                                            |));
                                          ("opcode", M.read (| expected_opcode |));
                                          ("is_load", M.read (| is_valid |));
                                          ("load_shift_amount", M.read (| load_shift_amount |));
                                          ("store_shift_amount",
                                            M.read (|
                                              get_constant (|
                                                "p3_field::field::FieldAlgebra::ZERO",
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              |)
                                            |))
                                        ]
                                    ]
                                  |))
                              ]
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn start_offset(&self) -> usize {
              Rv32LoadStoreOpcode::CLASS_OFFSET
          }
      *)
      Definition start_offset
          (NUM_CELLS LIMB_BITS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS AB I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
                      [ NUM_CELLS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.read (|
              get_constant (| "openvm_instructions::LocalOpcode::CLASS_OFFSET", Ty.path "usize" |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS LIMB_BITS : Value.t) (AB I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB; I ]
          (Self NUM_CELLS LIMB_BITS AB I)
          (* Instance *)
          [
            ("eval", InstanceField.Method (eval NUM_CELLS LIMB_BITS AB I));
            ("start_offset", InstanceField.Method (start_offset NUM_CELLS LIMB_BITS AB I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_Tuple_array_NUM_CELLS_associated_in_trait_p3_air_air_AirBuilder___AB_Var_array_NUM_CELLS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr__where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_NUM_CELLS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_rv32im_circuit_adapters_loadstore_LoadStoreInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreAir_NUM_CELLS_LIMB_BITS.
    
    (* StructRecord
      {
        name := "LoadSignExtendCoreChip";
        const_params := [ "NUM_CELLS"; "LIMB_BITS" ];
        ty_params := [];
        fields :=
          [
            ("air",
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
                [ NUM_CELLS; LIMB_BITS ]
                []);
            ("range_checker_chip",
              Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip")
          ];
      } *)
    
    Module Impl_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreChip_NUM_CELLS_LIMB_BITS.
      Definition Self (NUM_CELLS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
          [ NUM_CELLS; LIMB_BITS ]
          [].
      
      (*
          pub fn new(range_checker_chip: SharedVariableRangeCheckerChip) -> Self {
              Self {
                  air: LoadSignExtendCoreAir::<NUM_CELLS, LIMB_BITS> {
                      range_bus: range_checker_chip.bus(),
                  },
                  range_checker_chip,
              }
          }
      *)
      Definition new
          (NUM_CELLS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ range_checker_chip ] =>
          ltac:(M.monadic
            (let range_checker_chip :=
              M.alloc (|
                Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                range_checker_chip
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip"
              [ NUM_CELLS; LIMB_BITS ]
              []
              [
                ("air",
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir"
                    [ NUM_CELLS; LIMB_BITS ]
                    []
                    [
                      ("range_bus",
                        M.call_closure (|
                          Ty.path
                            "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                          M.get_associated_function (|
                            Ty.path
                              "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                            "bus",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, range_checker_chip |) ]
                        |))
                    ]);
                ("range_checker_chip", M.read (| range_checker_chip |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (NUM_CELLS LIMB_BITS : Value.t),
        M.IsAssociatedFunction.C (Self NUM_CELLS LIMB_BITS) "new" (new NUM_CELLS LIMB_BITS).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreChip_NUM_CELLS_LIMB_BITS.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_Tuple_array_Usize_2_array_NUM_CELLS_F_F__where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_NUM_CELLS_F_F_I_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreChip_NUM_CELLS_LIMB_BITS.
      Definition Self (NUM_CELLS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
          [ NUM_CELLS; LIMB_BITS ]
          [].
      
      (*     type Record = LoadSignExtendCoreRecord<F, NUM_CELLS>; *)
      Definition _Record (NUM_CELLS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
          [ NUM_CELLS ]
          [ F ].
      
      (*     type Air = LoadSignExtendCoreAir<NUM_CELLS, LIMB_BITS>; *)
      Definition _Air (NUM_CELLS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreAir")
          [ NUM_CELLS; LIMB_BITS ]
          [].
      
      (*
          fn execute_instruction(
              &self,
              instruction: &Instruction<F>,
              _from_pc: u32,
              reads: I::Reads,
          ) -> Result<(AdapterRuntimeContext<F, I>, Self::Record)> {
              let local_opcode = Rv32LoadStoreOpcode::from_usize(
                  instruction
                      .opcode
                      .local_opcode_idx(Rv32LoadStoreOpcode::CLASS_OFFSET),
              );
      
              let (data, shift_amount) = reads.into();
              let shift_amount = shift_amount.as_canonical_u32();
              let write_data: [F; NUM_CELLS] = run_write_data_sign_extend::<_, NUM_CELLS, LIMB_BITS>(
                  local_opcode,
                  data[1],
                  data[0],
                  shift_amount,
              );
              let output = AdapterRuntimeContext::without_pc([write_data]);
      
              let most_sig_limb = match local_opcode {
                  LOADB => write_data[0],
                  LOADH => write_data[NUM_CELLS / 2 - 1],
                  _ => unreachable!(),
              }
              .as_canonical_u32();
      
              let most_sig_bit = most_sig_limb & (1 << (LIMB_BITS - 1));
              self.range_checker_chip
                  .add_count(most_sig_limb - most_sig_bit, LIMB_BITS - 1);
      
              let read_shift = shift_amount & 2;
      
              Ok((
                  output,
                  LoadSignExtendCoreRecord {
                      opcode: local_opcode,
                      most_sig_bit: most_sig_bit != 0,
                      prev_data: data[0],
                      shifted_read_data: array::from_fn(|i| {
                          data[1][(i + read_shift as usize) % NUM_CELLS]
                      }),
                      shift_amount,
                  },
              ))
          }
      *)
      Definition execute_instruction
          (NUM_CELLS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; instruction; _from_pc; reads ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                      [ NUM_CELLS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let _from_pc := M.alloc (| Ty.path "u32", _from_pc |) in
            let reads :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterInterface"
                  []
                  [ F ]
                  I
                  "Reads",
                reads
              |) in
            M.read (|
              let~ local_opcode :
                  Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode" :=
                M.call_closure (|
                  Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                  M.get_trait_method (|
                    "openvm_instructions::LocalOpcode",
                    Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                    [],
                    [],
                    "from_usize",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.path "openvm_instructions::VmOpcode",
                        "local_opcode_idx",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| instruction |) |),
                            "openvm_instructions::instruction::Instruction",
                            "opcode"
                          |)
                        |);
                        M.read (|
                          get_constant (|
                            "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                          []
                          [ F; I ];
                        Ty.apply
                          (Ty.path
                            "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                          [ NUM_CELLS ]
                          [ F ]
                      ];
                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                            []
                            [ F; I ];
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                            [ NUM_CELLS ]
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ] ];
                        F
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ] ];
                          F
                        ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ F ]
                          I
                          "Reads",
                        [],
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ] ];
                              F
                            ]
                        ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| reads |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let data :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ] ],
                            γ0_0
                          |) in
                        let shift_amount := M.copy (| F, γ0_1 |) in
                        M.read (|
                          let~ shift_amount : Ty.path "u32" :=
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_trait_method (|
                                "p3_field::field::PrimeField32",
                                F,
                                [],
                                [],
                                "as_canonical_u32",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, shift_amount |) ]
                            |) in
                          let~ write_data : Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ] :=
                            M.call_closure (|
                              Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ],
                              M.get_function (|
                                "openvm_rv32im_circuit::load_sign_extend::core::run_write_data_sign_extend",
                                [ NUM_CELLS; LIMB_BITS ],
                                [ F ]
                              |),
                              [
                                M.read (| local_opcode |);
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    data,
                                    Value.Integer IntegerKind.Usize 1
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    data,
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |);
                                M.read (| shift_amount |)
                              ]
                            |) in
                          let~ output :
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                []
                                [ F; I ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                []
                                [ F; I ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                  []
                                  [ F; I ],
                                "without_pc",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ] ]
                                ]
                              |),
                              [ Value.Array [ M.read (| write_data |) ] ]
                            |) in
                          let~ most_sig_limb : Ty.path "u32" :=
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_trait_method (|
                                "p3_field::field::PrimeField32",
                                F,
                                [],
                                [],
                                "as_canonical_u32",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    F,
                                    M.match_operator (|
                                      F,
                                      local_opcode,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                              |) in
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                write_data,
                                                Value.Integer IntegerKind.Usize 0
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADH"
                                              |) in
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                write_data,
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.div,
                                                      [ NUM_CELLS; Value.Integer IntegerKind.Usize 2
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.never_to_any (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::panic",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  mk_str (|
                                                    "internal error: entered unreachable code"
                                                  |)
                                                ]
                                              |)
                                            |)))
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |) in
                          let~ most_sig_bit : Ty.path "u32" :=
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.bit_and,
                              [
                                M.read (| most_sig_limb |);
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.shl,
                                  [
                                    Value.Integer IntegerKind.U32 1;
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                "add_count",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip",
                                    "range_checker_chip"
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.sub,
                                  [ M.read (| most_sig_limb |); M.read (| most_sig_bit |) ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.sub,
                                  [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                                |)
                              ]
                            |) in
                          let~ read_shift : Ty.path "u32" :=
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.bit_and,
                              [ M.read (| shift_amount |); Value.Integer IntegerKind.U32 2 ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                      []
                                      [ F; I ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                                      [ NUM_CELLS ]
                                      [ F ]
                                  ];
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ],
                            Value.StructTuple
                              "core::result::Result::Ok"
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                      []
                                      [ F; I ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord")
                                      [ NUM_CELLS ]
                                      [ F ]
                                  ];
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ]
                              [
                                Value.Tuple
                                  [
                                    M.read (| output |);
                                    Value.mkStructRecord
                                      "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord"
                                      [ NUM_CELLS ]
                                      [ F ]
                                      [
                                        ("opcode", M.read (| local_opcode |));
                                        ("most_sig_bit",
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ne,
                                            [
                                              M.read (| most_sig_bit |);
                                              Value.Integer IntegerKind.U32 0
                                            ]
                                          |));
                                        ("prev_data",
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              data,
                                              Value.Integer IntegerKind.Usize 0
                                            |)
                                          |));
                                        ("shifted_read_data",
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ],
                                            M.get_function (|
                                              "core::array::from_fn",
                                              [ NUM_CELLS ],
                                              [ F; Ty.function [ Ty.path "usize" ] F ]
                                            |),
                                            [
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          F,
                                                          M.alloc (| Ty.path "usize", α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let i :=
                                                                  M.copy (| Ty.path "usize", γ |) in
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.SubPointer.get_array_field (|
                                                                      data,
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    |),
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.rem,
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.add,
                                                                          [
                                                                            M.read (| i |);
                                                                            M.cast
                                                                              (Ty.path "usize")
                                                                              (M.read (|
                                                                                read_shift
                                                                              |))
                                                                          ]
                                                                        |);
                                                                        NUM_CELLS
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |));
                                        ("shift_amount", M.read (| shift_amount |))
                                      ]
                                  ]
                              ]
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_opcode_name(&self, opcode: usize) -> String {
              format!(
                  "{:?}",
                  Rv32LoadStoreOpcode::from_usize(opcode - Rv32LoadStoreOpcode::CLASS_OFFSET)
              )
          }
      *)
      Definition get_opcode_name
          (NUM_CELLS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; opcode ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                      [ NUM_CELLS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let opcode := M.alloc (| Ty.path "usize", opcode |) in
            M.call_closure (|
              Ty.path "alloc::string::String",
              M.get_function (| "core::hint::must_use", [], [ Ty.path "alloc::string::String" ] |),
              [
                M.read (|
                  let~ res : Ty.path "alloc::string::String" :=
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_function (| "alloc::fmt::format", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "" |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [],
                                            [
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                    M.call_closure (|
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                      M.get_trait_method (|
                                                        "openvm_instructions::LocalOpcode",
                                                        Ty.path
                                                          "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                                        [],
                                                        [],
                                                        "from_usize",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (| opcode |);
                                                            M.read (|
                                                              get_constant (|
                                                                "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                                                Ty.path "usize"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  res
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(&self, row_slice: &mut [F], record: Self::Record) {
              let core_cols: &mut LoadSignExtendCoreCols<F, NUM_CELLS> = row_slice.borrow_mut();
              let opcode = record.opcode;
              let shift = record.shift_amount;
              core_cols.opcode_loadb_flag0 = F::from_bool(opcode == LOADB && (shift & 1) == 0);
              core_cols.opcode_loadb_flag1 = F::from_bool(opcode == LOADB && (shift & 1) == 1);
              core_cols.opcode_loadh_flag = F::from_bool(opcode == LOADH);
              core_cols.shift_most_sig_bit = F::from_canonical_u32((shift & 2) >> 1);
              core_cols.data_most_sig_bit = F::from_bool(record.most_sig_bit);
              core_cols.prev_data = record.prev_data;
              core_cols.shifted_read_data = record.shifted_read_data;
          }
      *)
      Definition generate_trace_row
          (NUM_CELLS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; row_slice; record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                      [ NUM_CELLS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmCoreChip"
                  []
                  [ F; I ]
                  (Ty.apply
                    (Ty.path
                      "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                    [ NUM_CELLS; LIMB_BITS ]
                    [])
                  "Record",
                record
              |) in
            M.read (|
              let~ core_cols :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                        [ NUM_CELLS ]
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                            [ NUM_CELLS ]
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols")
                            [ NUM_CELLS ]
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ opcode : Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    record,
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                    "opcode"
                  |)
                |) in
              let~ shift : Ty.path "u32" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    record,
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                    "shift_amount"
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                    "opcode_loadb_flag0"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      LogicalOp.and (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_trait_method (|
                            "core::cmp::PartialEq",
                            Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                            [],
                            [ Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                            ],
                            "eq",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, opcode |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.path
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                Value.StructTuple
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                  []
                                  []
                                  []
                              |)
                            |)
                          ]
                        |),
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.bit_and,
                                [ M.read (| shift |); Value.Integer IntegerKind.U32 1 ]
                              |);
                              Value.Integer IntegerKind.U32 0
                            ]
                          |)))
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                    "opcode_loadb_flag1"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      LogicalOp.and (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_trait_method (|
                            "core::cmp::PartialEq",
                            Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                            [],
                            [ Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                            ],
                            "eq",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, opcode |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.path
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                                Value.StructTuple
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                  []
                                  []
                                  []
                              |)
                            |)
                          ]
                        |),
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.bit_and,
                                [ M.read (| shift |); Value.Integer IntegerKind.U32 1 ]
                              |);
                              Value.Integer IntegerKind.U32 1
                            ]
                          |)))
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                    "opcode_loadh_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, opcode |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADH"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                    "shift_most_sig_bit"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_canonical_u32",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.shr,
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.bit_and,
                            [ M.read (| shift |); Value.Integer IntegerKind.U32 2 ]
                          |);
                          Value.Integer IntegerKind.I32 1
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                    "data_most_sig_bit"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          record,
                          "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                          "most_sig_bit"
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                    "prev_data"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                      "prev_data"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreCols",
                    "shifted_read_data"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreRecord",
                      "shifted_read_data"
                    |)
                  |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air
          (NUM_CELLS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_CELLS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip")
                      [ NUM_CELLS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::load_sign_extend::core::LoadSignExtendCoreChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_CELLS LIMB_BITS : Value.t) (F I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F; I ]
          (Self NUM_CELLS LIMB_BITS F I)
          (* Instance *)
          [
            ("Record", InstanceField.Ty (_Record NUM_CELLS LIMB_BITS F I));
            ("Air", InstanceField.Ty (_Air NUM_CELLS LIMB_BITS F I));
            ("execute_instruction",
              InstanceField.Method (execute_instruction NUM_CELLS LIMB_BITS F I));
            ("get_opcode_name", InstanceField.Method (get_opcode_name NUM_CELLS LIMB_BITS F I));
            ("generate_trace_row",
              InstanceField.Method (generate_trace_row NUM_CELLS LIMB_BITS F I));
            ("air", InstanceField.Method (air NUM_CELLS LIMB_BITS F I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_Tuple_array_Usize_2_array_NUM_CELLS_F_F__where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_NUM_CELLS_F_F_I_for_openvm_rv32im_circuit_load_sign_extend_core_LoadSignExtendCoreChip_NUM_CELLS_LIMB_BITS.
    
    (*
    pub(super) fn run_write_data_sign_extend<
        F: PrimeField32,
        const NUM_CELLS: usize,
        const LIMB_BITS: usize,
    >(
        opcode: Rv32LoadStoreOpcode,
        read_data: [F; NUM_CELLS],
        _prev_data: [F; NUM_CELLS],
        shift: u32,
    ) -> [F; NUM_CELLS] {
        let shift = shift as usize;
        let mut write_data = read_data;
        match (opcode, shift) {
            (LOADH, 0) | (LOADH, 2) => {
                let ext = read_data[NUM_CELLS / 2 - 1 + shift].as_canonical_u32();
                let ext = (ext >> (LIMB_BITS - 1)) * ((1 << LIMB_BITS) - 1);
                for cell in write_data.iter_mut().take(NUM_CELLS).skip(NUM_CELLS / 2) {
                    *cell = F::from_canonical_u32(ext);
                }
                write_data[0..NUM_CELLS / 2]
                    .copy_from_slice(&read_data[shift..(NUM_CELLS / 2 + shift)]);
            }
            (LOADB, 0) | (LOADB, 1) | (LOADB, 2) | (LOADB, 3) => {
                let ext = read_data[shift].as_canonical_u32();
                let ext = (ext >> (LIMB_BITS - 1)) * ((1 << LIMB_BITS) - 1);
                for cell in write_data.iter_mut().take(NUM_CELLS).skip(1) {
                    *cell = F::from_canonical_u32(ext);
                }
                write_data[0] = read_data[shift];
            }
            // Currently the adapter AIR requires `ptr_val` to be aligned to the data size in bytes.
            // The circuit requires that `shift = ptr_val % 4` so that `ptr_val - shift` is a multiple of 4.
            // This requirement is non-trivial to remove, because we use it to ensure that `ptr_val - shift + 4 <= 2^pointer_max_bits`.
            _ => unreachable!(
                "unaligned memory access not supported by this execution environment: {opcode:?}, shift: {shift}"
            ),
        };
        write_data
    }
    *)
    Definition run_write_data_sign_extend
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [ NUM_CELLS; LIMB_BITS ], [ F ], [ opcode; read_data; _prev_data; shift ] =>
        ltac:(M.monadic
          (let opcode :=
            M.alloc (|
              Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
              opcode
            |) in
          let read_data :=
            M.alloc (| Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ], read_data |) in
          let _prev_data :=
            M.alloc (| Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ], _prev_data |) in
          let shift := M.alloc (| Ty.path "u32", shift |) in
          M.read (|
            let~ shift : Ty.path "usize" := M.cast (Ty.path "usize") (M.read (| shift |)) in
            let~ write_data : Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ] :=
              M.read (| read_data |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode";
                      Ty.path "usize"
                    ],
                  Value.Tuple [ M.read (| opcode |); M.read (| shift |) ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (Ty.tuple []) (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADH"
                                |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_1 |),
                                  Value.Integer IntegerKind.Usize 0
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADH"
                                |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_1 |),
                                  Value.Integer IntegerKind.Usize 2
                                |) in
                              Value.Tuple []))
                        ],
                        fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [] =>
                              ltac:(M.monadic
                                (M.read (|
                                  let~ ext : Ty.path "u32" :=
                                    M.call_closure (|
                                      Ty.path "u32",
                                      M.get_trait_method (|
                                        "p3_field::field::PrimeField32",
                                        F,
                                        [],
                                        [],
                                        "as_canonical_u32",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_array_field (|
                                            read_data,
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.div,
                                                      [ NUM_CELLS; Value.Integer IntegerKind.Usize 2
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                M.read (| shift |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |) in
                                  let~ ext : Ty.path "u32" :=
                                    M.call_closure (|
                                      Ty.path "u32",
                                      BinOp.Wrap.mul,
                                      [
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.shr,
                                          [
                                            M.read (| ext |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.sub,
                                              [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.sub,
                                          [
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.shl,
                                              [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                            |);
                                            Value.Integer IntegerKind.U32 1
                                          ]
                                        |)
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.read (|
                                      M.use
                                        (M.alloc (|
                                          Ty.tuple [],
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::skip::Skip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::take::Take")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::skip::Skip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::take::Take")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [ F ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::skip::Skip")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::take::Take")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::skip::Skip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::take::Take")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ F ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::take::Take")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ F ]
                                                        ],
                                                      [],
                                                      [],
                                                      "skip",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::take::Take")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ F ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ F ],
                                                          [],
                                                          [],
                                                          "take",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ F ],
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [] [ F ],
                                                              "iter_mut",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                M.pointer_coercion
                                                                  M.PointerCoercion.Unsize
                                                                  (Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [ NUM_CELLS ]
                                                                        [ F ]
                                                                    ])
                                                                  (Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ F ]
                                                                    ]),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    write_data
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          NUM_CELLS
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.div,
                                                        [
                                                          NUM_CELLS;
                                                          Value.Integer IntegerKind.Usize 2
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::skip::Skip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::take::Take")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ F ]
                                                            ]
                                                        ],
                                                      γ
                                                    |) in
                                                  M.read (|
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.apply (Ty.path "&mut") [] [ F ]
                                                                ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::skip::Skip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::take::Take")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::IterMut")
                                                                            []
                                                                            [ F ]
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let cell :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [ F ],
                                                                      γ0_0
                                                                    |) in
                                                                  M.read (|
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.write (|
                                                                        M.deref (|
                                                                          M.read (| cell |)
                                                                        |),
                                                                        M.call_closure (|
                                                                          F,
                                                                          M.get_trait_method (|
                                                                            "p3_field::field::FieldAlgebra",
                                                                            F,
                                                                            [],
                                                                            [],
                                                                            "from_canonical_u32",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [ M.read (| ext |) ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        |))
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ F ],
                                        "copy_from_slice",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                              M.get_trait_method (|
                                                "core::ops::index::IndexMut",
                                                Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ]
                                                ],
                                                "index_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.MutRef, write_data |);
                                                Value.mkStructRecord
                                                  "core::ops::range::Range"
                                                  []
                                                  [ Ty.path "usize" ]
                                                  [
                                                    ("start", Value.Integer IntegerKind.Usize 0);
                                                    ("end_",
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.div,
                                                        [
                                                          NUM_CELLS;
                                                          Value.Integer IntegerKind.Usize 2
                                                        ]
                                                      |))
                                                  ]
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply (Ty.path "array") [ NUM_CELLS ] [ F ],
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        []
                                                        [ Ty.path "usize" ]
                                                    ],
                                                    "index",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.Ref, read_data |);
                                                    Value.mkStructRecord
                                                      "core::ops::range::Range"
                                                      []
                                                      [ Ty.path "usize" ]
                                                      [
                                                        ("start", M.read (| shift |));
                                                        ("end_",
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.div,
                                                                [
                                                                  NUM_CELLS;
                                                                  Value.Integer IntegerKind.Usize 2
                                                                ]
                                                              |);
                                                              M.read (| shift |)
                                                            ]
                                                          |))
                                                      ]
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (Ty.tuple []) (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_1 |),
                                  Value.Integer IntegerKind.Usize 0
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_1 |),
                                  Value.Integer IntegerKind.Usize 1
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_1 |),
                                  Value.Integer IntegerKind.Usize 2
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_1 |),
                                  Value.Integer IntegerKind.Usize 3
                                |) in
                              Value.Tuple []))
                        ],
                        fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [] =>
                              ltac:(M.monadic
                                (M.read (|
                                  let~ ext : Ty.path "u32" :=
                                    M.call_closure (|
                                      Ty.path "u32",
                                      M.get_trait_method (|
                                        "p3_field::field::PrimeField32",
                                        F,
                                        [],
                                        [],
                                        "as_canonical_u32",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_array_field (|
                                            read_data,
                                            M.read (| shift |)
                                          |)
                                        |)
                                      ]
                                    |) in
                                  let~ ext : Ty.path "u32" :=
                                    M.call_closure (|
                                      Ty.path "u32",
                                      BinOp.Wrap.mul,
                                      [
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.shr,
                                          [
                                            M.read (| ext |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.sub,
                                              [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.sub,
                                          [
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.shl,
                                              [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                            |);
                                            Value.Integer IntegerKind.U32 1
                                          ]
                                        |)
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.read (|
                                      M.use
                                        (M.alloc (|
                                          Ty.tuple [],
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::skip::Skip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::take::Take")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::skip::Skip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::take::Take")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [ F ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::skip::Skip")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::take::Take")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::skip::Skip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::take::Take")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ F ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::take::Take")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ F ]
                                                        ],
                                                      [],
                                                      [],
                                                      "skip",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::take::Take")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ F ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ F ],
                                                          [],
                                                          [],
                                                          "take",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ F ],
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [] [ F ],
                                                              "iter_mut",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                M.pointer_coercion
                                                                  M.PointerCoercion.Unsize
                                                                  (Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [ NUM_CELLS ]
                                                                        [ F ]
                                                                    ])
                                                                  (Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ F ]
                                                                    ]),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    write_data
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          NUM_CELLS
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::skip::Skip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::take::Take")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ F ]
                                                            ]
                                                        ],
                                                      γ
                                                    |) in
                                                  M.read (|
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.apply (Ty.path "&mut") [] [ F ]
                                                                ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::skip::Skip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::take::Take")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::IterMut")
                                                                            []
                                                                            [ F ]
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let cell :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [ F ],
                                                                      γ0_0
                                                                    |) in
                                                                  M.read (|
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.write (|
                                                                        M.deref (|
                                                                          M.read (| cell |)
                                                                        |),
                                                                        M.call_closure (|
                                                                          F,
                                                                          M.get_trait_method (|
                                                                            "p3_field::field::FieldAlgebra",
                                                                            F,
                                                                            [],
                                                                            [],
                                                                            "from_canonical_u32",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [ M.read (| ext |) ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        |))
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.write (|
                                      M.SubPointer.get_array_field (|
                                        write_data,
                                        Value.Integer IntegerKind.Usize 0
                                      |),
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          read_data,
                                          M.read (| shift |)
                                        |)
                                      |)
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 2
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                        Value.Array
                                          [
                                            mk_str (|
                                              "internal error: entered unreachable code: unaligned memory access not supported by this execution environment: "
                                            |);
                                            mk_str (| ", shift: " |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.path "core::fmt::rt::Argument" ],
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [],
                                                [
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode"
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.Ref, opcode |)
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.Ref, shift |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |) in
            write_data
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_run_write_data_sign_extend :
      M.IsFunction.C
        "openvm_rv32im_circuit::load_sign_extend::core::run_write_data_sign_extend"
        run_write_data_sign_extend.
    Admitted.
    Global Typeclasses Opaque run_write_data_sign_extend.
  End core.
End load_sign_extend.
