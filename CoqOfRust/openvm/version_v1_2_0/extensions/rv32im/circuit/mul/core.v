(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module mul.
  Module core.
    (* StructRecord
      {
        name := "MultiplicationCoreCols";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [ "T" ];
        fields :=
          [
            ("a", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("b", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("c", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("is_valid", T)
          ];
      } *)
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_mul_core_MultiplicationCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                              [ NUM_LIMBS; LIMB_BITS ]
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                  [ NUM_LIMBS; LIMB_BITS ]
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                    [ NUM_LIMBS; LIMB_BITS ]
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                                              [ NUM_LIMBS; LIMB_BITS ]
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                  [ NUM_LIMBS; LIMB_BITS ]
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
              [ NUM_LIMBS; LIMB_BITS ]
              [ T ]
          ]
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_mul_core_MultiplicationCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_mul_core_MultiplicationCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                                  [ NUM_LIMBS; LIMB_BITS ]
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                          [ NUM_LIMBS; LIMB_BITS ]
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                        [ NUM_LIMBS; LIMB_BITS ]
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                [ NUM_LIMBS; LIMB_BITS ]
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                          [ NUM_LIMBS; LIMB_BITS ]
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                                                  [ NUM_LIMBS; LIMB_BITS ]
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
              [ NUM_LIMBS; LIMB_BITS ]
              [ T ]
          ]
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *)
          [ ("borrow_mut", InstanceField.Method (borrow_mut NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_mul_core_MultiplicationCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_mul_core_MultiplicationCoreCols_NUM_LIMBS_LIMB_BITS_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
          [ NUM_LIMBS; LIMB_BITS ]
          [ T ].
      
      (* AlignedBorrow *)
      Definition width
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                    [ NUM_LIMBS; LIMB_BITS ]
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsAssociatedFunction.C (Self NUM_LIMBS LIMB_BITS T) "width" (width NUM_LIMBS LIMB_BITS T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_mul_core_MultiplicationCoreCols_NUM_LIMBS_LIMB_BITS_T.
    
    (* StructRecord
      {
        name := "MultiplicationCoreAir";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [];
        fields :=
          [
            ("bus",
              Ty.apply
                (Ty.path "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                [ Value.Integer IntegerKind.Usize 2 ]
                []);
            ("offset", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (* Clone *)
      Definition clone
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                [ NUM_LIMBS; LIMB_BITS ]
                [],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_LIMBS LIMB_BITS)) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MultiplicationCoreAir" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bus" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          []
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir",
                            "bus"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "offset" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir",
                                "offset"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS LIMB_BITS)) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          fn width(&self) -> usize {
              MultiplicationCoreCols::<F, NUM_LIMBS, LIMB_BITS>::width()
          }
      *)
      Definition width
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                  [ NUM_LIMBS; LIMB_BITS ]
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_LIMBS LIMB_BITS F)
          (* Instance *) [ ("width", InstanceField.Method (width NUM_LIMBS LIMB_BITS F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::rap::BaseAirWithPublicValues"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_LIMBS LIMB_BITS F)
          (* Instance *) [].
    End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_2_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_MinimalInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (AB I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local_core: &[AB::Var],
              _from_pc: AB::Var,
          ) -> AdapterAirContext<AB::Expr, I> {
              let cols: &MultiplicationCoreCols<_, NUM_LIMBS, LIMB_BITS> = local_core.borrow();
              builder.assert_bool(cols.is_valid);
      
              let a = &cols.a;
              let b = &cols.b;
              let c = &cols.c;
      
              // Define carry[i] = (sum_{k=0}^{i} b[k] * c[i - k] + carry[i - 1] - a[i]) / 2^LIMB_BITS.
              // If 0 <= a[i], carry[i] < 2^LIMB_BITS, it can be proven that a[i] = sum_{k=0}^{i} (b[k] *
              // c[i - k]) % 2^LIMB_BITS as necessary.
              let mut carry: [AB::Expr; NUM_LIMBS] = array::from_fn(|_| AB::Expr::ZERO);
              let carry_divide = AB::F::from_canonical_u32(1 << LIMB_BITS).inverse();
      
              for i in 0..NUM_LIMBS {
                  let expected_limb = if i == 0 {
                      AB::Expr::ZERO
                  } else {
                      carry[i - 1].clone()
                  } + (0..=i).fold(AB::Expr::ZERO, |acc, k| acc + (b[k] * c[i - k]));
                  carry[i] = AB::Expr::from(carry_divide) * (expected_limb - a[i]);
              }
      
              for (a, carry) in a.iter().zip(carry.iter()) {
                  self.bus
                      .send(vec![( *a).into(), carry.clone()])
                      .eval(builder, cols.is_valid);
              }
      
              let expected_opcode = VmCoreAir::<AB, I>::opcode_to_global_expr(self, MulOpcode::MUL);
      
              AdapterAirContext {
                  to_pc: None,
                  reads: [cols.b.map(Into::into), cols.c.map(Into::into)].into(),
                  writes: [cols.a.map(Into::into)].into(),
                  instruction: MinimalInstruction {
                      is_valid: cols.is_valid.into(),
                      opcode: expected_opcode,
                  }
                  .into(),
              }
          }
      *)
      Definition eval
          (NUM_LIMBS LIMB_BITS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS AB I in
        match ε, τ, α with
        | [], [], [ self; builder; local_core; _from_pc ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local_core :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local_core
              |) in
            let _from_pc :=
              M.alloc (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                _from_pc
              |) in
            M.read (|
              let~ cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local_core |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                        "is_valid"
                      |)
                    |)
                  ]
                |) in
              let~ a :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                    "a"
                  |)
                |) in
              let~ b :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                    "b"
                  |)
                |) in
              let~ c :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                    "c"
                  |)
                |) in
              let~ carry :
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ NUM_LIMBS ],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [ Ty.path "usize" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (| Ty.path "usize", α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ carry_divide : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                  M.get_trait_method (|
                    "p3_field::field::Field",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                    [],
                    [],
                    "inverse",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS)
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ expected_limb :
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr" :=
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.match_operator (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (| i |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0
                                                                      ]
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ZERO",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_array_field (|
                                                                      carry,
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.sub,
                                                                        [
                                                                          M.read (| i |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::range::RangeInclusive")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "fold",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.function
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.path "usize"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::range::RangeInclusive")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::range::RangeInclusive")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              "new",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              Value.Integer IntegerKind.Usize 0;
                                                              M.read (| i |)
                                                            ]
                                                          |);
                                                          M.read (|
                                                            get_constant (|
                                                              "p3_field::field::FieldAlgebra::ZERO",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr"
                                                            |)
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0; α1 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      M.alloc (|
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr",
                                                                        α0
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let acc :=
                                                                              M.copy (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                γ
                                                                              |) in
                                                                            M.match_operator (|
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr",
                                                                              M.alloc (|
                                                                                Ty.path "usize",
                                                                                α1
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let k :=
                                                                                      M.copy (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        γ
                                                                                      |) in
                                                                                    M.call_closure (|
                                                                                      Ty.associated_in_trait
                                                                                        "p3_air::air::AirBuilder"
                                                                                        []
                                                                                        []
                                                                                        AB
                                                                                        "Expr",
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Add",
                                                                                        Ty.associated_in_trait
                                                                                          "p3_air::air::AirBuilder"
                                                                                          []
                                                                                          []
                                                                                          AB
                                                                                          "Expr",
                                                                                        [],
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr"
                                                                                        ],
                                                                                        "add",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          acc
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr",
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            Ty.associated_in_trait
                                                                                              "p3_air::air::AirBuilder"
                                                                                              []
                                                                                              []
                                                                                              AB
                                                                                              "Var",
                                                                                            [],
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Var"
                                                                                            ],
                                                                                            "mul",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    b
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  k
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    c
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.sub,
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      k
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      carry,
                                                      M.read (| i |)
                                                    |),
                                                    M.call_closure (|
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Mul",
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                        "mul",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F"
                                                            ],
                                                            "from",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| carry_divide |) ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Sub",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var"
                                                            ],
                                                            "sub",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (| expected_limb |);
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| a |) |),
                                                                M.read (| i |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ];
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  [],
                                  [],
                                  "zip",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ]),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| a |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ]),
                                        [ M.borrow (| Pointer.Kind.Ref, carry |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let a :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ],
                                                  γ1_0
                                                |) in
                                              let carry :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ],
                                                  γ1_1
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                      "eval",
                                                      [],
                                                      [
                                                        AB;
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "send",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir",
                                                              "bus"
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                ],
                                                              "into_vec",
                                                              [],
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                M.pointer_coercion
                                                                  M.PointerCoercion.Unsize
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ])
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::boxed::Box")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "new",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::convert::Into",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Var",
                                                                                  [],
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_air::air::AirBuilder"
                                                                                      []
                                                                                      []
                                                                                      AB
                                                                                      "Expr"
                                                                                  ],
                                                                                  "into",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (| a |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::clone::Clone",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Expr",
                                                                                  [],
                                                                                  [],
                                                                                  "clone",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        carry
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| cols |) |),
                                                          "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                                                          "is_valid"
                                                        |)
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ expected_opcode :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "openvm_circuit::arch::integration_api::VmCoreAir",
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [],
                    [],
                    [ AB; I ],
                    "opcode_to_global_expr",
                    [],
                    [ Ty.path "openvm_rv32im_transpiler::instructions::MulOpcode" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    Value.StructTuple
                      "openvm_rv32im_transpiler::instructions::MulOpcode::MUL"
                      []
                      []
                      []
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ],
                Value.mkStructRecord
                  "openvm_circuit::arch::integration_api::AdapterAirContext"
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ]
                  [
                    ("to_pc",
                      Value.StructTuple
                        "core::option::Option::None"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                        []);
                    ("reads",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "Reads",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_LIMBS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "Reads"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                                      "b"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                                      "c"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |)
                            ]
                        ]
                      |));
                    ("writes",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "Writes",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_LIMBS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "Writes"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                                      "a"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |)
                            ]
                        ]
                      |));
                    ("instruction",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "ProcessedInstruction",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "ProcessedInstruction"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.mkStructRecord
                            "openvm_circuit::arch::integration_api::MinimalInstruction"
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            [
                              ("is_valid",
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| cols |) |),
                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                                        "is_valid"
                                      |)
                                    |)
                                  ]
                                |));
                              ("opcode", M.read (| expected_opcode |))
                            ]
                        ]
                      |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn start_offset(&self) -> usize {
              self.offset
          }
      *)
      Definition start_offset
          (NUM_LIMBS LIMB_BITS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS AB I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir",
                "offset"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (AB I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB; I ]
          (Self NUM_LIMBS LIMB_BITS AB I)
          (* Instance *)
          [
            ("eval", InstanceField.Method (eval NUM_LIMBS LIMB_BITS AB I));
            ("start_offset", InstanceField.Method (start_offset NUM_LIMBS LIMB_BITS AB I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_2_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_MinimalInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreAir_NUM_LIMBS_LIMB_BITS.
    
    (* StructRecord
      {
        name := "MultiplicationCoreChip";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [];
        fields :=
          [
            ("air",
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                [ NUM_LIMBS; LIMB_BITS ]
                []);
            ("range_tuple_chip",
              Ty.apply
                (Ty.path "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                [ Value.Integer IntegerKind.Usize 2 ]
                [])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreChip_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "MultiplicationCoreChip" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "air" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
                          [ NUM_LIMBS; LIMB_BITS ]
                          []
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip",
                            "air"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "range_tuple_chip" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              []
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  []
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip",
                                "range_tuple_chip"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS LIMB_BITS)) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreChip_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_openvm_rv32im_circuit_mul_core_MultiplicationCoreChip_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          pub fn new(range_tuple_chip: SharedRangeTupleCheckerChip<2>, offset: usize) -> Self {
              // The RangeTupleChecker is used to range check (a[i], carry[i]) pairs where 0 <= i
              // < NUM_LIMBS. a[i] must have LIMB_BITS bits and carry[i] is the sum of i + 1 bytes
              // (with LIMB_BITS bits).
              debug_assert!(
                  range_tuple_chip.sizes()[0] == 1 << LIMB_BITS,
                  "First element of RangeTupleChecker must have size {}",
                  1 << LIMB_BITS
              );
              debug_assert!(
                  range_tuple_chip.sizes()[1] >= (1 << LIMB_BITS) * NUM_LIMBS as u32,
                  "Second element of RangeTupleChecker must have size of at least {}",
                  (1 << LIMB_BITS) * NUM_LIMBS as u32
              );
      
              Self {
                  air: MultiplicationCoreAir {
                      bus: *range_tuple_chip.bus(),
                      offset,
                  },
                  range_tuple_chip,
              }
          }
      *)
      Definition new
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ range_tuple_chip; offset ] =>
          ltac:(M.monadic
            (let range_tuple_chip :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [],
                range_tuple_chip
              |) in
            let offset := M.alloc (| Ty.path "usize", offset |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                              [ Ty.path "u32" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "sizes",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            range_tuple_chip
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    Value.Integer IntegerKind.Usize 0
                                                  |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shl,
                                                  [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              [
                                                Value.Integer IntegerKind.Usize 1;
                                                Value.Integer IntegerKind.Usize 1
                                              ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "First element of RangeTupleChecker must have size "
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [ Ty.path "core::fmt::rt::Argument" ],
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              "new_display",
                                                              [],
                                                              [ Ty.path "i32" ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.path "i32",
                                                                      M.call_closure (|
                                                                        Ty.path "i32",
                                                                        BinOp.Wrap.shl,
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.I32
                                                                            1;
                                                                          LIMB_BITS
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.ge,
                                              [
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                              [ Ty.path "u32" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "sizes",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            range_tuple_chip
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.mul,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.shl,
                                                      [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                                    |);
                                                    M.cast (Ty.path "u32") NUM_LIMBS
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              [
                                                Value.Integer IntegerKind.Usize 1;
                                                Value.Integer IntegerKind.Usize 1
                                              ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "Second element of RangeTupleChecker must have size of at least "
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [ Ty.path "core::fmt::rt::Argument" ],
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              "new_display",
                                                              [],
                                                              [ Ty.path "u32" ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.path "u32",
                                                                      M.call_closure (|
                                                                        Ty.path "u32",
                                                                        BinOp.Wrap.mul,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u32",
                                                                            BinOp.Wrap.shl,
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                1;
                                                                              LIMB_BITS
                                                                            ]
                                                                          |);
                                                                          M.cast
                                                                            (Ty.path "u32")
                                                                            NUM_LIMBS
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                  [ NUM_LIMBS; LIMB_BITS ]
                  [],
                Value.mkStructRecord
                  "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip"
                  [ NUM_LIMBS; LIMB_BITS ]
                  []
                  [
                    ("air",
                      Value.mkStructRecord
                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir"
                        [ NUM_LIMBS; LIMB_BITS ]
                        []
                        [
                          ("bus",
                            M.read (|
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        []
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [],
                                    "bus",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, range_tuple_chip |) ]
                                |)
                              |)
                            |));
                          ("offset", M.read (| offset |))
                        ]);
                    ("range_tuple_chip", M.read (| range_tuple_chip |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsAssociatedFunction.C (Self NUM_LIMBS LIMB_BITS) "new" (new NUM_LIMBS LIMB_BITS).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_mul_core_MultiplicationCoreChip_NUM_LIMBS_LIMB_BITS.
    
    (* StructRecord
      {
        name := "MultiplicationCoreRecord";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [ "T" ];
        fields :=
          [
            ("a", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("b", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("c", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreRecord_NUM_LIMBS_LIMB_BITS_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
          [ NUM_LIMBS; LIMB_BITS ]
          [ T ].
      
      (* Clone *)
      Definition clone
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord"
              [ NUM_LIMBS; LIMB_BITS ]
              [ T ]
              [
                ("a",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                              "a"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("b",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                              "b"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("c",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                              "c"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreRecord_NUM_LIMBS_LIMB_BITS_T.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreRecord_NUM_LIMBS_LIMB_BITS_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
          [ NUM_LIMBS; LIMB_BITS ]
          [ T ].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "MultiplicationCoreRecord" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "a" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                            "a"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "b" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                            "b"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "c" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                                "c"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreRecord_NUM_LIMBS_LIMB_BITS_T.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_where_serde_de_DeserializeOwned_T_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreRecord_NUM_LIMBS_LIMB_BITS_T.
        Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
            [ NUM_LIMBS; LIMB_BITS ]
            [ T ].
        
        (* Serialize *)
        Definition serialize
            (NUM_LIMBS LIMB_BITS : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ T ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "MultiplicationCoreRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.cast (Ty.path "usize") (Value.Bool false);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mul::core::_::serialize::__SerializeWith")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "a" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::mul::core::_::serialize::__SerializeWith")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::mul::core::_::serialize::__SerializeWith"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                                                            "a"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mul::core::_::serialize::__SerializeWith'1")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "b" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::mul::core::_::serialize::__SerializeWith'1")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::mul::core::_::serialize::__SerializeWith'1"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                                                            "b"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mul::core::_::serialize::__SerializeWith'2")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "c" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::mul::core::_::serialize::__SerializeWith'2")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::mul::core::_::serialize::__SerializeWith'2"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                                                            "c"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_LIMBS LIMB_BITS T)
            (* Instance *)
            [ ("serialize", InstanceField.Method (serialize NUM_LIMBS LIMB_BITS T)) ].
      End Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_where_serde_de_DeserializeOwned_T_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreRecord_NUM_LIMBS_LIMB_BITS_T.
      Module Impl_serde_de_Deserialize_where_serde_ser_Serialize_T_where_serde_de_DeserializeOwned_T_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreRecord_NUM_LIMBS_LIMB_BITS_T.
        Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
            [ NUM_LIMBS; LIMB_BITS ]
            [ T ].
        
        (* Deserialize *)
        Definition deserialize
            (NUM_LIMBS LIMB_BITS : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::_'1::deserialize::__Visitor")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "MultiplicationCoreRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::mul::core::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::mul::core::_'1::deserialize::__Visitor"
                    [ NUM_LIMBS; LIMB_BITS ]
                    [ T ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                              [ NUM_LIMBS; LIMB_BITS ]
                              [ T ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_LIMBS LIMB_BITS T)
            (* Instance *)
            [ ("deserialize", InstanceField.Method (deserialize NUM_LIMBS LIMB_BITS T)) ].
      End Impl_serde_de_Deserialize_where_serde_ser_Serialize_T_where_serde_de_DeserializeOwned_T_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreRecord_NUM_LIMBS_LIMB_BITS_T.
    End underscore.
    
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_array_Usize_2_array_NUM_LIMBS_F_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_NUM_LIMBS_F_F_I_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreChip_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*     type Record = MultiplicationCoreRecord<F, NUM_LIMBS, LIMB_BITS>; *)
      Definition _Record (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
          [ NUM_LIMBS; LIMB_BITS ]
          [ F ].
      
      (*     type Air = MultiplicationCoreAir<NUM_LIMBS, LIMB_BITS>; *)
      Definition _Air (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          fn execute_instruction(
              &self,
              instruction: &Instruction<F>,
              _from_pc: u32,
              reads: I::Reads,
          ) -> Result<(AdapterRuntimeContext<F, I>, Self::Record)> {
              let Instruction { opcode, .. } = instruction;
              assert_eq!(
                  MulOpcode::from_usize(opcode.local_opcode_idx(self.air.offset)),
                  MulOpcode::MUL
              );
      
              let data: [[F; NUM_LIMBS]; 2] = reads.into();
              let b = data[0].map(|x| x.as_canonical_u32());
              let c = data[1].map(|y| y.as_canonical_u32());
              let (a, carry) = run_mul::<NUM_LIMBS, LIMB_BITS>(&b, &c);
      
              for (a, carry) in a.iter().zip(carry.iter()) {
                  self.range_tuple_chip.add_count(&[*a, *carry]);
              }
      
              let output = AdapterRuntimeContext::without_pc([a.map(F::from_canonical_u32)]);
              let record = MultiplicationCoreRecord {
                  a: a.map(F::from_canonical_u32),
                  b: data[0],
                  c: data[1],
              };
      
              Ok((output, record))
          }
      *)
      Definition execute_instruction
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; instruction; _from_pc; reads ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let _from_pc := M.alloc (| Ty.path "u32", _from_pc |) in
            let reads :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterInterface"
                  []
                  [ F ]
                  I
                  "Reads",
                reads
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                        []
                        [ F; I ];
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ F ]
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              instruction,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "opcode"
                      |) in
                    let opcode :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "openvm_instructions::VmOpcode" ],
                        γ1_0
                      |) in
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "openvm_rv32im_transpiler::instructions::MulOpcode" ];
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "openvm_rv32im_transpiler::instructions::MulOpcode" ]
                              ],
                            Value.Tuple
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.path "openvm_rv32im_transpiler::instructions::MulOpcode",
                                    M.call_closure (|
                                      Ty.path "openvm_rv32im_transpiler::instructions::MulOpcode",
                                      M.get_trait_method (|
                                        "openvm_instructions::LocalOpcode",
                                        Ty.path "openvm_rv32im_transpiler::instructions::MulOpcode",
                                        [],
                                        [],
                                        "from_usize",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.path "openvm_instructions::VmOpcode",
                                            "local_opcode_idx",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| opcode |) |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip",
                                                  "air"
                                                |),
                                                "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir",
                                                "offset"
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.path "openvm_rv32im_transpiler::instructions::MulOpcode",
                                    Value.StructTuple
                                      "openvm_rv32im_transpiler::instructions::MulOpcode::MUL"
                                      []
                                      []
                                      []
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "openvm_rv32im_transpiler::instructions::MulOpcode"
                                      ],
                                    γ0_0
                                  |) in
                                let right_val :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "openvm_rv32im_transpiler::instructions::MulOpcode"
                                      ],
                                    γ0_1
                                  |) in
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              Ty.path "bool",
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "core::cmp::PartialEq",
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulOpcode",
                                                    [],
                                                    [
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::MulOpcode"
                                                    ],
                                                    "eq",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            let~ kind : Ty.path "core::panicking::AssertKind" :=
                                              Value.StructTuple
                                                "core::panicking::AssertKind::Eq"
                                                []
                                                []
                                                [] in
                                            M.alloc (|
                                              Ty.path "never",
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::assert_failed",
                                                  [],
                                                  [
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulOpcode";
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulOpcode"
                                                  ]
                                                |),
                                                [
                                                  M.read (| kind |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| left_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  Value.StructTuple
                                                    "core::option::Option::None"
                                                    []
                                                    [ Ty.path "core::fmt::Arguments" ]
                                                    []
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |)))
                          ]
                        |) in
                      let~ data :
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ] :=
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ],
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ F ]
                              I
                              "Reads",
                            [],
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                            ],
                            "into",
                            [],
                            []
                          |),
                          [ M.read (| reads |) ]
                        |) in
                      let~ b : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                            "map",
                            [],
                            [ Ty.function [ F ] (Ty.path "u32"); Ty.path "u32" ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                data,
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "u32",
                                        M.alloc (| F, α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| F, γ |) in
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeField32",
                                                  F,
                                                  [],
                                                  [],
                                                  "as_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |) in
                      let~ c : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                            "map",
                            [],
                            [ Ty.function [ F ] (Ty.path "u32"); Ty.path "u32" ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                data,
                                Value.Integer IntegerKind.Usize 1
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "u32",
                                        M.alloc (| F, α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let y := M.copy (| F, γ |) in
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeField32",
                                                  F,
                                                  [],
                                                  [],
                                                  "as_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, y |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                  []
                                  [ F; I ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                                  [ NUM_LIMBS; LIMB_BITS ]
                                  [ F ]
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ],
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                    []
                                    [ F; I ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                                    [ NUM_LIMBS; LIMB_BITS ]
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::execution::ExecutionError"
                            ],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ]
                              ],
                            M.call_closure (|
                              Ty.tuple
                                [
                                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ]
                                ],
                              M.get_function (|
                                "openvm_rv32im_circuit::mul::core::run_mul",
                                [ NUM_LIMBS; LIMB_BITS ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, b |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, c |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let a :=
                                  M.copy (|
                                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                    γ0_0
                                  |) in
                                let carry :=
                                  M.copy (|
                                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                    γ0_1
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.read (|
                                      M.use
                                        (M.alloc (|
                                          Ty.tuple [],
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "u32" ];
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "u32" ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.path "u32" ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.path "u32" ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::zip::Zip")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "u32" ];
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "u32" ]
                                                    ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "u32" ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "u32" ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "u32" ],
                                                      [],
                                                      [],
                                                      "zip",
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "u32" ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "u32" ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u32" ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "u32" ]
                                                              ],
                                                            M.pointer_coercion
                                                              M.PointerCoercion.Unsize
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ NUM_LIMBS ]
                                                                    [ Ty.path "u32" ]
                                                                ])
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u32" ]
                                                                ]),
                                                            [ M.borrow (| Pointer.Kind.Ref, a |) ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "u32" ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u32" ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "u32" ]
                                                              ],
                                                            M.pointer_coercion
                                                              M.PointerCoercion.Unsize
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ NUM_LIMBS ]
                                                                    [ Ty.path "u32" ]
                                                                ])
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u32" ]
                                                                ]),
                                                            [ M.borrow (| Pointer.Kind.Ref, carry |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "u32" ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "u32" ]
                                                        ],
                                                      γ
                                                    |) in
                                                  M.read (|
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u32" ];
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u32" ]
                                                                    ]
                                                                ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u32" ];
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u32" ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.path "u32" ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.path "u32" ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let γ1_0 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      0
                                                                    |) in
                                                                  let γ1_1 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      1
                                                                    |) in
                                                                  let a :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u32" ],
                                                                      γ1_0
                                                                    |) in
                                                                  let carry :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u32" ],
                                                                      γ1_1
                                                                    |) in
                                                                  M.read (|
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [],
                                                                          "add_count",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (| self |)
                                                                              |),
                                                                              "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip",
                                                                              "range_tuple_chip"
                                                                            |)
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Ty.path "u32" ]
                                                                              ],
                                                                            M.pointer_coercion
                                                                              M.PointerCoercion.Unsize
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        2
                                                                                    ]
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ])
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ]),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            2
                                                                                        ]
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32"
                                                                                        ],
                                                                                      Value.Array
                                                                                        [
                                                                                          M.read (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                a
                                                                                              |)
                                                                                            |)
                                                                                          |);
                                                                                          M.read (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                carry
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        |))
                                    |) in
                                  let~ output :
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                        []
                                        [ F; I ] :=
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                        []
                                        [ F; I ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                          []
                                          [ F; I ],
                                        "without_pc",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                                        ]
                                      |),
                                      [
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ NUM_LIMBS ]
                                                  [ Ty.path "u32" ],
                                                "map",
                                                [],
                                                [ Ty.function [ Ty.path "u32" ] F; F ]
                                              |),
                                              [
                                                M.read (| a |);
                                                M.get_trait_method (|
                                                  "p3_field::field::FieldAlgebra",
                                                  F,
                                                  [],
                                                  [],
                                                  "from_canonical_u32",
                                                  [],
                                                  []
                                                |)
                                              ]
                                            |)
                                          ]
                                      ]
                                    |) in
                                  let~ record :
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                                        [ NUM_LIMBS; LIMB_BITS ]
                                        [ F ] :=
                                    Value.mkStructRecord
                                      "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord"
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ F ]
                                      [
                                        ("a",
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [ Ty.path "u32" ],
                                              "map",
                                              [],
                                              [ Ty.function [ Ty.path "u32" ] F; F ]
                                            |),
                                            [
                                              M.read (| a |);
                                              M.get_trait_method (|
                                                "p3_field::field::FieldAlgebra",
                                                F,
                                                [],
                                                [],
                                                "from_canonical_u32",
                                                [],
                                                []
                                              |)
                                            ]
                                          |));
                                        ("b",
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              data,
                                              Value.Integer IntegerKind.Usize 0
                                            |)
                                          |));
                                        ("c",
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              data,
                                              Value.Integer IntegerKind.Usize 1
                                            |)
                                          |))
                                      ] in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                              []
                                              [ F; I ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                                              [ NUM_LIMBS; LIMB_BITS ]
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    Value.StructTuple
                                      "core::result::Result::Ok"
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                              []
                                              [ F; I ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord")
                                              [ NUM_LIMBS; LIMB_BITS ]
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ]
                                      [ Value.Tuple [ M.read (| output |); M.read (| record |) ] ]
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_opcode_name(&self, opcode: usize) -> String {
              format!("{:?}", MulOpcode::from_usize(opcode - self.air.offset))
          }
      *)
      Definition get_opcode_name
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; opcode ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let opcode := M.alloc (| Ty.path "usize", opcode |) in
            M.call_closure (|
              Ty.path "alloc::string::String",
              M.get_function (| "core::hint::must_use", [], [ Ty.path "alloc::string::String" ] |),
              [
                M.read (|
                  let~ res : Ty.path "alloc::string::String" :=
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_function (| "alloc::fmt::format", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "" |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [],
                                            [
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::MulOpcode"
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulOpcode",
                                                    M.call_closure (|
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::MulOpcode",
                                                      M.get_trait_method (|
                                                        "openvm_instructions::LocalOpcode",
                                                        Ty.path
                                                          "openvm_rv32im_transpiler::instructions::MulOpcode",
                                                        [],
                                                        [],
                                                        "from_usize",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (| opcode |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (| M.read (| self |) |),
                                                                  "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip",
                                                                  "air"
                                                                |),
                                                                "openvm_rv32im_circuit::mul::core::MultiplicationCoreAir",
                                                                "offset"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  res
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(&self, row_slice: &mut [F], record: Self::Record) {
              let row_slice: &mut MultiplicationCoreCols<_, NUM_LIMBS, LIMB_BITS> =
                  row_slice.borrow_mut();
              row_slice.a = record.a;
              row_slice.b = record.b;
              row_slice.c = record.c;
              row_slice.is_valid = F::ONE;
          }
      *)
      Definition generate_trace_row
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; row_slice; record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmCoreChip"
                  []
                  [ F; I ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                    [ NUM_LIMBS; LIMB_BITS ]
                    [])
                  "Record",
                record
              |) in
            M.read (|
              let~ row_slice :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                    "a"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                      "a"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                    "b"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                      "b"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                    "c"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::mul::core::MultiplicationCoreRecord",
                      "c"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreCols",
                    "is_valid"
                  |),
                  M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", F |) |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::mul::core::MultiplicationCoreChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F; I ]
          (Self NUM_LIMBS LIMB_BITS F I)
          (* Instance *)
          [
            ("Record", InstanceField.Ty (_Record NUM_LIMBS LIMB_BITS F I));
            ("Air", InstanceField.Ty (_Air NUM_LIMBS LIMB_BITS F I));
            ("execute_instruction",
              InstanceField.Method (execute_instruction NUM_LIMBS LIMB_BITS F I));
            ("get_opcode_name", InstanceField.Method (get_opcode_name NUM_LIMBS LIMB_BITS F I));
            ("generate_trace_row",
              InstanceField.Method (generate_trace_row NUM_LIMBS LIMB_BITS F I));
            ("air", InstanceField.Method (air NUM_LIMBS LIMB_BITS F I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_array_Usize_2_array_NUM_LIMBS_F_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_NUM_LIMBS_F_F_I_for_openvm_rv32im_circuit_mul_core_MultiplicationCoreChip_NUM_LIMBS_LIMB_BITS.
    
    (*
    pub(super) fn run_mul<const NUM_LIMBS: usize, const LIMB_BITS: usize>(
        x: &[u32; NUM_LIMBS],
        y: &[u32; NUM_LIMBS],
    ) -> ([u32; NUM_LIMBS], [u32; NUM_LIMBS]) {
        let mut result = [0; NUM_LIMBS];
        let mut carry = [0; NUM_LIMBS];
        for i in 0..NUM_LIMBS {
            if i > 0 {
                result[i] = carry[i - 1];
            }
            for j in 0..=i {
                result[i] += x[j] * y[i - j];
            }
            carry[i] = result[i] >> LIMB_BITS;
            result[i] %= 1 << LIMB_BITS;
        }
        (result, carry)
    }
    *)
    Definition run_mul (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS; LIMB_BITS ], [], [ x; y ] =>
        ltac:(M.monadic
          (let x :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              x
            |) in
          let y :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              y
            |) in
          M.read (|
            let~ result : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
              lib.repeat (| Value.Integer IntegerKind.U32 0, NUM_LIMBS |) in
            let~ carry : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
              lib.repeat (| Value.Integer IntegerKind.U32 0, NUM_LIMBS |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.gt,
                                                                [
                                                                  M.read (| i |);
                                                                  Value.Integer IntegerKind.Usize 0
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.SubPointer.get_array_field (|
                                                                result,
                                                                M.read (| i |)
                                                              |),
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  carry,
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.sub,
                                                                    [
                                                                      M.read (| i |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::range::RangeInclusive")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::range::RangeInclusive")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::range::RangeInclusive")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::RangeInclusive")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::RangeInclusive")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  "new",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  Value.Integer IntegerKind.Usize 0;
                                                                  M.read (| i |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::RangeInclusive")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                M.loop (|
                                                                  Ty.tuple [],
                                                                  ltac:(M.monadic
                                                                    (let~ _ : Ty.tuple [] :=
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [ Ty.path "usize" ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::RangeInclusive")
                                                                                []
                                                                                [ Ty.path "usize" ],
                                                                              [],
                                                                              [],
                                                                              "next",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    iter
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.is_struct_tuple (|
                                                                                  γ,
                                                                                  "core::option::Option::None"
                                                                                |) in
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let j :=
                                                                                M.copy (|
                                                                                  Ty.path "usize",
                                                                                  γ0_0
                                                                                |) in
                                                                              M.read (|
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  let β :=
                                                                                    M.SubPointer.get_array_field (|
                                                                                      result,
                                                                                      M.read (| i |)
                                                                                    |) in
                                                                                  M.write (|
                                                                                    β,
                                                                                    M.call_closure (|
                                                                                      Ty.path "u32",
                                                                                      BinOp.Wrap.add,
                                                                                      [
                                                                                        M.read (|
                                                                                          β
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "u32",
                                                                                          BinOp.Wrap.mul,
                                                                                          [
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    x
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  j
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    y
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.sub,
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)))
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |))
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.SubPointer.get_array_field (|
                                                    carry,
                                                    M.read (| i |)
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.shr,
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          result,
                                                          M.read (| i |)
                                                        |)
                                                      |);
                                                      LIMB_BITS
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                let β :=
                                                  M.SubPointer.get_array_field (|
                                                    result,
                                                    M.read (| i |)
                                                  |) in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.rem,
                                                    [
                                                      M.read (| β |);
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        BinOp.Wrap.shl,
                                                        [ Value.Integer IntegerKind.U32 1; LIMB_BITS
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            M.alloc (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ]
                ],
              Value.Tuple [ M.read (| result |); M.read (| carry |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_run_mul :
      M.IsFunction.C "openvm_rv32im_circuit::mul::core::run_mul" run_mul.
    Admitted.
    Global Typeclasses Opaque run_mul.
  End core.
End mul.
