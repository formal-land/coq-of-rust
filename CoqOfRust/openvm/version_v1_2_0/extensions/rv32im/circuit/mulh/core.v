(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module mulh.
  Module core.
    (* StructRecord
      {
        name := "MulHCoreCols";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [ "T" ];
        fields :=
          [
            ("a", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("b", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("c", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("a_mul", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("b_ext", T);
            ("c_ext", T);
            ("opcode_mulh_flag", T);
            ("opcode_mulhsu_flag", T);
            ("opcode_mulhu_flag", T)
          ];
      } *)
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_mulh_core_MulHCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                              [ NUM_LIMBS; LIMB_BITS ]
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                  [ NUM_LIMBS; LIMB_BITS ]
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                    [ NUM_LIMBS; LIMB_BITS ]
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                                              [ NUM_LIMBS; LIMB_BITS ]
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                  [ NUM_LIMBS; LIMB_BITS ]
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
              [ NUM_LIMBS; LIMB_BITS ]
              [ T ]
          ]
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_mulh_core_MulHCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_mulh_core_MulHCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                                  [ NUM_LIMBS; LIMB_BITS ]
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                          [ NUM_LIMBS; LIMB_BITS ]
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                        [ NUM_LIMBS; LIMB_BITS ]
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                [ NUM_LIMBS; LIMB_BITS ]
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                          [ NUM_LIMBS; LIMB_BITS ]
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                                                  [ NUM_LIMBS; LIMB_BITS ]
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
              [ NUM_LIMBS; LIMB_BITS ]
              [ T ]
          ]
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *)
          [ ("borrow_mut", InstanceField.Method (borrow_mut NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_mulh_core_MulHCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_mulh_core_MulHCoreCols_NUM_LIMBS_LIMB_BITS_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
          [ NUM_LIMBS; LIMB_BITS ]
          [ T ].
      
      (* AlignedBorrow *)
      Definition width
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                    [ NUM_LIMBS; LIMB_BITS ]
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsAssociatedFunction.C (Self NUM_LIMBS LIMB_BITS T) "width" (width NUM_LIMBS LIMB_BITS T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_mulh_core_MulHCoreCols_NUM_LIMBS_LIMB_BITS_T.
    
    (* StructRecord
      {
        name := "MulHCoreAir";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [];
        fields :=
          [
            ("bitwise_lookup_bus",
              Ty.path
                "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus");
            ("range_tuple_bus",
              Ty.apply
                (Ty.path "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                [ Value.Integer IntegerKind.Usize 2 ]
                [])
          ];
      } *)
    
    Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (* Clone *)
      Definition clone
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
                [ NUM_LIMBS; LIMB_BITS ]
                [],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_LIMBS LIMB_BITS)) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MulHCoreAir" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bitwise_lookup_bus" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus"
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::mulh::core::MulHCoreAir",
                            "bitwise_lookup_bus"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "range_tuple_bus" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              []
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  []
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::mulh::core::MulHCoreAir",
                                "range_tuple_bus"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS LIMB_BITS)) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          fn width(&self) -> usize {
              MulHCoreCols::<F, NUM_LIMBS, LIMB_BITS>::width()
          }
      *)
      Definition width
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                  [ NUM_LIMBS; LIMB_BITS ]
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_LIMBS LIMB_BITS F)
          (* Instance *) [ ("width", InstanceField.Method (width NUM_LIMBS LIMB_BITS F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::rap::BaseAirWithPublicValues"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_LIMBS LIMB_BITS F)
          (* Instance *) [].
    End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_2_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_MinimalInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (AB I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local_core: &[AB::Var],
              _from_pc: AB::Var,
          ) -> AdapterAirContext<AB::Expr, I> {
              let cols: &MulHCoreCols<_, NUM_LIMBS, LIMB_BITS> = local_core.borrow();
              let flags = [
                  cols.opcode_mulh_flag,
                  cols.opcode_mulhsu_flag,
                  cols.opcode_mulhu_flag,
              ];
      
              let is_valid = flags.iter().fold(AB::Expr::ZERO, |acc, &flag| {
                  builder.assert_bool(flag);
                  acc + flag.into()
              });
              builder.assert_bool(is_valid.clone());
      
              let b = &cols.b;
              let c = &cols.c;
              let carry_divide = AB::F::from_canonical_u32(1 << LIMB_BITS).inverse();
      
              // Note b * c = a << LIMB_BITS + a_mul, in order to constrain that a is correct we
              // need to compute the carries generated by a_mul.
              let a_mul = &cols.a_mul;
              let mut carry_mul: [AB::Expr; NUM_LIMBS] = array::from_fn(|_| AB::Expr::ZERO);
      
              for i in 0..NUM_LIMBS {
                  let expected_limb = if i == 0 {
                      AB::Expr::ZERO
                  } else {
                      carry_mul[i - 1].clone()
                  } + (0..=i).fold(AB::Expr::ZERO, |ac, k| ac + (b[k] * c[i - k]));
                  carry_mul[i] = AB::Expr::from(carry_divide) * (expected_limb - a_mul[i]);
              }
      
              for (a_mul, carry_mul) in a_mul.iter().zip(carry_mul.iter()) {
                  self.range_tuple_bus
                      .send(vec![( *a_mul).into(), carry_mul.clone()])
                      .eval(builder, is_valid.clone());
              }
      
              // We can now constrain that a is correct using carry_mul[NUM_LIMBS - 1]
              let a = &cols.a;
              let mut carry: [AB::Expr; NUM_LIMBS] = array::from_fn(|_| AB::Expr::ZERO);
      
              for j in 0..NUM_LIMBS {
                  let expected_limb = if j == 0 {
                      carry_mul[NUM_LIMBS - 1].clone()
                  } else {
                      carry[j - 1].clone()
                  } + ((j + 1)..NUM_LIMBS)
                      .fold(AB::Expr::ZERO, |acc, k| acc + (b[k] * c[NUM_LIMBS + j - k]))
                      + (0..(j + 1)).fold(AB::Expr::ZERO, |acc, k| {
                          acc + (b[k] * cols.c_ext) + (c[k] * cols.b_ext)
                      });
                  carry[j] = AB::Expr::from(carry_divide) * (expected_limb - a[j]);
              }
      
              for (a, carry) in a.iter().zip(carry.iter()) {
                  self.range_tuple_bus
                      .send(vec![( *a).into(), carry.clone()])
                      .eval(builder, is_valid.clone());
              }
      
              // Check that b_ext and c_ext are correct using bitwise lookup. We check
              // both b and c when the opcode is MULH, and only b when MULHSU.
              let sign_mask = AB::F::from_canonical_u32(1 << (LIMB_BITS - 1));
              let ext_inv = AB::F::from_canonical_u32((1 << LIMB_BITS) - 1).inverse();
              let b_sign = cols.b_ext * ext_inv;
              let c_sign = cols.c_ext * ext_inv;
      
              builder.assert_bool(b_sign.clone());
              builder.assert_bool(c_sign.clone());
              builder
                  .when(cols.opcode_mulhu_flag)
                  .assert_zero(b_sign.clone());
              builder
                  .when(cols.opcode_mulhu_flag + cols.opcode_mulhsu_flag)
                  .assert_zero(c_sign.clone());
      
              self.bitwise_lookup_bus
                  .send_range(
                      AB::Expr::from_canonical_u32(2) * (b[NUM_LIMBS - 1] - b_sign * sign_mask),
                      (cols.opcode_mulh_flag + AB::Expr::ONE) * (c[NUM_LIMBS - 1] - c_sign * sign_mask),
                  )
                  .eval(builder, cols.opcode_mulh_flag + cols.opcode_mulhsu_flag);
      
              let expected_opcode = VmCoreAir::<AB, I>::expr_to_global_expr(
                  self,
                  flags.iter().zip(MulHOpcode::iter()).fold(
                      AB::Expr::ZERO,
                      |acc, (flag, local_opcode)| {
                          acc + ( *flag).into() * AB::Expr::from_canonical_u8(local_opcode as u8)
                      },
                  ),
              );
      
              AdapterAirContext {
                  to_pc: None,
                  reads: [cols.b.map(Into::into), cols.c.map(Into::into)].into(),
                  writes: [cols.a.map(Into::into)].into(),
                  instruction: MinimalInstruction {
                      is_valid,
                      opcode: expected_opcode,
                  }
                  .into(),
              }
          }
      *)
      Definition eval
          (NUM_LIMBS LIMB_BITS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS AB I in
        match ε, τ, α with
        | [], [], [ self; builder; local_core; _from_pc ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local_core :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local_core
              |) in
            let _from_pc :=
              M.alloc (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                _from_pc
              |) in
            M.read (|
              let~ cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local_core |) |) |) ]
                    |)
                  |)
                |) in
              let~ flags :
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 3 ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ] :=
                Value.Array
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                        "opcode_mulh_flag"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                        "opcode_mulhsu_flag"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                        "opcode_mulhu_flag"
                      |)
                    |)
                  ] in
              let~ is_valid : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [],
                    "fold",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 3 ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ]),
                          [ M.borrow (| Pointer.Kind.Ref, flags |) ]
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (|
                        "p3_field::field::FieldAlgebra::ZERO",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      |)
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let acc :=
                                        M.copy (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          γ
                                        |) in
                                      M.match_operator (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                          α1
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ := M.deref (| M.read (| γ |) |) in
                                              let flag :=
                                                M.copy (|
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var",
                                                  γ
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      AB,
                                                      [],
                                                      [],
                                                      "assert_bool",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.read (| flag |)
                                                    ]
                                                  |) in
                                                M.alloc (|
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr",
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| acc |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| flag |) ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |)
                  ]
                |) in
              let~ b :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "b"
                  |)
                |) in
              let~ c :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "c"
                  |)
                |) in
              let~ carry_divide : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                  M.get_trait_method (|
                    "p3_field::field::Field",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                    [],
                    [],
                    "inverse",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ a_mul :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "a_mul"
                  |)
                |) in
              let~ carry_mul :
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ NUM_LIMBS ],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [ Ty.path "usize" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (| Ty.path "usize", α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS)
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ expected_limb :
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr" :=
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.match_operator (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (| i |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0
                                                                      ]
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ZERO",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_array_field (|
                                                                      carry_mul,
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.sub,
                                                                        [
                                                                          M.read (| i |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::range::RangeInclusive")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "fold",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.function
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.path "usize"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::range::RangeInclusive")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::range::RangeInclusive")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              "new",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              Value.Integer IntegerKind.Usize 0;
                                                              M.read (| i |)
                                                            ]
                                                          |);
                                                          M.read (|
                                                            get_constant (|
                                                              "p3_field::field::FieldAlgebra::ZERO",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr"
                                                            |)
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0; α1 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      M.alloc (|
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr",
                                                                        α0
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let ac :=
                                                                              M.copy (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                γ
                                                                              |) in
                                                                            M.match_operator (|
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr",
                                                                              M.alloc (|
                                                                                Ty.path "usize",
                                                                                α1
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let k :=
                                                                                      M.copy (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        γ
                                                                                      |) in
                                                                                    M.call_closure (|
                                                                                      Ty.associated_in_trait
                                                                                        "p3_air::air::AirBuilder"
                                                                                        []
                                                                                        []
                                                                                        AB
                                                                                        "Expr",
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Add",
                                                                                        Ty.associated_in_trait
                                                                                          "p3_air::air::AirBuilder"
                                                                                          []
                                                                                          []
                                                                                          AB
                                                                                          "Expr",
                                                                                        [],
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr"
                                                                                        ],
                                                                                        "add",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          ac
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr",
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            Ty.associated_in_trait
                                                                                              "p3_air::air::AirBuilder"
                                                                                              []
                                                                                              []
                                                                                              AB
                                                                                              "Var",
                                                                                            [],
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Var"
                                                                                            ],
                                                                                            "mul",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    b
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  k
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    c
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.sub,
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      k
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      carry_mul,
                                                      M.read (| i |)
                                                    |),
                                                    M.call_closure (|
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Mul",
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                        "mul",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F"
                                                            ],
                                                            "from",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| carry_divide |) ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Sub",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var"
                                                            ],
                                                            "sub",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (| expected_limb |);
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| a_mul |) |),
                                                                M.read (| i |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ];
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  [],
                                  [],
                                  "zip",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ]),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| a_mul |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ]),
                                        [ M.borrow (| Pointer.Kind.Ref, carry_mul |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let a_mul :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ],
                                                  γ1_0
                                                |) in
                                              let carry_mul :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ],
                                                  γ1_1
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                      "eval",
                                                      [],
                                                      [
                                                        AB;
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "send",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_rv32im_circuit::mulh::core::MulHCoreAir",
                                                              "range_tuple_bus"
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                ],
                                                              "into_vec",
                                                              [],
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                M.pointer_coercion
                                                                  M.PointerCoercion.Unsize
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ])
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::boxed::Box")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "new",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::convert::Into",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Var",
                                                                                  [],
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_air::air::AirBuilder"
                                                                                      []
                                                                                      []
                                                                                      AB
                                                                                      "Expr"
                                                                                  ],
                                                                                  "into",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        a_mul
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::clone::Clone",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Expr",
                                                                                  [],
                                                                                  [],
                                                                                  "clone",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        carry_mul
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, is_valid |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ a :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "a"
                  |)
                |) in
              let~ carry :
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ NUM_LIMBS ],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [ Ty.path "usize" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (| Ty.path "usize", α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS)
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let j := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ expected_limb :
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr" :=
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Add",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "add",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.match_operator (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.path "bool",
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.eq,
                                                                          [
                                                                            M.read (| j |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              0
                                                                          ]
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_array_field (|
                                                                          carry_mul,
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.sub,
                                                                            [
                                                                              NUM_LIMBS;
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_array_field (|
                                                                          carry,
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.sub,
                                                                            [
                                                                              M.read (| j |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [],
                                                              "fold",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.function
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr";
                                                                    Ty.path "usize"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr")
                                                              ]
                                                            |),
                                                            [
                                                              Value.mkStructRecord
                                                                "core::ops::range::Range"
                                                                []
                                                                [ Ty.path "usize" ]
                                                                [
                                                                  ("start",
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.add,
                                                                      [
                                                                        M.read (| j |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                    |));
                                                                  ("end_", NUM_LIMBS)
                                                                ];
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ZERO",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                |)
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0; α1 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr",
                                                                          M.alloc (|
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::AirBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "Expr",
                                                                            α0
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let acc :=
                                                                                  M.copy (|
                                                                                    Ty.associated_in_trait
                                                                                      "p3_air::air::AirBuilder"
                                                                                      []
                                                                                      []
                                                                                      AB
                                                                                      "Expr",
                                                                                    γ
                                                                                  |) in
                                                                                M.match_operator (|
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Expr",
                                                                                  M.alloc (|
                                                                                    Ty.path "usize",
                                                                                    α1
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let k :=
                                                                                          M.copy (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            γ
                                                                                          |) in
                                                                                        M.call_closure (|
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr",
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Add",
                                                                                            Ty.associated_in_trait
                                                                                              "p3_air::air::AirBuilder"
                                                                                              []
                                                                                              []
                                                                                              AB
                                                                                              "Expr",
                                                                                            [],
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Expr"
                                                                                            ],
                                                                                            "add",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              acc
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Expr",
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Mul",
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_air::air::AirBuilder"
                                                                                                  []
                                                                                                  []
                                                                                                  AB
                                                                                                  "Var",
                                                                                                [],
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_air::air::AirBuilder"
                                                                                                    []
                                                                                                    []
                                                                                                    AB
                                                                                                    "Var"
                                                                                                ],
                                                                                                "mul",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        b
                                                                                                      |)
                                                                                                    |),
                                                                                                    M.read (|
                                                                                                      k
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        c
                                                                                                      |)
                                                                                                    |),
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      BinOp.Wrap.sub,
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "usize",
                                                                                                          BinOp.Wrap.add,
                                                                                                          [
                                                                                                            NUM_LIMBS;
                                                                                                            M.read (|
                                                                                                              j
                                                                                                            |)
                                                                                                          ]
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          k
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "fold",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.function
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.path "usize"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr")
                                                          ]
                                                        |),
                                                        [
                                                          Value.mkStructRecord
                                                            "core::ops::range::Range"
                                                            []
                                                            [ Ty.path "usize" ]
                                                            [
                                                              ("start",
                                                                Value.Integer IntegerKind.Usize 0);
                                                              ("end_",
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.add,
                                                                  [
                                                                    M.read (| j |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |))
                                                            ];
                                                          M.read (|
                                                            get_constant (|
                                                              "p3_field::field::FieldAlgebra::ZERO",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr"
                                                            |)
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0; α1 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      M.alloc (|
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr",
                                                                        α0
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let acc :=
                                                                              M.copy (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                γ
                                                                              |) in
                                                                            M.match_operator (|
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr",
                                                                              M.alloc (|
                                                                                Ty.path "usize",
                                                                                α1
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let k :=
                                                                                      M.copy (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        γ
                                                                                      |) in
                                                                                    M.call_closure (|
                                                                                      Ty.associated_in_trait
                                                                                        "p3_air::air::AirBuilder"
                                                                                        []
                                                                                        []
                                                                                        AB
                                                                                        "Expr",
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Add",
                                                                                        Ty.associated_in_trait
                                                                                          "p3_air::air::AirBuilder"
                                                                                          []
                                                                                          []
                                                                                          AB
                                                                                          "Expr",
                                                                                        [],
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr"
                                                                                        ],
                                                                                        "add",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr",
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Add",
                                                                                            Ty.associated_in_trait
                                                                                              "p3_air::air::AirBuilder"
                                                                                              []
                                                                                              []
                                                                                              AB
                                                                                              "Expr",
                                                                                            [],
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Expr"
                                                                                            ],
                                                                                            "add",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              acc
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Expr",
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Mul",
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_air::air::AirBuilder"
                                                                                                  []
                                                                                                  []
                                                                                                  AB
                                                                                                  "Var",
                                                                                                [],
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_air::air::AirBuilder"
                                                                                                    []
                                                                                                    []
                                                                                                    AB
                                                                                                    "Var"
                                                                                                ],
                                                                                                "mul",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        b
                                                                                                      |)
                                                                                                    |),
                                                                                                    M.read (|
                                                                                                      k
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        cols
                                                                                                      |)
                                                                                                    |),
                                                                                                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                                                                                                    "c_ext"
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr",
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            Ty.associated_in_trait
                                                                                              "p3_air::air::AirBuilder"
                                                                                              []
                                                                                              []
                                                                                              AB
                                                                                              "Var",
                                                                                            [],
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Var"
                                                                                            ],
                                                                                            "mul",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    c
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  k
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    cols
                                                                                                  |)
                                                                                                |),
                                                                                                "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                                                                                                "b_ext"
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      carry,
                                                      M.read (| j |)
                                                    |),
                                                    M.call_closure (|
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Mul",
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                        "mul",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F"
                                                            ],
                                                            "from",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| carry_divide |) ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Sub",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var"
                                                            ],
                                                            "sub",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (| expected_limb |);
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| a |) |),
                                                                M.read (| j |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ];
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  [],
                                  [],
                                  "zip",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ]),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| a |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ]),
                                        [ M.borrow (| Pointer.Kind.Ref, carry |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let a :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ],
                                                  γ1_0
                                                |) in
                                              let carry :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ],
                                                  γ1_1
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                      "eval",
                                                      [],
                                                      [
                                                        AB;
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "send",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_rv32im_circuit::mulh::core::MulHCoreAir",
                                                              "range_tuple_bus"
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                ],
                                                              "into_vec",
                                                              [],
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                M.pointer_coercion
                                                                  M.PointerCoercion.Unsize
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ])
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::boxed::Box")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "new",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::convert::Into",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Var",
                                                                                  [],
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_air::air::AirBuilder"
                                                                                      []
                                                                                      []
                                                                                      AB
                                                                                      "Expr"
                                                                                  ],
                                                                                  "into",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (| a |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::clone::Clone",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Expr",
                                                                                  [],
                                                                                  [],
                                                                                  "clone",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        carry
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, is_valid |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ sign_mask : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                  M.get_trait_method (|
                    "p3_field::field::FieldAlgebra",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                    [],
                    [],
                    "from_canonical_u32",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.shl,
                      [
                        Value.Integer IntegerKind.U32 1;
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ ext_inv : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                  M.get_trait_method (|
                    "p3_field::field::Field",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                    [],
                    [],
                    "inverse",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.sub,
                              [
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.shl,
                                  [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                |);
                                Value.Integer IntegerKind.U32 1
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ b_sign : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                        "b_ext"
                      |)
                    |);
                    M.read (| ext_inv |)
                  ]
                |) in
              let~ c_sign : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                        "c_ext"
                      |)
                    |);
                    M.read (| ext_inv |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, b_sign |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, c_sign |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_zero",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| cols |) |),
                                "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                                "opcode_mulhu_flag"
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, b_sign |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_zero",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| cols |) |),
                                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                                    "opcode_mulhu_flag"
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| cols |) |),
                                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                                    "opcode_mulhsu_flag"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, c_sign |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                        "send_range",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::mulh::core::MulHCoreAir",
                            "bitwise_lookup_bus"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [ Value.Integer IntegerKind.U32 2 ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Sub",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "sub",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| b |) |),
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [ M.read (| b_sign |); M.read (| sign_mask |) ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| cols |) |),
                                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                                    "opcode_mulh_flag"
                                  |)
                                |);
                                M.read (|
                                  get_constant (|
                                    "p3_field::field::FieldAlgebra::ONE",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Sub",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "sub",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| c |) |),
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [ M.read (| c_sign |); M.read (| sign_mask |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "add",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| cols |) |),
                            "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                            "opcode_mulh_flag"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| cols |) |),
                            "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                            "opcode_mulhsu_flag"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ expected_opcode :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "openvm_circuit::arch::integration_api::VmCoreAir",
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [],
                    [],
                    [ AB; I ],
                    "expr_to_global_expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                            Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcodeIter"
                          ],
                        [],
                        [],
                        "fold",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.function
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ];
                                  Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                ]
                            ]
                            (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                              Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcodeIter"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            [],
                            [],
                            "zip",
                            [],
                            [ Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcodeIter" ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 3 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ]),
                                  [ M.borrow (| Pointer.Kind.Ref, flags |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcodeIter",
                              M.get_trait_method (|
                                "strum::IntoEnumIterator",
                                Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                [],
                                [],
                                "iter",
                                [],
                                []
                              |),
                              []
                            |)
                          ]
                        |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::FieldAlgebra::ZERO",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                          |)
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.alloc (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let acc :=
                                            M.copy (|
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              γ
                                            |) in
                                          M.match_operator (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                                ],
                                              α1
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let flag :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var"
                                                        ],
                                                      γ0_0
                                                    |) in
                                                  let local_opcode :=
                                                    M.copy (|
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                      γ0_1
                                                    |) in
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| acc |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "into",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.deref (| M.read (| flag |) |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [],
                                                              "from_canonical_u8",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.cast
                                                                (Ty.path "u8")
                                                                (M.read (| local_opcode |))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ],
                Value.mkStructRecord
                  "openvm_circuit::arch::integration_api::AdapterAirContext"
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ]
                  [
                    ("to_pc",
                      Value.StructTuple
                        "core::option::Option::None"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                        []);
                    ("reads",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "Reads",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_LIMBS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "Reads"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                                      "b"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                                      "c"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |)
                            ]
                        ]
                      |));
                    ("writes",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "Writes",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_LIMBS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "Writes"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                                      "a"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |)
                            ]
                        ]
                      |));
                    ("instruction",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "ProcessedInstruction",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "ProcessedInstruction"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.mkStructRecord
                            "openvm_circuit::arch::integration_api::MinimalInstruction"
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            [
                              ("is_valid", M.read (| is_valid |));
                              ("opcode", M.read (| expected_opcode |))
                            ]
                        ]
                      |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn start_offset(&self) -> usize {
              MulHOpcode::CLASS_OFFSET
          }
      *)
      Definition start_offset
          (NUM_LIMBS LIMB_BITS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS AB I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.read (|
              get_constant (| "openvm_instructions::LocalOpcode::CLASS_OFFSET", Ty.path "usize" |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (AB I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB; I ]
          (Self NUM_LIMBS LIMB_BITS AB I)
          (* Instance *)
          [
            ("eval", InstanceField.Method (eval NUM_LIMBS LIMB_BITS AB I));
            ("start_offset", InstanceField.Method (start_offset NUM_LIMBS LIMB_BITS AB I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_2_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_MinimalInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_mulh_core_MulHCoreAir_NUM_LIMBS_LIMB_BITS.
    
    (* StructRecord
      {
        name := "MulHCoreChip";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [];
        fields :=
          [
            ("air",
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
                [ NUM_LIMBS; LIMB_BITS ]
                []);
            ("bitwise_lookup_chip",
              Ty.apply
                (Ty.path
                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                [ LIMB_BITS ]
                []);
            ("range_tuple_chip",
              Ty.apply
                (Ty.path "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                [ Value.Integer IntegerKind.Usize 2 ]
                [])
          ];
      } *)
    
    Module Impl_openvm_rv32im_circuit_mulh_core_MulHCoreChip_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          pub fn new(
              bitwise_lookup_chip: SharedBitwiseOperationLookupChip<LIMB_BITS>,
              range_tuple_chip: SharedRangeTupleCheckerChip<2>,
          ) -> Self {
              // The RangeTupleChecker is used to range check (a[i], carry[i]) pairs where 0 <= i
              // < 2 * NUM_LIMBS. a[i] must have LIMB_BITS bits and carry[i] is the sum of i + 1
              // bytes (with LIMB_BITS bits). BitwiseOperationLookup is used to sign check bytes.
              debug_assert!(
                  range_tuple_chip.sizes()[0] == 1 << LIMB_BITS,
                  "First element of RangeTupleChecker must have size {}",
                  1 << LIMB_BITS
              );
              debug_assert!(
                  range_tuple_chip.sizes()[1] >= (1 << LIMB_BITS) * 2 * NUM_LIMBS as u32,
                  "Second element of RangeTupleChecker must have size of at least {}",
                  (1 << LIMB_BITS) * 2 * NUM_LIMBS as u32
              );
      
              Self {
                  air: MulHCoreAir {
                      bitwise_lookup_bus: bitwise_lookup_chip.bus(),
                      range_tuple_bus: *range_tuple_chip.bus(),
                  },
                  bitwise_lookup_chip,
                  range_tuple_chip,
              }
          }
      *)
      Definition new
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ bitwise_lookup_chip; range_tuple_chip ] =>
          ltac:(M.monadic
            (let bitwise_lookup_chip :=
              M.alloc (|
                Ty.apply
                  (Ty.path
                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                  [ LIMB_BITS ]
                  [],
                bitwise_lookup_chip
              |) in
            let range_tuple_chip :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [],
                range_tuple_chip
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                              [ Ty.path "u32" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "sizes",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            range_tuple_chip
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    Value.Integer IntegerKind.Usize 0
                                                  |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shl,
                                                  [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              [
                                                Value.Integer IntegerKind.Usize 1;
                                                Value.Integer IntegerKind.Usize 1
                                              ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "First element of RangeTupleChecker must have size "
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [ Ty.path "core::fmt::rt::Argument" ],
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              "new_display",
                                                              [],
                                                              [ Ty.path "i32" ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.path "i32",
                                                                      M.call_closure (|
                                                                        Ty.path "i32",
                                                                        BinOp.Wrap.shl,
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.I32
                                                                            1;
                                                                          LIMB_BITS
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.ge,
                                              [
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                              [ Ty.path "u32" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "sizes",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            range_tuple_chip
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.mul,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.mul,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.shl,
                                                          [
                                                            Value.Integer IntegerKind.U32 1;
                                                            LIMB_BITS
                                                          ]
                                                        |);
                                                        Value.Integer IntegerKind.U32 2
                                                      ]
                                                    |);
                                                    M.cast (Ty.path "u32") NUM_LIMBS
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              [
                                                Value.Integer IntegerKind.Usize 1;
                                                Value.Integer IntegerKind.Usize 1
                                              ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "Second element of RangeTupleChecker must have size of at least "
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [ Ty.path "core::fmt::rt::Argument" ],
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              "new_display",
                                                              [],
                                                              [ Ty.path "u32" ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.path "u32",
                                                                      M.call_closure (|
                                                                        Ty.path "u32",
                                                                        BinOp.Wrap.mul,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u32",
                                                                            BinOp.Wrap.mul,
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "u32",
                                                                                BinOp.Wrap.shl,
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.U32
                                                                                    1;
                                                                                  LIMB_BITS
                                                                                ]
                                                                              |);
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                2
                                                                            ]
                                                                          |);
                                                                          M.cast
                                                                            (Ty.path "u32")
                                                                            NUM_LIMBS
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                  [ NUM_LIMBS; LIMB_BITS ]
                  [],
                Value.mkStructRecord
                  "openvm_rv32im_circuit::mulh::core::MulHCoreChip"
                  [ NUM_LIMBS; LIMB_BITS ]
                  []
                  [
                    ("air",
                      Value.mkStructRecord
                        "openvm_rv32im_circuit::mulh::core::MulHCoreAir"
                        [ NUM_LIMBS; LIMB_BITS ]
                        []
                        [
                          ("bitwise_lookup_bus",
                            M.call_closure (|
                              Ty.path
                                "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                  [ LIMB_BITS ]
                                  [],
                                "bus",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, bitwise_lookup_chip |) ]
                            |));
                          ("range_tuple_bus",
                            M.read (|
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        []
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [],
                                    "bus",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, range_tuple_chip |) ]
                                |)
                              |)
                            |))
                        ]);
                    ("bitwise_lookup_chip", M.read (| bitwise_lookup_chip |));
                    ("range_tuple_chip", M.read (| range_tuple_chip |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsAssociatedFunction.C (Self NUM_LIMBS LIMB_BITS) "new" (new NUM_LIMBS LIMB_BITS).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_mulh_core_MulHCoreChip_NUM_LIMBS_LIMB_BITS.
    
    (* StructRecord
      {
        name := "MulHCoreRecord";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [ "T" ];
        fields :=
          [
            ("opcode", Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode");
            ("a", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("b", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("c", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("a_mul", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("b_ext", T);
            ("c_ext", T)
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_mulh_core_MulHCoreRecord_NUM_LIMBS_LIMB_BITS_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
          [ NUM_LIMBS; LIMB_BITS ]
          [ T ].
      
      (* Clone *)
      Definition clone
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord"
              [ NUM_LIMBS; LIMB_BITS ]
              [ T ]
              [
                ("opcode",
                  M.call_closure (|
                    Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "opcode"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("a",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "a"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("b",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "b"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("c",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "c"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("a_mul",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "a_mul"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("b_ext",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "b_ext"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("c_ext",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "c_ext"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_mulh_core_MulHCoreRecord_NUM_LIMBS_LIMB_BITS_T.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_mulh_core_MulHCoreRecord_NUM_LIMBS_LIMB_BITS_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
          [ NUM_LIMBS; LIMB_BITS ]
          [ T ].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 7 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "opcode" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "a" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "b" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "c" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "a_mul" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "b_ext" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "c_ext" |) |) |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 7 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                            "opcode"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                            "a"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                            "b"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                            "c"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                            "a_mul"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                            "b_ext"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ T ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                                "c_ext"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MulHCoreRecord" |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 7 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_mulh_core_MulHCoreRecord_NUM_LIMBS_LIMB_BITS_T.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_rv32im_circuit_mulh_core_MulHCoreRecord_NUM_LIMBS_LIMB_BITS_T.
        Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
            [ NUM_LIMBS; LIMB_BITS ]
            [ T ].
        
        (* Serialize *)
        Definition serialize
            (NUM_LIMBS LIMB_BITS : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ T ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "MulHCoreRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.cast
                                                                (Ty.path "usize")
                                                                (Value.Bool false);
                                                              Value.Integer IntegerKind.Usize 1
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "opcode" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                          "opcode"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "a" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                                            "a"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith'1")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "b" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith'1")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith'1"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                                            "b"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith'2")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "c" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith'2")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith'2"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                                            "c"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith'3")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "a_mul" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith'3")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::mulh::core::_::serialize::__SerializeWith'3"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                                            "a_mul"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "b_ext" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                          "b_ext"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "c_ext" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                                          "c_ext"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_LIMBS LIMB_BITS T)
            (* Instance *)
            [ ("serialize", InstanceField.Method (serialize NUM_LIMBS LIMB_BITS T)) ].
      End Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_rv32im_circuit_mulh_core_MulHCoreRecord_NUM_LIMBS_LIMB_BITS_T.
      Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_rv32im_circuit_mulh_core_MulHCoreRecord_NUM_LIMBS_LIMB_BITS_T.
        Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
            [ NUM_LIMBS; LIMB_BITS ]
            [ T ].
        
        (* Deserialize *)
        Definition deserialize
            (NUM_LIMBS LIMB_BITS : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::_'1::deserialize::__Visitor")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "MulHCoreRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::mulh::core::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::mulh::core::_'1::deserialize::__Visitor"
                    [ NUM_LIMBS; LIMB_BITS ]
                    [ T ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                              [ NUM_LIMBS; LIMB_BITS ]
                              [ T ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_LIMBS LIMB_BITS T)
            (* Instance *)
            [ ("deserialize", InstanceField.Method (deserialize NUM_LIMBS LIMB_BITS T)) ].
      End Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_rv32im_circuit_mulh_core_MulHCoreRecord_NUM_LIMBS_LIMB_BITS_T.
    End underscore.
    
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_array_Usize_2_array_NUM_LIMBS_F_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_NUM_LIMBS_F_F_I_for_openvm_rv32im_circuit_mulh_core_MulHCoreChip_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*     type Record = MulHCoreRecord<F, NUM_LIMBS, LIMB_BITS>; *)
      Definition _Record (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
          [ NUM_LIMBS; LIMB_BITS ]
          [ F ].
      
      (*     type Air = MulHCoreAir<NUM_LIMBS, LIMB_BITS>; *)
      Definition _Air (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          fn execute_instruction(
              &self,
              instruction: &Instruction<F>,
              _from_pc: u32,
              reads: I::Reads,
          ) -> Result<(AdapterRuntimeContext<F, I>, Self::Record)> {
              let Instruction { opcode, .. } = instruction;
              let mulh_opcode = MulHOpcode::from_usize(opcode.local_opcode_idx(MulHOpcode::CLASS_OFFSET));
      
              let data: [[F; NUM_LIMBS]; 2] = reads.into();
              let b = data[0].map(|x| x.as_canonical_u32());
              let c = data[1].map(|y| y.as_canonical_u32());
              let (a, a_mul, carry, b_ext, c_ext) = run_mulh::<NUM_LIMBS, LIMB_BITS>(mulh_opcode, &b, &c);
      
              for i in 0..NUM_LIMBS {
                  self.range_tuple_chip.add_count(&[a_mul[i], carry[i]]);
                  self.range_tuple_chip
                      .add_count(&[a[i], carry[NUM_LIMBS + i]]);
              }
      
              if mulh_opcode != MulHOpcode::MULHU {
                  let b_sign_mask = if b_ext == 0 { 0 } else { 1 << (LIMB_BITS - 1) };
                  let c_sign_mask = if c_ext == 0 { 0 } else { 1 << (LIMB_BITS - 1) };
                  self.bitwise_lookup_chip.request_range(
                      (b[NUM_LIMBS - 1] - b_sign_mask) << 1,
                      (c[NUM_LIMBS - 1] - c_sign_mask) << ((mulh_opcode == MulHOpcode::MULH) as u32),
                  );
              }
      
              let output = AdapterRuntimeContext::without_pc([a.map(F::from_canonical_u32)]);
              let record = MulHCoreRecord {
                  opcode: mulh_opcode,
                  a: a.map(F::from_canonical_u32),
                  b: data[0],
                  c: data[1],
                  a_mul: a_mul.map(F::from_canonical_u32),
                  b_ext: F::from_canonical_u32(b_ext),
                  c_ext: F::from_canonical_u32(c_ext),
              };
      
              Ok((output, record))
          }
      *)
      Definition execute_instruction
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; instruction; _from_pc; reads ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let _from_pc := M.alloc (| Ty.path "u32", _from_pc |) in
            let reads :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterInterface"
                  []
                  [ F ]
                  I
                  "Reads",
                reads
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                        []
                        [ F; I ];
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ F ]
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              instruction,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "opcode"
                      |) in
                    let opcode :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "openvm_instructions::VmOpcode" ],
                        γ1_0
                      |) in
                    M.read (|
                      let~ mulh_opcode :
                          Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode" :=
                        M.call_closure (|
                          Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                          M.get_trait_method (|
                            "openvm_instructions::LocalOpcode",
                            Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                            [],
                            [],
                            "from_usize",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "openvm_instructions::VmOpcode",
                                "local_opcode_idx",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| opcode |) |) |);
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |) in
                      let~ data :
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ] :=
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ],
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ F ]
                              I
                              "Reads",
                            [],
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                            ],
                            "into",
                            [],
                            []
                          |),
                          [ M.read (| reads |) ]
                        |) in
                      let~ b : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                            "map",
                            [],
                            [ Ty.function [ F ] (Ty.path "u32"); Ty.path "u32" ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                data,
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "u32",
                                        M.alloc (| F, α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| F, γ |) in
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeField32",
                                                  F,
                                                  [],
                                                  [],
                                                  "as_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |) in
                      let~ c : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                            "map",
                            [],
                            [ Ty.function [ F ] (Ty.path "u32"); Ty.path "u32" ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                data,
                                Value.Integer IntegerKind.Usize 1
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "u32",
                                        M.alloc (| F, α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let y := M.copy (| F, γ |) in
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeField32",
                                                  F,
                                                  [],
                                                  [],
                                                  "as_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, y |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                  []
                                  [ F; I ];
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                                  [ NUM_LIMBS; LIMB_BITS ]
                                  [ F ]
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ],
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                    []
                                    [ F; I ];
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                                    [ NUM_LIMBS; LIMB_BITS ]
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::execution::ExecutionError"
                            ],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ];
                                Ty.path "u32";
                                Ty.path "u32"
                              ],
                            M.call_closure (|
                              Ty.tuple
                                [
                                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "u32";
                                  Ty.path "u32"
                                ],
                              M.get_function (|
                                "openvm_rv32im_circuit::mulh::core::run_mulh",
                                [ NUM_LIMBS; LIMB_BITS ],
                                []
                              |),
                              [
                                M.read (| mulh_opcode |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, b |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, c |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                let γ0_3 := M.SubPointer.get_tuple_field (| γ, 3 |) in
                                let γ0_4 := M.SubPointer.get_tuple_field (| γ, 4 |) in
                                let a :=
                                  M.copy (|
                                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                    γ0_0
                                  |) in
                                let a_mul :=
                                  M.copy (|
                                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                    γ0_1
                                  |) in
                                let carry :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                                    γ0_2
                                  |) in
                                let b_ext := M.copy (| Ty.path "u32", γ0_3 |) in
                                let c_ext := M.copy (| Ty.path "u32", γ0_4 |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.read (|
                                      M.use
                                        (M.alloc (|
                                          Ty.tuple [],
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  Value.mkStructRecord
                                                    "core::ops::range::Range"
                                                    []
                                                    [ Ty.path "usize" ]
                                                    [
                                                      ("start", Value.Integer IntegerKind.Usize 0);
                                                      ("end_", NUM_LIMBS)
                                                    ]
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      γ
                                                    |) in
                                                  M.read (|
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let i :=
                                                                    M.copy (|
                                                                      Ty.path "usize",
                                                                      γ0_0
                                                                    |) in
                                                                  M.read (|
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [],
                                                                          "add_count",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (| self |)
                                                                              |),
                                                                              "openvm_rv32im_circuit::mulh::core::MulHCoreChip",
                                                                              "range_tuple_chip"
                                                                            |)
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Ty.path "u32" ]
                                                                              ],
                                                                            M.pointer_coercion
                                                                              M.PointerCoercion.Unsize
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        2
                                                                                    ]
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ])
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ]),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            2
                                                                                        ]
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32"
                                                                                        ],
                                                                                      Value.Array
                                                                                        [
                                                                                          M.read (|
                                                                                            M.SubPointer.get_array_field (|
                                                                                              a_mul,
                                                                                              M.read (|
                                                                                                i
                                                                                              |)
                                                                                            |)
                                                                                          |);
                                                                                          M.read (|
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "u32"
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::Index",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u32";
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    carry
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    i
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |) in
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [],
                                                                          "add_count",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (| self |)
                                                                              |),
                                                                              "openvm_rv32im_circuit::mulh::core::MulHCoreChip",
                                                                              "range_tuple_chip"
                                                                            |)
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Ty.path "u32" ]
                                                                              ],
                                                                            M.pointer_coercion
                                                                              M.PointerCoercion.Unsize
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        2
                                                                                    ]
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ])
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ]),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            2
                                                                                        ]
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32"
                                                                                        ],
                                                                                      Value.Array
                                                                                        [
                                                                                          M.read (|
                                                                                            M.SubPointer.get_array_field (|
                                                                                              a,
                                                                                              M.read (|
                                                                                                i
                                                                                              |)
                                                                                            |)
                                                                                          |);
                                                                                          M.read (|
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "u32"
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::Index",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u32";
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    carry
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "usize",
                                                                                                    BinOp.Wrap.add,
                                                                                                    [
                                                                                                      NUM_LIMBS;
                                                                                                      M.read (|
                                                                                                        i
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        |))
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_trait_method (|
                                                      "core::cmp::PartialEq",
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                      [],
                                                      [
                                                        Ty.path
                                                          "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                                      ],
                                                      "ne",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.Ref, mulh_opcode |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path
                                                            "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                          Value.StructTuple
                                                            "openvm_rv32im_transpiler::instructions::MulHOpcode::MULHU"
                                                            []
                                                            []
                                                            []
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ b_sign_mask : Ty.path "u32" :=
                                                M.match_operator (|
                                                  Ty.path "u32",
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.eq,
                                                                [
                                                                  M.read (| b_ext |);
                                                                  Value.Integer IntegerKind.U32 0
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        Value.Integer IntegerKind.U32 0));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.shl,
                                                          [
                                                            Value.Integer IntegerKind.U32 1;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                LIMB_BITS;
                                                                Value.Integer IntegerKind.Usize 1
                                                              ]
                                                            |)
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              let~ c_sign_mask : Ty.path "u32" :=
                                                M.match_operator (|
                                                  Ty.path "u32",
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.eq,
                                                                [
                                                                  M.read (| c_ext |);
                                                                  Value.Integer IntegerKind.U32 0
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        Value.Integer IntegerKind.U32 0));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.shl,
                                                          [
                                                            Value.Integer IntegerKind.U32 1;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                LIMB_BITS;
                                                                Value.Integer IntegerKind.Usize 1
                                                              ]
                                                            |)
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                      [ LIMB_BITS ]
                                                      [],
                                                    "request_range",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "openvm_rv32im_circuit::mulh::core::MulHCoreChip",
                                                        "bitwise_lookup_chip"
                                                      |)
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                b,
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.sub,
                                                                  [
                                                                    NUM_LIMBS;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.read (| b_sign_mask |)
                                                          ]
                                                        |);
                                                        Value.Integer IntegerKind.I32 1
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                c,
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.sub,
                                                                  [
                                                                    NUM_LIMBS;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.read (| c_sign_mask |)
                                                          ]
                                                        |);
                                                        M.cast
                                                          (Ty.path "u32")
                                                          (M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialEq",
                                                              Ty.path
                                                                "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                              [],
                                                              [
                                                                Ty.path
                                                                  "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                                              ],
                                                              "eq",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                mulh_opcode
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                                  Value.StructTuple
                                                                    "openvm_rv32im_transpiler::instructions::MulHOpcode::MULH"
                                                                    []
                                                                    []
                                                                    []
                                                                |)
                                                              |)
                                                            ]
                                                          |))
                                                      ]
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  let~ output :
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                        []
                                        [ F; I ] :=
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                        []
                                        [ F; I ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                          []
                                          [ F; I ],
                                        "without_pc",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                                        ]
                                      |),
                                      [
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ NUM_LIMBS ]
                                                  [ Ty.path "u32" ],
                                                "map",
                                                [],
                                                [ Ty.function [ Ty.path "u32" ] F; F ]
                                              |),
                                              [
                                                M.read (| a |);
                                                M.get_trait_method (|
                                                  "p3_field::field::FieldAlgebra",
                                                  F,
                                                  [],
                                                  [],
                                                  "from_canonical_u32",
                                                  [],
                                                  []
                                                |)
                                              ]
                                            |)
                                          ]
                                      ]
                                    |) in
                                  let~ record :
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                                        [ NUM_LIMBS; LIMB_BITS ]
                                        [ F ] :=
                                    Value.mkStructRecord
                                      "openvm_rv32im_circuit::mulh::core::MulHCoreRecord"
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ F ]
                                      [
                                        ("opcode", M.read (| mulh_opcode |));
                                        ("a",
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [ Ty.path "u32" ],
                                              "map",
                                              [],
                                              [ Ty.function [ Ty.path "u32" ] F; F ]
                                            |),
                                            [
                                              M.read (| a |);
                                              M.get_trait_method (|
                                                "p3_field::field::FieldAlgebra",
                                                F,
                                                [],
                                                [],
                                                "from_canonical_u32",
                                                [],
                                                []
                                              |)
                                            ]
                                          |));
                                        ("b",
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              data,
                                              Value.Integer IntegerKind.Usize 0
                                            |)
                                          |));
                                        ("c",
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              data,
                                              Value.Integer IntegerKind.Usize 1
                                            |)
                                          |));
                                        ("a_mul",
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [ Ty.path "u32" ],
                                              "map",
                                              [],
                                              [ Ty.function [ Ty.path "u32" ] F; F ]
                                            |),
                                            [
                                              M.read (| a_mul |);
                                              M.get_trait_method (|
                                                "p3_field::field::FieldAlgebra",
                                                F,
                                                [],
                                                [],
                                                "from_canonical_u32",
                                                [],
                                                []
                                              |)
                                            ]
                                          |));
                                        ("b_ext",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_canonical_u32",
                                              [],
                                              []
                                            |),
                                            [ M.read (| b_ext |) ]
                                          |));
                                        ("c_ext",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_canonical_u32",
                                              [],
                                              []
                                            |),
                                            [ M.read (| c_ext |) ]
                                          |))
                                      ] in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                              []
                                              [ F; I ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                                              [ NUM_LIMBS; LIMB_BITS ]
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    Value.StructTuple
                                      "core::result::Result::Ok"
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                              []
                                              [ F; I ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::mulh::core::MulHCoreRecord")
                                              [ NUM_LIMBS; LIMB_BITS ]
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ]
                                      [ Value.Tuple [ M.read (| output |); M.read (| record |) ] ]
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_opcode_name(&self, opcode: usize) -> String {
              format!(
                  "{:?}",
                  MulHOpcode::from_usize(opcode - MulHOpcode::CLASS_OFFSET)
              )
          }
      *)
      Definition get_opcode_name
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; opcode ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let opcode := M.alloc (| Ty.path "usize", opcode |) in
            M.call_closure (|
              Ty.path "alloc::string::String",
              M.get_function (| "core::hint::must_use", [], [ Ty.path "alloc::string::String" ] |),
              [
                M.read (|
                  let~ res : Ty.path "alloc::string::String" :=
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_function (| "alloc::fmt::format", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "" |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [],
                                            [
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                    M.call_closure (|
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                      M.get_trait_method (|
                                                        "openvm_instructions::LocalOpcode",
                                                        Ty.path
                                                          "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                                        [],
                                                        [],
                                                        "from_usize",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (| opcode |);
                                                            M.read (|
                                                              get_constant (|
                                                                "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                                                Ty.path "usize"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  res
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(&self, row_slice: &mut [F], record: Self::Record) {
              let row_slice: &mut MulHCoreCols<_, NUM_LIMBS, LIMB_BITS> = row_slice.borrow_mut();
              row_slice.a = record.a;
              row_slice.b = record.b;
              row_slice.c = record.c;
              row_slice.a_mul = record.a_mul;
              row_slice.b_ext = record.b_ext;
              row_slice.c_ext = record.c_ext;
              row_slice.opcode_mulh_flag = F::from_bool(record.opcode == MulHOpcode::MULH);
              row_slice.opcode_mulhsu_flag = F::from_bool(record.opcode == MulHOpcode::MULHSU);
              row_slice.opcode_mulhu_flag = F::from_bool(record.opcode == MulHOpcode::MULHU);
          }
      *)
      Definition generate_trace_row
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; row_slice; record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmCoreChip"
                  []
                  [ F; I ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                    [ NUM_LIMBS; LIMB_BITS ]
                    [])
                  "Record",
                record
              |) in
            M.read (|
              let~ row_slice :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "a"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                      "a"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "b"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                      "b"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "c"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                      "c"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "a_mul"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                      "a_mul"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "b_ext"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                      "b_ext"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "c_ext"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                      "c_ext"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "opcode_mulh_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "opcode"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::MulHOpcode::MULH"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "opcode_mulhsu_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "opcode"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::MulHOpcode::MULHSU"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreCols",
                    "opcode_mulhu_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::mulh::core::MulHCoreRecord",
                              "opcode"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::MulHOpcode::MULHU"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::mulh::core::MulHCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::mulh::core::MulHCoreChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F; I ]
          (Self NUM_LIMBS LIMB_BITS F I)
          (* Instance *)
          [
            ("Record", InstanceField.Ty (_Record NUM_LIMBS LIMB_BITS F I));
            ("Air", InstanceField.Ty (_Air NUM_LIMBS LIMB_BITS F I));
            ("execute_instruction",
              InstanceField.Method (execute_instruction NUM_LIMBS LIMB_BITS F I));
            ("get_opcode_name", InstanceField.Method (get_opcode_name NUM_LIMBS LIMB_BITS F I));
            ("generate_trace_row",
              InstanceField.Method (generate_trace_row NUM_LIMBS LIMB_BITS F I));
            ("air", InstanceField.Method (air NUM_LIMBS LIMB_BITS F I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_array_Usize_2_array_NUM_LIMBS_F_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_NUM_LIMBS_F_F_I_for_openvm_rv32im_circuit_mulh_core_MulHCoreChip_NUM_LIMBS_LIMB_BITS.
    
    (*
    pub(super) fn run_mulh<const NUM_LIMBS: usize, const LIMB_BITS: usize>(
        opcode: MulHOpcode,
        x: &[u32; NUM_LIMBS],
        y: &[u32; NUM_LIMBS],
    ) -> ([u32; NUM_LIMBS], [u32; NUM_LIMBS], Vec<u32>, u32, u32) {
        let mut mul = [0; NUM_LIMBS];
        let mut carry = vec![0; 2 * NUM_LIMBS];
        for i in 0..NUM_LIMBS {
            if i > 0 {
                mul[i] = carry[i - 1];
            }
            for j in 0..=i {
                mul[i] += x[j] * y[i - j];
            }
            carry[i] = mul[i] >> LIMB_BITS;
            mul[i] %= 1 << LIMB_BITS;
        }
    
        let x_ext = (x[NUM_LIMBS - 1] >> (LIMB_BITS - 1))
            * if opcode == MulHOpcode::MULHU {
                0
            } else {
                (1 << LIMB_BITS) - 1
            };
        let y_ext = (y[NUM_LIMBS - 1] >> (LIMB_BITS - 1))
            * if opcode == MulHOpcode::MULH {
                (1 << LIMB_BITS) - 1
            } else {
                0
            };
    
        let mut mulh = [0; NUM_LIMBS];
        let mut x_prefix = 0;
        let mut y_prefix = 0;
    
        for i in 0..NUM_LIMBS {
            x_prefix += x[i];
            y_prefix += y[i];
            mulh[i] = carry[NUM_LIMBS + i - 1] + x_prefix * y_ext + y_prefix * x_ext;
            for j in (i + 1)..NUM_LIMBS {
                mulh[i] += x[j] * y[NUM_LIMBS + i - j];
            }
            carry[NUM_LIMBS + i] = mulh[i] >> LIMB_BITS;
            mulh[i] %= 1 << LIMB_BITS;
        }
    
        (mulh, mul, carry, x_ext, y_ext)
    }
    *)
    Definition run_mulh (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS; LIMB_BITS ], [], [ opcode; x; y ] =>
        ltac:(M.monadic
          (let opcode :=
            M.alloc (| Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode", opcode |) in
          let x :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              x
            |) in
          let y :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              y
            |) in
          M.read (|
            let~ mul : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
              lib.repeat (| Value.Integer IntegerKind.U32 0, NUM_LIMBS |) in
            let~ carry :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                M.get_function (| "alloc::vec::from_elem", [], [ Ty.path "u32" ] |),
                [
                  Value.Integer IntegerKind.U32 0;
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [ Value.Integer IntegerKind.Usize 2; NUM_LIMBS ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.gt,
                                                                [
                                                                  M.read (| i |);
                                                                  Value.Integer IntegerKind.Usize 0
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.SubPointer.get_array_field (|
                                                                mul,
                                                                M.read (| i |)
                                                              |),
                                                              M.read (|
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "u32" ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::Index",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.path "u32";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [ Ty.path "usize" ],
                                                                      "index",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        carry
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.sub,
                                                                        [
                                                                          M.read (| i |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::range::RangeInclusive")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::range::RangeInclusive")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::range::RangeInclusive")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::RangeInclusive")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::RangeInclusive")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  "new",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  Value.Integer IntegerKind.Usize 0;
                                                                  M.read (| i |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::RangeInclusive")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                M.loop (|
                                                                  Ty.tuple [],
                                                                  ltac:(M.monadic
                                                                    (let~ _ : Ty.tuple [] :=
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [ Ty.path "usize" ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::RangeInclusive")
                                                                                []
                                                                                [ Ty.path "usize" ],
                                                                              [],
                                                                              [],
                                                                              "next",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    iter
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.is_struct_tuple (|
                                                                                  γ,
                                                                                  "core::option::Option::None"
                                                                                |) in
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let j :=
                                                                                M.copy (|
                                                                                  Ty.path "usize",
                                                                                  γ0_0
                                                                                |) in
                                                                              M.read (|
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  let β :=
                                                                                    M.SubPointer.get_array_field (|
                                                                                      mul,
                                                                                      M.read (| i |)
                                                                                    |) in
                                                                                  M.write (|
                                                                                    β,
                                                                                    M.call_closure (|
                                                                                      Ty.path "u32",
                                                                                      BinOp.Wrap.add,
                                                                                      [
                                                                                        M.read (|
                                                                                          β
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "u32",
                                                                                          BinOp.Wrap.mul,
                                                                                          [
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    x
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  j
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    y
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.sub,
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)))
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |))
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [ Ty.path "u32" ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::IndexMut",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "u32";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [ Ty.path "usize" ],
                                                        "index_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, carry |);
                                                        M.read (| i |)
                                                      ]
                                                    |)
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.shr,
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          mul,
                                                          M.read (| i |)
                                                        |)
                                                      |);
                                                      LIMB_BITS
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                let β :=
                                                  M.SubPointer.get_array_field (|
                                                    mul,
                                                    M.read (| i |)
                                                  |) in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.rem,
                                                    [
                                                      M.read (| β |);
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        BinOp.Wrap.shl,
                                                        [ Value.Integer IntegerKind.U32 1; LIMB_BITS
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ x_ext : Ty.path "u32" :=
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.mul,
                [
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shr,
                    [
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                      |)
                    ]
                  |);
                  M.match_operator (|
                    Ty.path "u32",
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                    [],
                                    [ Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                    ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, opcode |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path
                                          "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                        Value.StructTuple
                                          "openvm_rv32im_transpiler::instructions::MulHOpcode::MULHU"
                                          []
                                          []
                                          []
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          Value.Integer IntegerKind.U32 0));
                      fun γ =>
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.sub,
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.shl,
                                [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                              |);
                              Value.Integer IntegerKind.U32 1
                            ]
                          |)))
                    ]
                  |)
                ]
              |) in
            let~ y_ext : Ty.path "u32" :=
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.mul,
                [
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shr,
                    [
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| y |) |),
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                      |)
                    ]
                  |);
                  M.match_operator (|
                    Ty.path "u32",
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                    [],
                                    [ Ty.path "openvm_rv32im_transpiler::instructions::MulHOpcode"
                                    ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, opcode |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path
                                          "openvm_rv32im_transpiler::instructions::MulHOpcode",
                                        Value.StructTuple
                                          "openvm_rv32im_transpiler::instructions::MulHOpcode::MULH"
                                          []
                                          []
                                          []
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.sub,
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.shl,
                                [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                              |);
                              Value.Integer IntegerKind.U32 1
                            ]
                          |)));
                      fun γ => ltac:(M.monadic (Value.Integer IntegerKind.U32 0))
                    ]
                  |)
                ]
              |) in
            let~ mulh : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
              lib.repeat (| Value.Integer IntegerKind.U32 0, NUM_LIMBS |) in
            let~ x_prefix : Ty.path "u32" := Value.Integer IntegerKind.U32 0 in
            let~ y_prefix : Ty.path "u32" := Value.Integer IntegerKind.U32 0 in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                let β := x_prefix in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| β |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| x |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                let β := y_prefix in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| β |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| y |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.SubPointer.get_array_field (|
                                                    mulh,
                                                    M.read (| i |)
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.read (|
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "u32" ],
                                                                M.get_trait_method (|
                                                                  "core::ops::index::Index",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.path "u32";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [ Ty.path "usize" ],
                                                                  "index",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    carry
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.sub,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.add,
                                                                        [ NUM_LIMBS; M.read (| i |)
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            BinOp.Wrap.mul,
                                                            [
                                                              M.read (| x_prefix |);
                                                              M.read (| y_ext |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        BinOp.Wrap.mul,
                                                        [ M.read (| y_prefix |); M.read (| x_ext |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              Value.mkStructRecord
                                                                "core::ops::range::Range"
                                                                []
                                                                [ Ty.path "usize" ]
                                                                [
                                                                  ("start",
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.add,
                                                                      [
                                                                        M.read (| i |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                    |));
                                                                  ("end_", NUM_LIMBS)
                                                                ]
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                M.loop (|
                                                                  Ty.tuple [],
                                                                  ltac:(M.monadic
                                                                    (let~ _ : Ty.tuple [] :=
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [ Ty.path "usize" ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::Range")
                                                                                []
                                                                                [ Ty.path "usize" ],
                                                                              [],
                                                                              [],
                                                                              "next",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    iter
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.is_struct_tuple (|
                                                                                  γ,
                                                                                  "core::option::Option::None"
                                                                                |) in
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let j :=
                                                                                M.copy (|
                                                                                  Ty.path "usize",
                                                                                  γ0_0
                                                                                |) in
                                                                              M.read (|
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  let β :=
                                                                                    M.SubPointer.get_array_field (|
                                                                                      mulh,
                                                                                      M.read (| i |)
                                                                                    |) in
                                                                                  M.write (|
                                                                                    β,
                                                                                    M.call_closure (|
                                                                                      Ty.path "u32",
                                                                                      BinOp.Wrap.add,
                                                                                      [
                                                                                        M.read (|
                                                                                          β
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "u32",
                                                                                          BinOp.Wrap.mul,
                                                                                          [
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    x
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  j
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    y
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.sub,
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      BinOp.Wrap.add,
                                                                                                      [
                                                                                                        NUM_LIMBS;
                                                                                                        M.read (|
                                                                                                          i
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)))
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |))
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [ Ty.path "u32" ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::IndexMut",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "u32";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [ Ty.path "usize" ],
                                                        "index_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, carry |);
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.add,
                                                          [ NUM_LIMBS; M.read (| i |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.shr,
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          mulh,
                                                          M.read (| i |)
                                                        |)
                                                      |);
                                                      LIMB_BITS
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                let β :=
                                                  M.SubPointer.get_array_field (|
                                                    mulh,
                                                    M.read (| i |)
                                                  |) in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.rem,
                                                    [
                                                      M.read (| β |);
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        BinOp.Wrap.shl,
                                                        [ Value.Integer IntegerKind.U32 1; LIMB_BITS
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            M.alloc (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ];
                  Ty.path "u32";
                  Ty.path "u32"
                ],
              Value.Tuple
                [
                  M.read (| mulh |);
                  M.read (| mul |);
                  M.read (| carry |);
                  M.read (| x_ext |);
                  M.read (| y_ext |)
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_run_mulh :
      M.IsFunction.C "openvm_rv32im_circuit::mulh::core::run_mulh" run_mulh.
    Admitted.
    Global Typeclasses Opaque run_mulh.
  End core.
End mulh.
