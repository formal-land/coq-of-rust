(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module air_builders.
  Module symbolic.
    Module dag.
      (*
      Enum SymbolicExpressionNode
      {
        const_params := [];
        ty_params := [ "F" ];
        variants :=
          [
            {
              name := "Variable";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                      []
                      [ F ]
                  ];
            };
            {
              name := "IsFirstRow";
              item := StructTuple [];
            };
            {
              name := "IsLastRow";
              item := StructTuple [];
            };
            {
              name := "IsTransition";
              item := StructTuple [];
            };
            {
              name := "Constant";
              item := StructTuple [ F ];
            };
            {
              name := "Add";
              item :=
                StructRecord
                  [
                    ("left_idx", Ty.path "usize");
                    ("right_idx", Ty.path "usize");
                    ("degree_multiple", Ty.path "usize")
                  ];
            };
            {
              name := "Sub";
              item :=
                StructRecord
                  [
                    ("left_idx", Ty.path "usize");
                    ("right_idx", Ty.path "usize");
                    ("degree_multiple", Ty.path "usize")
                  ];
            };
            {
              name := "Neg";
              item :=
                StructRecord [ ("idx", Ty.path "usize"); ("degree_multiple", Ty.path "usize") ];
            };
            {
              name := "Mul";
              item :=
                StructRecord
                  [
                    ("left_idx", Ty.path "usize");
                    ("right_idx", Ty.path "usize");
                    ("degree_multiple", Ty.path "usize")
                  ];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_SymbolicExpressionNode_Variable :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable"
          0.
      Axiom IsDiscriminant_SymbolicExpressionNode_IsFirstRow :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsFirstRow"
          1.
      Axiom IsDiscriminant_SymbolicExpressionNode_IsLastRow :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsLastRow"
          2.
      Axiom IsDiscriminant_SymbolicExpressionNode_IsTransition :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsTransition"
          3.
      Axiom IsDiscriminant_SymbolicExpressionNode_Constant :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant"
          4.
      Axiom IsDiscriminant_SymbolicExpressionNode_Add :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add"
          5.
      Axiom IsDiscriminant_SymbolicExpressionNode_Sub :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub"
          6.
      Axiom IsDiscriminant_SymbolicExpressionNode_Neg :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg"
          7.
      Axiom IsDiscriminant_SymbolicExpressionNode_Mul :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul"
          8.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
            []
            [ F ].
        
        (* Clone *)
        Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                  []
                  [ F ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable"
                        []
                        [ F ]
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ],
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ],
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsFirstRow"
                        |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsFirstRow"
                        []
                        [ F ]
                        []));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsLastRow"
                        |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsLastRow"
                        []
                        [ F ]
                        []));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsTransition"
                        |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsTransition"
                        []
                        [ F ]
                        []));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant",
                          0
                        |) in
                      let __self_0 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ1_0 |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant"
                        []
                        [ F ]
                        [
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              F,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                          "left_idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                          "right_idx"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add"
                        []
                        [ F ]
                        [
                          ("left_idx",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("right_idx",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                          "left_idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                          "right_idx"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub"
                        []
                        [ F ]
                        [
                          ("left_idx",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("right_idx",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                          "idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg"
                        []
                        [ F ]
                        [
                          ("idx",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                          "left_idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                          "right_idx"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul"
                        []
                        [ F ]
                        [
                          ("left_idx",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("right_idx",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
            []
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Variable" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ]
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsFirstRow"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IsFirstRow" |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsLastRow"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IsLastRow" |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsTransition"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IsTransition" |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant",
                          0
                        |) in
                      let __self_0 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ1_0 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Constant" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ F ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                          "left_idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                          "right_idx"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Add" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "left_idx" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "right_idx" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |) ]
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                          "left_idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                          "right_idx"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Sub" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "left_idx" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "right_idx" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |) ]
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                          "idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field2_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Neg" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "idx" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                          "left_idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                          "right_idx"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Mul" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "left_idx" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "right_idx" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |) ]
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
      
      Module underscore.
        Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
              []
              [ F ].
          
          (* Serialize *)
          Definition serialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                          []
                          [ F ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.deref (| M.read (| self |) |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable",
                                0
                              |) in
                            let __field0 :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ]
                                  ],
                                γ0_0
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_newtype_variant",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ]
                                ]
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpressionNode" |);
                                Value.Integer IntegerKind.U32 0;
                                mk_str (| "Variable" |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __field0 |) |) |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsFirstRow"
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_unit_variant",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpressionNode" |);
                                Value.Integer IntegerKind.U32 1;
                                mk_str (| "IsFirstRow" |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsLastRow"
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_unit_variant",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpressionNode" |);
                                Value.Integer IntegerKind.U32 2;
                                mk_str (| "IsLastRow" |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsTransition"
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_unit_variant",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpressionNode" |);
                                Value.Integer IntegerKind.U32 3;
                                mk_str (| "IsTransition" |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant",
                                0
                              |) in
                            let __field0 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ0_0 |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_newtype_variant",
                                [],
                                [ F ]
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpressionNode" |);
                                Value.Integer IntegerKind.U32 4;
                                mk_str (| "Constant" |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __field0 |) |) |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                "left_idx"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                "right_idx"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                "degree_multiple"
                              |) in
                            let left_idx :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            let right_idx :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_2 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "SymbolicExpressionNode" |);
                                            Value.Integer IntegerKind.U32 5;
                                            mk_str (| "Add" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        Value.Integer IntegerKind.Usize 0;
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "left_idx" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_idx |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "right_idx" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_idx |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "degree_multiple" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| degree_multiple |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                "left_idx"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                "right_idx"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                "degree_multiple"
                              |) in
                            let left_idx :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            let right_idx :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_2 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "SymbolicExpressionNode" |);
                                            Value.Integer IntegerKind.U32 6;
                                            mk_str (| "Sub" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        Value.Integer IntegerKind.Usize 0;
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "left_idx" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_idx |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "right_idx" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_idx |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "degree_multiple" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| degree_multiple |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                                "idx"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                                "degree_multiple"
                              |) in
                            let idx :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "SymbolicExpressionNode" |);
                                            Value.Integer IntegerKind.U32 7;
                                            mk_str (| "Neg" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    Value.Integer IntegerKind.Usize 0;
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "idx" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| idx |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "degree_multiple" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| degree_multiple |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                "left_idx"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                "right_idx"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                "degree_multiple"
                              |) in
                            let left_idx :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            let right_idx :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_2 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "SymbolicExpressionNode" |);
                                            Value.Integer IntegerKind.U32 8;
                                            mk_str (| "Mul" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        Value.Integer IntegerKind.Usize 0;
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "left_idx" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_idx |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "right_idx" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_idx |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "degree_multiple" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| degree_multiple |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)))
                      ]
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
        End Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
        Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
              []
              [ F ].
          
          (* Deserialize *)
          Definition deserialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_enum",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::_'1::deserialize::__Visitor")
                        []
                        [ F ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "SymbolicExpressionNode" |);
                    M.read (|
                      get_constant (|
                        "openvm_stark_backend::air_builders::symbolic::dag::_'1::deserialize::VARIANTS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_stark_backend::air_builders::symbolic::dag::_'1::deserialize::__Visitor"
                      []
                      [ F ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                []
                                [ F ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
        End Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
        Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
              []
              [ F ].
          
          (* Serialize *)
          Definition serialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                          []
                          [ F ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ __serde_state :
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct" :=
                        M.match_operator (|
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    [],
                                    "serialize_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    mk_str (| "SymbolicExpressionDag" |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.cast (Ty.path "usize") (Value.Bool false);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "nodes" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                                            "nodes"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "constraint_idx" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                                            "constraint_idx"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            [],
                            [],
                            "end",
                            [],
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
        End Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
        Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
              []
              [ F ].
          
          (* Deserialize *)
          Definition deserialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_struct",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::_'3::deserialize::__Visitor")
                        []
                        [ F ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "SymbolicExpressionDag" |);
                    M.read (|
                      get_constant (|
                        "openvm_stark_backend::air_builders::symbolic::dag::_'3::deserialize::FIELDS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_stark_backend::air_builders::symbolic::dag::_'3::deserialize::__Visitor"
                      []
                      [ F ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                                []
                                [ F ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
        End Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
        Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
              []
              [ F ].
          
          (* Serialize *)
          Definition serialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                          []
                          [ F ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ __serde_state :
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct" :=
                        M.match_operator (|
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    [],
                                    "serialize_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    mk_str (| "SymbolicConstraintsDag" |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.cast (Ty.path "usize") (Value.Bool false);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                                        []
                                        [ F ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "constraints" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                            "constraints"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::Interaction")
                                            []
                                            [ Ty.path "usize" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "interactions" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                            "interactions"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            [],
                            [],
                            "end",
                            [],
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
        End Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
        Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
              []
              [ F ].
          
          (* Deserialize *)
          Definition deserialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                        []
                        [ F ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_struct",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::_'5::deserialize::__Visitor")
                        []
                        [ F ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "SymbolicConstraintsDag" |);
                    M.read (|
                      get_constant (|
                        "openvm_stark_backend::air_builders::symbolic::dag::_'5::deserialize::FIELDS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_stark_backend::air_builders::symbolic::dag::_'5::deserialize::__Visitor"
                      []
                      [ F ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                                []
                                [ F ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
        End Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
      End underscore.
      
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
            []
            [ F ].
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
      
      Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
            []
            [ F ].
        
        (* PartialEq *)
        Definition eq (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ]
                    ],
                  other
                |) in
              M.read (|
                let~ __self_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                          []
                          [ F ]
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |) in
                let~ __arg1_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                          []
                          [ F ]
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |) in
                M.alloc (|
                  Ty.path "bool",
                  LogicalOp.and (|
                    M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                    |),
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.path "bool",
                        M.alloc (|
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                    []
                                    [ F ]
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                    []
                                    [ F ]
                                ]
                            ],
                          Value.Tuple [ M.read (| self |); M.read (| other |) ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable",
                                  0
                                |) in
                              let __self_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ]
                                    ],
                                  γ2_0
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable",
                                  0
                                |) in
                              let __arg1_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ]
                                    ],
                                  γ2_0
                                |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ]
                                    ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant",
                                  0
                                |) in
                              let __self_0 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ2_0 |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply (Ty.path "&") [] [ F ],
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ F ] ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                  "left_idx"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                  "right_idx"
                                |) in
                              let γ2_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                  "degree_multiple"
                                |) in
                              let __self_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __self_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              let __self_2 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_2 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                  "left_idx"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                  "right_idx"
                                |) in
                              let γ2_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                  "degree_multiple"
                                |) in
                              let __arg1_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __arg1_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              let __arg1_2 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_2 |) in
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        [],
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, __self_1 |);
                                        M.borrow (| Pointer.Kind.Ref, __arg1_1 |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_2 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_2 |)
                                    ]
                                  |)))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                  "left_idx"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                  "right_idx"
                                |) in
                              let γ2_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                  "degree_multiple"
                                |) in
                              let __self_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __self_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              let __self_2 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_2 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                  "left_idx"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                  "right_idx"
                                |) in
                              let γ2_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                  "degree_multiple"
                                |) in
                              let __arg1_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __arg1_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              let __arg1_2 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_2 |) in
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        [],
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, __self_1 |);
                                        M.borrow (| Pointer.Kind.Ref, __arg1_1 |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_2 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_2 |)
                                    ]
                                  |)))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                                  "idx"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                                  "degree_multiple"
                                |) in
                              let __self_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __self_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                                  "idx"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                                  "degree_multiple"
                                |) in
                              let __arg1_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __arg1_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              LogicalOp.and (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_1 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_1 |)
                                    ]
                                  |)))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                  "left_idx"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                  "right_idx"
                                |) in
                              let γ2_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                  "degree_multiple"
                                |) in
                              let __self_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __self_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              let __self_2 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_2 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                  "left_idx"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                  "right_idx"
                                |) in
                              let γ2_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                  "degree_multiple"
                                |) in
                              let __arg1_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __arg1_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              let __arg1_2 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_2 |) in
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        [],
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, __self_1 |);
                                        M.borrow (| Pointer.Kind.Ref, __arg1_1 |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_2 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_2 |)
                                    ]
                                  |)))
                              |)));
                          fun γ => ltac:(M.monadic (Value.Bool true))
                        ]
                      |)))
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("eq", InstanceField.Method (eq F)) ].
      End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
      
      Module Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
            []
            [ F ].
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.tuple [],
                        Value.DeclaredButUndefined,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.tuple [],
                                Value.DeclaredButUndefined,
                                [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                              |)))
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq F))
            ].
      End Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionNode_F.
      
      (* StructRecord
        {
          name := "SymbolicExpressionDag";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("nodes",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                      []
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("constraint_idx",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
            []
            [ F ].
        
        (* Clone *)
        Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag"
                []
                [ F ]
                [
                  ("nodes",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                                "nodes"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("constraint_idx",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                                "constraint_idx"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
            []
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "SymbolicExpressionDag" |) |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "nodes" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                              "nodes"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "constraint_idx" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                                  "constraint_idx"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
      
      
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
            []
            [ F ].
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
      
      Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
            []
            [ F ].
        
        (* PartialEq *)
        Definition eq (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ]
                    ],
                  other
                |) in
              LogicalOp.and (|
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                        "nodes"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                        "nodes"
                      |)
                    |)
                  ]
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                          "constraint_idx"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                          "constraint_idx"
                        |)
                      |)
                    ]
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("eq", InstanceField.Method (eq F)) ].
      End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
      
      Module Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
            []
            [ F ].
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.tuple [],
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq F))
            ].
      End Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
      
      Module Impl_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
            []
            [ F ].
        
        (*
            pub fn max_rotation(&self) -> usize {
                let mut rotation = 0;
                for node in &self.nodes {
                    if let SymbolicExpressionNode::Variable(var) = node {
                        rotation = rotation.max(var.entry.offset().unwrap_or(0));
                    }
                }
                rotation
            }
        *)
        Definition max_rotation
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ rotation : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                  []
                                  [ F ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                    []
                                    [ F ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                                    "nodes"
                                  |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                          []
                                          [ F ]
                                      ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                      []
                                                      [ F ]
                                                  ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                      []
                                                      [ F ]
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let node :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                          []
                                                          [ F ]
                                                      ],
                                                    γ0_0
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ := node in
                                                        let γ := M.read (| γ |) in
                                                        let γ1_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable",
                                                            0
                                                          |) in
                                                        let var :=
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                  []
                                                                  [ F ]
                                                              ],
                                                            γ1_0
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              rotation,
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                M.get_trait_method (|
                                                                  "core::cmp::Ord",
                                                                  Ty.path "usize",
                                                                  [],
                                                                  [],
                                                                  "max",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| rotation |);
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      "unwrap_or",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                                                                          "offset",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (| var |)
                                                                              |),
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                                                                              "entry"
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        0
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                rotation
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_max_rotation :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "max_rotation" (max_rotation F).
        Admitted.
        Global Typeclasses Opaque max_rotation.
        
        (*
            pub fn num_constraints(&self) -> usize {
                self.constraint_idx.len()
            }
        *)
        Definition num_constraints
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  "len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                      "constraint_idx"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_num_constraints :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "num_constraints" (num_constraints F).
        Admitted.
        Global Typeclasses Opaque num_constraints.
        (*
            fn to_symbolic_expressions(&self) -> Vec<Arc<SymbolicExpression<F>>> {
                let mut exprs: Vec<Arc<SymbolicExpression<_>>> = Vec::with_capacity(self.nodes.len());
                for node in &self.nodes {
                    let expr = match *node {
                        SymbolicExpressionNode::Variable(var) => SymbolicExpression::Variable(var),
                        SymbolicExpressionNode::IsFirstRow => SymbolicExpression::IsFirstRow,
                        SymbolicExpressionNode::IsLastRow => SymbolicExpression::IsLastRow,
                        SymbolicExpressionNode::IsTransition => SymbolicExpression::IsTransition,
                        SymbolicExpressionNode::Constant(f) => SymbolicExpression::Constant(f),
                        SymbolicExpressionNode::Add {
                            left_idx,
                            right_idx,
                            degree_multiple,
                        } => SymbolicExpression::Add {
                            x: exprs[left_idx].clone(),
                            y: exprs[right_idx].clone(),
                            degree_multiple,
                        },
                        SymbolicExpressionNode::Sub {
                            left_idx,
                            right_idx,
                            degree_multiple,
                        } => SymbolicExpression::Sub {
                            x: exprs[left_idx].clone(),
                            y: exprs[right_idx].clone(),
                            degree_multiple,
                        },
                        SymbolicExpressionNode::Neg {
                            idx,
                            degree_multiple,
                        } => SymbolicExpression::Neg {
                            x: exprs[idx].clone(),
                            degree_multiple,
                        },
                        SymbolicExpressionNode::Mul {
                            left_idx,
                            right_idx,
                            degree_multiple,
                        } => SymbolicExpression::Mul {
                            x: exprs[left_idx].clone(),
                            y: exprs[right_idx].clone(),
                            degree_multiple,
                        },
                    };
                    exprs.push(Arc::new(expr));
                }
                exprs
            }
        *)
        Definition to_symbolic_expressions
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ exprs :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "with_capacity",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                              "nodes"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                  []
                                  [ F ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                    []
                                    [ F ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                                    "nodes"
                                  |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                          []
                                          [ F ]
                                      ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                      []
                                                      [ F ]
                                                  ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                      []
                                                      [ F ]
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let node :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                          []
                                                          [ F ]
                                                      ],
                                                    γ0_0
                                                  |) in
                                                M.read (|
                                                  let~ expr :
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                        []
                                                        [ F ] :=
                                                    M.match_operator (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                        []
                                                        [ F ],
                                                      M.deref (| M.read (| node |) |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable",
                                                                0
                                                              |) in
                                                            let var :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                  []
                                                                  [ F ],
                                                                γ0_0
                                                              |) in
                                                            Value.StructTuple
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable"
                                                              []
                                                              [ F ]
                                                              [ M.read (| var |) ]));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsFirstRow"
                                                              |) in
                                                            Value.StructTuple
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                                                              []
                                                              [ F ]
                                                              []));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsLastRow"
                                                              |) in
                                                            Value.StructTuple
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                                                              []
                                                              [ F ]
                                                              []));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsTransition"
                                                              |) in
                                                            Value.StructTuple
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                                                              []
                                                              [ F ]
                                                              []));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant",
                                                                0
                                                              |) in
                                                            let f := M.copy (| F, γ0_0 |) in
                                                            Value.StructTuple
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                                                              []
                                                              [ F ]
                                                              [ M.read (| f |) ]));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                                                "left_idx"
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                                                "right_idx"
                                                              |) in
                                                            let γ0_2 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                                                "degree_multiple"
                                                              |) in
                                                            let left_idx :=
                                                              M.copy (| Ty.path "usize", γ0_0 |) in
                                                            let right_idx :=
                                                              M.copy (| Ty.path "usize", γ0_1 |) in
                                                            let degree_multiple :=
                                                              M.copy (| Ty.path "usize", γ0_2 |) in
                                                            Value.mkStructRecord
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add"
                                                              []
                                                              [ F ]
                                                              [
                                                                ("x",
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                      []
                                                                                      [ F ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                        []
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [ Ty.path "usize" ],
                                                                              "index",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                exprs
                                                                              |);
                                                                              M.read (| left_idx |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("y",
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                      []
                                                                                      [ F ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                        []
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [ Ty.path "usize" ],
                                                                              "index",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                exprs
                                                                              |);
                                                                              M.read (| right_idx |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("degree_multiple",
                                                                  M.read (| degree_multiple |))
                                                              ]));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                                                "left_idx"
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                                                "right_idx"
                                                              |) in
                                                            let γ0_2 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                                                "degree_multiple"
                                                              |) in
                                                            let left_idx :=
                                                              M.copy (| Ty.path "usize", γ0_0 |) in
                                                            let right_idx :=
                                                              M.copy (| Ty.path "usize", γ0_1 |) in
                                                            let degree_multiple :=
                                                              M.copy (| Ty.path "usize", γ0_2 |) in
                                                            Value.mkStructRecord
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub"
                                                              []
                                                              [ F ]
                                                              [
                                                                ("x",
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                      []
                                                                                      [ F ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                        []
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [ Ty.path "usize" ],
                                                                              "index",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                exprs
                                                                              |);
                                                                              M.read (| left_idx |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("y",
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                      []
                                                                                      [ F ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                        []
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [ Ty.path "usize" ],
                                                                              "index",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                exprs
                                                                              |);
                                                                              M.read (| right_idx |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("degree_multiple",
                                                                  M.read (| degree_multiple |))
                                                              ]));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                                                                "idx"
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                                                                "degree_multiple"
                                                              |) in
                                                            let idx :=
                                                              M.copy (| Ty.path "usize", γ0_0 |) in
                                                            let degree_multiple :=
                                                              M.copy (| Ty.path "usize", γ0_1 |) in
                                                            Value.mkStructRecord
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg"
                                                              []
                                                              [ F ]
                                                              [
                                                                ("x",
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                      []
                                                                                      [ F ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                        []
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [ Ty.path "usize" ],
                                                                              "index",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                exprs
                                                                              |);
                                                                              M.read (| idx |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("degree_multiple",
                                                                  M.read (| degree_multiple |))
                                                              ]));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                                                "left_idx"
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                                                "right_idx"
                                                              |) in
                                                            let γ0_2 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                                                "degree_multiple"
                                                              |) in
                                                            let left_idx :=
                                                              M.copy (| Ty.path "usize", γ0_0 |) in
                                                            let right_idx :=
                                                              M.copy (| Ty.path "usize", γ0_1 |) in
                                                            let degree_multiple :=
                                                              M.copy (| Ty.path "usize", γ0_2 |) in
                                                            Value.mkStructRecord
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul"
                                                              []
                                                              [ F ]
                                                              [
                                                                ("x",
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                      []
                                                                                      [ F ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                        []
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [ Ty.path "usize" ],
                                                                              "index",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                exprs
                                                                              |);
                                                                              M.read (| left_idx |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("y",
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                      []
                                                                                      [ F ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                        []
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [ Ty.path "usize" ],
                                                                              "index",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                exprs
                                                                              |);
                                                                              M.read (| right_idx |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("degree_multiple",
                                                                  M.read (| degree_multiple |))
                                                              ]))
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, exprs |);
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                []
                                                                [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| expr |) ]
                                                        |)
                                                      ]
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                exprs
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_to_symbolic_expressions :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "to_symbolic_expressions" (to_symbolic_expressions F).
        Admitted.
        Global Typeclasses Opaque to_symbolic_expressions.
      End Impl_openvm_stark_backend_air_builders_symbolic_dag_SymbolicExpressionDag_F.
      
      (* StructRecord
        {
          name := "SymbolicConstraintsDag";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("constraints",
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                  []
                  [ F ]);
              ("interactions",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                      []
                      [ Ty.path "usize" ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
            []
            [ F ].
        
        (* Clone *)
        Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                        []
                        [ F ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag"
                []
                [ F ]
                [
                  ("constraints",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                          []
                          [ F ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                "constraints"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("interactions",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::Interaction")
                            []
                            [ Ty.path "usize" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::Interaction")
                              []
                              [ Ty.path "usize" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                "interactions"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
            []
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "SymbolicConstraintsDag" |) |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "constraints" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                            []
                            [ F ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                              "constraints"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "interactions" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [ Ty.path "usize" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                                        []
                                        [ Ty.path "usize" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                  "interactions"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
      
      
      
      (*
      pub(crate) fn build_symbolic_constraints_dag<F: Field>(
          constraints: &[SymbolicExpression<F>],
          interactions: &[SymbolicInteraction<F>],
      ) -> SymbolicConstraintsDag<F> {
          let mut expr_to_idx = FxHashMap::default();
          let mut nodes = Vec::new();
          let mut constraint_idx: Vec<usize> = constraints
              .iter()
              .map(|expr| topological_sort_symbolic_expr(expr, &mut expr_to_idx, &mut nodes))
              .collect();
          constraint_idx.sort();
          let interactions: Vec<Interaction<usize>> = interactions
              .iter()
              .map(|interaction| {
                  let fields: Vec<usize> = interaction
                      .message
                      .iter()
                      .map(|field_expr| {
                          topological_sort_symbolic_expr(field_expr, &mut expr_to_idx, &mut nodes)
                      })
                      .collect();
                  let count =
                      topological_sort_symbolic_expr(&interaction.count, &mut expr_to_idx, &mut nodes);
                  Interaction {
                      message: fields,
                      count,
                      bus_index: interaction.bus_index,
                      count_weight: interaction.count_weight,
                  }
              })
              .collect();
          // Note[jpw]: there could be few nodes created after `constraint_idx` is built
          // from `interactions` even though constraints already contain all interactions.
          // This should be marginal and is not optimized for now.
          let constraints = SymbolicExpressionDag {
              nodes,
              constraint_idx,
          };
          SymbolicConstraintsDag {
              constraints,
              interactions,
          }
      }
      *)
      Definition build_symbolic_constraints_dag
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [ F ], [ constraints; interactions ] =>
          ltac:(M.monadic
            (let constraints :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ]
                  ],
                constraints
              |) in
            let interactions :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::Interaction")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ]
                      ]
                  ],
                interactions
              |) in
            M.read (|
              let~ expr_to_idx :
                  Ty.apply
                    (Ty.path "std::collections::hash::map::HashMap")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ];
                      Ty.path "usize";
                      Ty.path "rustc_hash::FxBuildHasher"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "std::collections::hash::map::HashMap")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ];
                      Ty.path "usize";
                      Ty.path "rustc_hash::FxBuildHasher"
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ];
                        Ty.path "usize";
                        Ty.path "rustc_hash::FxBuildHasher"
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |) in
              let~ nodes :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |) in
              let~ constraint_idx :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ]
                            ]
                            (Ty.path "usize")
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.path "usize";
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ]
                            ]
                            (Ty.path "usize")
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ],
                            "iter",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| constraints |) |) |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.path "usize",
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let expr :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ],
                                              γ
                                            |) in
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_function (|
                                              "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                              [],
                                              [ F ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| expr |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, expr_to_idx |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, nodes |)
                                                |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                    "sort",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, constraint_idx |) ]
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ interactions :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                        []
                        [ Ty.path "usize" ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                        []
                        [ Ty.path "usize" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::Interaction")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ]
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::Interaction")
                            []
                            [ Ty.path "usize" ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::Interaction")
                            []
                            [ Ty.path "usize" ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::Interaction")
                              []
                              [ Ty.path "usize" ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::Interaction")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ]
                          ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::Interaction")
                            []
                            [ Ty.path "usize" ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::Interaction")
                              []
                              [ Ty.path "usize" ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ]
                              ],
                            "iter",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| interactions |) |) |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [ Ty.path "usize" ],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::Interaction")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ]
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let interaction :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::interaction::Interaction")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              γ
                                            |) in
                                          M.read (|
                                            let~ fields :
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ] :=
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                []
                                                                [ F ]
                                                            ]
                                                        ]
                                                        (Ty.path "usize")
                                                    ],
                                                  [],
                                                  [],
                                                  "collect",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                              []
                                                              [ F ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [ F ]
                                                              ]
                                                          ]
                                                          (Ty.path "usize")
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ],
                                                      [],
                                                      [],
                                                      "map",
                                                      [],
                                                      [
                                                        Ty.path "usize";
                                                        Ty.function
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [ F ]
                                                              ]
                                                          ]
                                                          (Ty.path "usize")
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                              []
                                                              [ F ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                []
                                                                [ F ]
                                                            ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                        []
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| interaction |)
                                                                      |),
                                                                      "openvm_stark_backend::interaction::Interaction",
                                                                      "message"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              ltac:(M.monadic
                                                                (M.match_operator (|
                                                                  Ty.path "usize",
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    α0
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let field_expr :=
                                                                          M.copy (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                  []
                                                                                  [ F ]
                                                                              ],
                                                                            γ
                                                                          |) in
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          M.get_function (|
                                                                            "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                                                            [],
                                                                            [ F ]
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  field_expr
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  expr_to_idx
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  nodes
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)))
                                                            | _ =>
                                                              M.impossible
                                                                "wrong number of arguments"
                                                            end))
                                                    ]
                                                  |)
                                                ]
                                              |) in
                                            let~ count : Ty.path "usize" :=
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_function (|
                                                  "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                                  [],
                                                  [ F ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| interaction |) |),
                                                          "openvm_stark_backend::interaction::Interaction",
                                                          "count"
                                                        |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        expr_to_idx
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, nodes |)
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::interaction::Interaction")
                                                []
                                                [ Ty.path "usize" ],
                                              Value.mkStructRecord
                                                "openvm_stark_backend::interaction::Interaction"
                                                []
                                                [ Ty.path "usize" ]
                                                [
                                                  ("message", M.read (| fields |));
                                                  ("count", M.read (| count |));
                                                  ("bus_index",
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interaction |) |),
                                                        "openvm_stark_backend::interaction::Interaction",
                                                        "bus_index"
                                                      |)
                                                    |));
                                                  ("count_weight",
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interaction |) |),
                                                        "openvm_stark_backend::interaction::Interaction",
                                                        "count_weight"
                                                      |)
                                                    |))
                                                ]
                                            |)
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |) in
              let~ constraints :
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                    []
                    [ F ] :=
                Value.mkStructRecord
                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag"
                  []
                  [ F ]
                  [ ("nodes", M.read (| nodes |)); ("constraint_idx", M.read (| constraint_idx |))
                  ] in
              M.alloc (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                  []
                  [ F ],
                Value.mkStructRecord
                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag"
                  []
                  [ F ]
                  [
                    ("constraints", M.read (| constraints |));
                    ("interactions", M.read (| interactions |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_build_symbolic_constraints_dag :
        M.IsFunction.C
          "openvm_stark_backend::air_builders::symbolic::dag::build_symbolic_constraints_dag"
          build_symbolic_constraints_dag.
      Admitted.
      Global Typeclasses Opaque build_symbolic_constraints_dag.
      
      (*
      fn topological_sort_symbolic_expr<'a, F: Field>(
          expr: &'a SymbolicExpression<F>,
          expr_to_idx: &mut FxHashMap<&'a SymbolicExpression<F>, usize>,
          nodes: &mut Vec<SymbolicExpressionNode<F>>,
      ) -> usize {
          if let Some(&idx) = expr_to_idx.get(expr) {
              return idx;
          }
          let node = match expr {
              SymbolicExpression::Variable(var) => SymbolicExpressionNode::Variable( *var),
              SymbolicExpression::IsFirstRow => SymbolicExpressionNode::IsFirstRow,
              SymbolicExpression::IsLastRow => SymbolicExpressionNode::IsLastRow,
              SymbolicExpression::IsTransition => SymbolicExpressionNode::IsTransition,
              SymbolicExpression::Constant(cons) => SymbolicExpressionNode::Constant( *cons),
              SymbolicExpression::Add {
                  x,
                  y,
                  degree_multiple,
              } => {
                  let left_idx = topological_sort_symbolic_expr(x.as_ref(), expr_to_idx, nodes);
                  let right_idx = topological_sort_symbolic_expr(y.as_ref(), expr_to_idx, nodes);
                  SymbolicExpressionNode::Add {
                      left_idx,
                      right_idx,
                      degree_multiple: *degree_multiple,
                  }
              }
              SymbolicExpression::Sub {
                  x,
                  y,
                  degree_multiple,
              } => {
                  let left_idx = topological_sort_symbolic_expr(x.as_ref(), expr_to_idx, nodes);
                  let right_idx = topological_sort_symbolic_expr(y.as_ref(), expr_to_idx, nodes);
                  SymbolicExpressionNode::Sub {
                      left_idx,
                      right_idx,
                      degree_multiple: *degree_multiple,
                  }
              }
              SymbolicExpression::Neg { x, degree_multiple } => {
                  let idx = topological_sort_symbolic_expr(x.as_ref(), expr_to_idx, nodes);
                  SymbolicExpressionNode::Neg {
                      idx,
                      degree_multiple: *degree_multiple,
                  }
              }
              SymbolicExpression::Mul {
                  x,
                  y,
                  degree_multiple,
              } => {
                  // An important case to remember: square will have Arc::as_ptr(&x) == Arc::as_ptr(&y)
                  // The `expr_to_id` will ensure only one topological sort is done to prevent exponential
                  // behavior.
                  let left_idx = topological_sort_symbolic_expr(x.as_ref(), expr_to_idx, nodes);
                  let right_idx = topological_sort_symbolic_expr(y.as_ref(), expr_to_idx, nodes);
                  SymbolicExpressionNode::Mul {
                      left_idx,
                      right_idx,
                      degree_multiple: *degree_multiple,
                  }
              }
          };
      
          let idx = nodes.len();
          nodes.push(node);
          expr_to_idx.insert(expr, idx);
          idx
      }
      *)
      Definition topological_sort_symbolic_expr
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [ F ], [ expr; expr_to_idx; nodes ] =>
          ltac:(M.monadic
            (let expr :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                expr
              |) in
            let expr_to_idx :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ];
                        Ty.path "usize";
                        Ty.path "rustc_hash::FxBuildHasher"
                      ]
                  ],
                expr_to_idx
              |) in
            let nodes :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                nodes
              |) in
            M.catch_return (Ty.path "usize") (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "std::collections::hash::map::HashMap")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ]
                                          ];
                                        Ty.path "usize";
                                        Ty.path "rustc_hash::FxBuildHasher"
                                      ],
                                    "get",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| expr_to_idx |) |)
                                    |);
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| expr |) |) |)
                                  ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let idx := M.copy (| Ty.path "usize", γ0_0 |) in
                            M.never_to_any (| M.read (| M.return_ (| M.read (| idx |) |) |) |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ node :
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                        []
                        [ F ],
                      expr,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                                0
                              |) in
                            let var :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ]
                                  ],
                                γ1_0
                              |) in
                            Value.StructTuple
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable"
                              []
                              [ F ]
                              [ M.read (| M.deref (| M.read (| var |) |) |) ]));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                              |) in
                            Value.StructTuple
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsFirstRow"
                              []
                              [ F ]
                              []));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                              |) in
                            Value.StructTuple
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsLastRow"
                              []
                              [ F ]
                              []));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                              |) in
                            Value.StructTuple
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsTransition"
                              []
                              [ F ]
                              []));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                                0
                              |) in
                            let cons := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ1_0 |) in
                            Value.StructTuple
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant"
                              []
                              [ F ]
                              [ M.read (| M.deref (| M.read (| cons |) |) |) ]));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                "x"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                "y"
                              |) in
                            let γ1_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                "degree_multiple"
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ1_0
                              |) in
                            let y :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ1_1
                              |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                            M.read (|
                              let~ left_idx : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (|
                                    "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                            "as_ref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| x |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| expr_to_idx |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| nodes |) |)
                                    |)
                                  ]
                                |) in
                              let~ right_idx : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (|
                                    "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                            "as_ref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| y |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| expr_to_idx |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| nodes |) |)
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                  []
                                  [ F ],
                                Value.mkStructRecord
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add"
                                  []
                                  [ F ]
                                  [
                                    ("left_idx", M.read (| left_idx |));
                                    ("right_idx", M.read (| right_idx |));
                                    ("degree_multiple",
                                      M.read (| M.deref (| M.read (| degree_multiple |) |) |))
                                  ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                "x"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                "y"
                              |) in
                            let γ1_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                "degree_multiple"
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ1_0
                              |) in
                            let y :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ1_1
                              |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                            M.read (|
                              let~ left_idx : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (|
                                    "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                            "as_ref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| x |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| expr_to_idx |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| nodes |) |)
                                    |)
                                  ]
                                |) in
                              let~ right_idx : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (|
                                    "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                            "as_ref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| y |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| expr_to_idx |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| nodes |) |)
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                  []
                                  [ F ],
                                Value.mkStructRecord
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub"
                                  []
                                  [ F ]
                                  [
                                    ("left_idx", M.read (| left_idx |));
                                    ("right_idx", M.read (| right_idx |));
                                    ("degree_multiple",
                                      M.read (| M.deref (| M.read (| degree_multiple |) |) |))
                                  ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                                "x"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                                "degree_multiple"
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ1_0
                              |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                            M.read (|
                              let~ idx : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (|
                                    "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                            "as_ref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| x |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| expr_to_idx |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| nodes |) |)
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                  []
                                  [ F ],
                                Value.mkStructRecord
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg"
                                  []
                                  [ F ]
                                  [
                                    ("idx", M.read (| idx |));
                                    ("degree_multiple",
                                      M.read (| M.deref (| M.read (| degree_multiple |) |) |))
                                  ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                "x"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                "y"
                              |) in
                            let γ1_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                "degree_multiple"
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ1_0
                              |) in
                            let y :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ1_1
                              |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                            M.read (|
                              let~ left_idx : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (|
                                    "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                            "as_ref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| x |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| expr_to_idx |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| nodes |) |)
                                    |)
                                  ]
                                |) in
                              let~ right_idx : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (|
                                    "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ],
                                            "as_ref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| y |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| expr_to_idx |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| nodes |) |)
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                  []
                                  [ F ],
                                Value.mkStructRecord
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul"
                                  []
                                  [ F ]
                                  [
                                    ("left_idx", M.read (| left_idx |));
                                    ("right_idx", M.read (| right_idx |));
                                    ("degree_multiple",
                                      M.read (| M.deref (| M.read (| degree_multiple |) |) |))
                                  ]
                              |)
                            |)))
                      ]
                    |) in
                  let~ idx : Ty.path "usize" :=
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| nodes |) |) |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "push",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| nodes |) |) |);
                        M.read (| node |)
                      ]
                    |) in
                  let~ _ : Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ];
                            Ty.path "usize";
                            Ty.path "rustc_hash::FxBuildHasher"
                          ],
                        "insert",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| expr_to_idx |) |) |);
                        M.read (| expr |);
                        M.read (| idx |)
                      ]
                    |) in
                  idx
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_topological_sort_symbolic_expr :
        M.IsFunction.C
          "openvm_stark_backend::air_builders::symbolic::dag::topological_sort_symbolic_expr"
          topological_sort_symbolic_expr.
      Admitted.
      Global Typeclasses Opaque topological_sort_symbolic_expr.
      
      
      Module Impl_core_convert_From_where_p3_field_field_Field_F_ref__openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
            []
            [ F ].
        
        (*
            fn from(dag: &'a SymbolicConstraintsDag<F>) -> Self {
                let exprs = dag.constraints.to_symbolic_expressions();
                let constraints = dag
                    .constraints
                    .constraint_idx
                    .iter()
                    .map(|&idx| exprs[idx].as_ref().clone())
                    .collect::<Vec<_>>();
                let interactions = dag
                    .interactions
                    .iter()
                    .map(|interaction| {
                        let fields = interaction
                            .message
                            .iter()
                            .map(|&idx| exprs[idx].as_ref().clone())
                            .collect();
                        let count = exprs[interaction.count].as_ref().clone();
                        Interaction {
                            message: fields,
                            count,
                            bus_index: interaction.bus_index,
                            count_weight: interaction.count_weight,
                        }
                    })
                    .collect::<Vec<_>>();
                SymbolicConstraints {
                    constraints,
                    interactions,
                }
            }
        *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ dag ] =>
            ltac:(M.monadic
              (let dag :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                        []
                        [ F ]
                    ],
                  dag
                |) in
              M.read (|
                let~ exprs :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag")
                        []
                        [ F ],
                      "to_symbolic_expressions",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| dag |) |),
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                          "constraints"
                        |)
                      |)
                    ]
                  |) in
                let~ constraints :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                          Ty.function
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                            (Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ])
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                            Ty.function
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ])
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.function
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| dag |) |),
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                            "constraints"
                                          |),
                                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                                          "constraint_idx"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ],
                                      M.alloc (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.read (| γ |) in
                                            let idx := M.copy (| Ty.path "usize", γ |) in
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ],
                                              M.get_trait_method (|
                                                "core::clone::Clone",
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ],
                                                [],
                                                [],
                                                "clone",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::convert::AsRef",
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                              []
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ],
                                                        "as_ref",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                        []
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::index::Index",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                [ Ty.path "usize" ],
                                                                "index",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  exprs
                                                                |);
                                                                M.read (| idx |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |) in
                let~ interactions :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::Interaction")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::Interaction")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [ Ty.path "usize" ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [ Ty.path "usize" ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::Interaction")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ])
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::Interaction")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [ Ty.path "usize" ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ])
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [ Ty.path "usize" ]
                            ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::Interaction")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::Interaction")
                                              []
                                              [ Ty.path "usize" ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::Interaction")
                                            []
                                            [ Ty.path "usize" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| dag |) |),
                                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                          "interactions"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::Interaction")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let interaction :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::interaction::Interaction")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                γ
                                              |) in
                                            M.read (|
                                              let~ fields :
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.function
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ])
                                                      ],
                                                    [],
                                                    [],
                                                    "collect",
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ];
                                                          Ty.function
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                              []
                                                              [ F ])
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        [],
                                                        "map",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ];
                                                          Ty.function
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                              []
                                                              [ F ])
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Ty.path "usize" ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "deref",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| interaction |)
                                                                        |),
                                                                        "openvm_stark_backend::interaction::Interaction",
                                                                        "message"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                ltac:(M.monadic
                                                                  (M.match_operator (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                      []
                                                                      [ F ],
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      α0
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.read (| γ |) in
                                                                          let idx :=
                                                                            M.copy (|
                                                                              Ty.path "usize",
                                                                              γ
                                                                            |) in
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                              []
                                                                              [ F ],
                                                                            M.get_trait_method (|
                                                                              "core::clone::Clone",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                []
                                                                                [ F ],
                                                                              [],
                                                                              [],
                                                                              "clone",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                          []
                                                                                          [ F ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::convert::AsRef",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::sync::Arc")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                            []
                                                                                            [ F ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [],
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                          []
                                                                                          [ F ]
                                                                                      ],
                                                                                      "as_ref",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::sync::Arc")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                      []
                                                                                                      [
                                                                                                        F
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::index::Index",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::sync::Arc")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                        []
                                                                                                        [
                                                                                                          F
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ],
                                                                                              "index",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                exprs
                                                                                              |);
                                                                                              M.read (|
                                                                                                idx
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)))
                                                              | _ =>
                                                                M.impossible
                                                                  "wrong number of arguments"
                                                              end))
                                                      ]
                                                    |)
                                                  ]
                                                |) in
                                              let~ count :
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ],
                                                  M.get_trait_method (|
                                                    "core::clone::Clone",
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                      []
                                                      [ F ],
                                                    [],
                                                    [],
                                                    "clone",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                []
                                                                [ F ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::convert::AsRef",
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                []
                                                                [ F ]
                                                            ],
                                                            "as_ref",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                              []
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      exprs
                                                                    |);
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| interaction |)
                                                                        |),
                                                                        "openvm_stark_backend::interaction::Interaction",
                                                                        "count"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::interaction::Interaction")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                      []
                                                      [ F ]
                                                  ],
                                                Value.mkStructRecord
                                                  "openvm_stark_backend::interaction::Interaction"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                      []
                                                      [ F ]
                                                  ]
                                                  [
                                                    ("message", M.read (| fields |));
                                                    ("count", M.read (| count |));
                                                    ("bus_index",
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| interaction |) |),
                                                          "openvm_stark_backend::interaction::Interaction",
                                                          "bus_index"
                                                        |)
                                                      |));
                                                    ("count_weight",
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| interaction |) |),
                                                          "openvm_stark_backend::interaction::Interaction",
                                                          "count_weight"
                                                        |)
                                                      |))
                                                  ]
                                              |)
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints"
                    []
                    [ F ]
                    [
                      ("constraints", M.read (| constraints |));
                      ("interactions", M.read (| interactions |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                    []
                    [ F ]
                ]
            ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_where_p3_field_field_Field_F_ref__openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
      
      Module Impl_core_convert_From_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
            []
            [ F ].
        
        (*
            fn from(dag: SymbolicConstraintsDag<F>) -> Self {
                (&dag).into()
            }
        *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ dag ] =>
            ltac:(M.monadic
              (let dag :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                    []
                    [ F ],
                  dag
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::convert::Into",
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                        []
                        [ F ]
                    ],
                  [],
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                      []
                      [ F ]
                  ],
                  "into",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, dag |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
      
      Module Impl_core_convert_From_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
            []
            [ F ].
        
        (*
            fn from(sc: SymbolicConstraints<F>) -> Self {
                build_symbolic_constraints_dag(&sc.constraints, &sc.interactions)
            }
        *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ sc ] =>
            ltac:(M.monadic
              (let sc :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                    []
                    [ F ],
                  sc
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                  []
                  [ F ],
                M.get_function (|
                  "openvm_stark_backend::air_builders::symbolic::dag::build_symbolic_constraints_dag",
                  [],
                  [ F ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  sc,
                                  "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                  "constraints"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  sc,
                                  "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                  "interactions"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F_for_openvm_stark_backend_air_builders_symbolic_dag_SymbolicConstraintsDag_F.
    End dag.
  End symbolic.
End air_builders.
