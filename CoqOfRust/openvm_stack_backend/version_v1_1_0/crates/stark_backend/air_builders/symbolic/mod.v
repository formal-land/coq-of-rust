(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module air_builders.
  Module symbolic.
    (* StructRecord
      {
        name := "SymbolicConstraints";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("constraints",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("interactions",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
          []
          [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                      []
                      [ F ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints"
              []
              [ F ]
              [
                ("constraints",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                              "constraints"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("interactions",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::Interaction")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::Interaction")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                              "interactions"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
          []
          [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SymbolicConstraints" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "constraints" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                            "constraints"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "interactions" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                "interactions"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
    
    Module Impl_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
          []
          [ F ].
      
      (*
          pub fn max_constraint_degree(&self) -> usize {
              Iterator::max(self.constraints.iter().map(|c| c.degree_multiple())).unwrap_or(0)
          }
      *)
      Definition max_constraint_degree
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                "unwrap_or",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ],
                    [],
                    [],
                    "max",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ]
                            ]
                            (Ty.path "usize")
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.path "usize";
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ]
                            ]
                            (Ty.path "usize")
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                        "constraints"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.path "usize",
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let c :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ],
                                              γ
                                            |) in
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ],
                                              "degree_multiple",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| c |) |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |);
                Value.Integer IntegerKind.Usize 0
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_max_constraint_degree :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "max_constraint_degree" (max_constraint_degree F).
      Admitted.
      Global Typeclasses Opaque max_constraint_degree.
      
      (*
          pub fn get_log_quotient_degree(&self) -> usize {
              // We pad to at least degree 2, since a quotient argument doesn't make sense with smaller degrees.
              let constraint_degree = self.max_constraint_degree().max(2);
      
              // The quotient's actual degree is approximately (max_constraint_degree - 1) * (trace height),
              // where subtracting 1 comes from division by the zerofier.
              // But we pad it to a power of two so that we can efficiently decompose the quotient.
              log2_ceil_usize(constraint_degree - 1)
          }
      *)
      Definition get_log_quotient_degree
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.read (|
              let~ constraint_degree : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (| "core::cmp::Ord", Ty.path "usize", [], [], "max", [], [] |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                          []
                          [ F ],
                        "max_constraint_degree",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |);
                    Value.Integer IntegerKind.Usize 2
                  ]
                |) in
              M.alloc (|
                Ty.path "usize",
                M.call_closure (|
                  Ty.path "usize",
                  M.get_function (| "p3_util::log2_ceil_usize", [], [] |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.sub,
                      [ M.read (| constraint_degree |); Value.Integer IntegerKind.Usize 1 ]
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_log_quotient_degree :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "get_log_quotient_degree" (get_log_quotient_degree F).
      Admitted.
      Global Typeclasses Opaque get_log_quotient_degree.
      
      (*
          pub fn max_interaction_degrees(&self) -> (usize, usize) {
              let max_field_degree = self
                  .interactions
                  .iter()
                  .map(|interaction| {
                      interaction
                          .message
                          .iter()
                          .map(|field| field.degree_multiple())
                          .max()
                          .unwrap_or(0)
                  })
                  .max()
                  .unwrap_or(0);
      
              let max_count_degree = self
                  .interactions
                  .iter()
                  .map(|interaction| interaction.count.degree_multiple())
                  .max()
                  .unwrap_or(0);
      
              (max_field_degree, max_count_degree)
          }
      *)
      Definition max_interaction_degrees
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.read (|
              let~ max_field_degree : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    "unwrap_or",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ],
                        [],
                        [],
                        "max",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ]
                                ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ]
                              ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.path "usize";
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::interaction::Interaction")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::Interaction")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                            "interactions"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "usize",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::interaction::Interaction")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let interaction :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::interaction::Interaction")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  "unwrap_or",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                []
                                                                [ F ]
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                    []
                                                                    [ F ]
                                                                ]
                                                            ]
                                                            (Ty.path "usize")
                                                        ],
                                                      [],
                                                      [],
                                                      "max",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [ F ]
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                      []
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                              (Ty.path "usize")
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                []
                                                                [ F ]
                                                            ],
                                                          [],
                                                          [],
                                                          "map",
                                                          [],
                                                          [
                                                            Ty.path "usize";
                                                            Ty.function
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                      []
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                              (Ty.path "usize")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [ F ]
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                    []
                                                                    [ F ]
                                                                ],
                                                              "iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                              []
                                                                              [ F ]
                                                                          ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interaction |)
                                                                          |),
                                                                          "openvm_stark_backend::interaction::Interaction",
                                                                          "message"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.path "usize",
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                              []
                                                                              [ F ]
                                                                          ],
                                                                        α0
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let field :=
                                                                              M.copy (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                      []
                                                                                      [ F ]
                                                                                  ],
                                                                                γ
                                                                              |) in
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                  []
                                                                                  [ F ],
                                                                                "degree_multiple",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      field
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 0
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |);
                    Value.Integer IntegerKind.Usize 0
                  ]
                |) in
              let~ max_count_degree : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    "unwrap_or",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ],
                        [],
                        [],
                        "max",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ]
                                ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ]
                              ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.path "usize";
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::interaction::Interaction")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::Interaction")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                            "interactions"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "usize",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::interaction::Interaction")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let interaction :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::interaction::Interaction")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ],
                                                  "degree_multiple",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| interaction |) |),
                                                      "openvm_stark_backend::interaction::Interaction",
                                                      "count"
                                                    |)
                                                  |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |);
                    Value.Integer IntegerKind.Usize 0
                  ]
                |) in
              M.alloc (|
                Ty.tuple [ Ty.path "usize"; Ty.path "usize" ],
                Value.Tuple [ M.read (| max_field_degree |); M.read (| max_count_degree |) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_max_interaction_degrees :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "max_interaction_degrees" (max_interaction_degrees F).
      Admitted.
      Global Typeclasses Opaque max_interaction_degrees.
    End Impl_openvm_stark_backend_air_builders_symbolic_SymbolicConstraints_F.
    
    (*
    pub fn get_symbolic_builder<F, R>(
        rap: &R,
        width: &TraceWidth,
        num_challenges_to_sample: &[usize],
        num_exposed_values_after_challenge: &[usize],
        rap_phase_seq_kind: RapPhaseSeqKind,
        max_constraint_degree: usize,
    ) -> SymbolicRapBuilder<F>
    where
        F: Field,
        R: Rap<SymbolicRapBuilder<F>> + BaseAirWithPublicValues<F> + ?Sized,
    {
        let mut builder = SymbolicRapBuilder::new(
            width,
            rap.num_public_values(),
            num_challenges_to_sample,
            num_exposed_values_after_challenge,
            rap_phase_seq_kind,
            max_constraint_degree,
        );
        Rap::eval(rap, &mut builder);
        builder
    }
    *)
    Definition get_symbolic_builder (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [],
          [ F; R ],
          [
            rap;
            width;
            num_challenges_to_sample;
            num_exposed_values_after_challenge;
            rap_phase_seq_kind;
            max_constraint_degree
          ] =>
        ltac:(M.monadic
          (let rap := M.alloc (| Ty.apply (Ty.path "&") [] [ R ], rap |) in
          let width :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::keygen::types::TraceWidth" ],
              width
            |) in
          let num_challenges_to_sample :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
              num_challenges_to_sample
            |) in
          let num_exposed_values_after_challenge :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
              num_exposed_values_after_challenge
            |) in
          let rap_phase_seq_kind :=
            M.alloc (|
              Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind",
              rap_phase_seq_kind
            |) in
          let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
          M.catch_return
            (Ty.apply
              (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
              []
              [ F ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] := Value.Tuple [] in
                let __tracing_attr_span := M.read (| Value.DeclaredButUndefined |) in
                let __tracing_attr_guard := M.read (| Value.DeclaredButUndefined |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                LogicalOp.or (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                            Ty.path "tracing_core::metadata::LevelFilter"
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.path "tracing_core::metadata::Level",
                                          [],
                                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                          "le",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_associated_constant (|
                                              Ty.path "tracing_core::metadata::Level",
                                              "DEBUG",
                                              Ty.path "tracing_core::metadata::Level"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.call_closure (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  "current",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic (Value.Bool false))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.write (|
                                __tracing_attr_span,
                                M.read (|
                                  let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |) in
                                  M.alloc (|
                                    Ty.path "tracing::span::Span",
                                    M.match_operator (|
                                      Ty.path "tracing::span::Span",
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      LogicalOp.and (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "DEBUG",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_constant (|
                                                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              |)
                                                            |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              [],
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              ],
                                                              "le",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                get_associated_constant (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level",
                                                                  "DEBUG",
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level"
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::LevelFilter",
                                                                      "current",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_stark_backend::air_builders::symbolic::get_symbolic_builder::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::subscriber::Interest",
                                                                  "is_never",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    interest
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_function (|
                                                          "tracing::__macro_support::__is_enabled",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "tracing_core::callsite::Callsite",
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  [],
                                                                  [],
                                                                  "metadata",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_stark_backend::air_builders::symbolic::get_symbolic_builder::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.read (| interest |)
                                                        ]
                                                      |)))
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ meta :
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata"
                                                    ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata" ],
                                                  M.get_trait_method (|
                                                    "tracing_core::callsite::Callsite",
                                                    Ty.path
                                                      "tracing_core::callsite::DefaultCallsite",
                                                    [],
                                                    [],
                                                    "metadata",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_stark_backend::air_builders::symbolic::get_symbolic_builder::__CALLSITE",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite"
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (|
                                                Ty.path "tracing::span::Span",
                                                M.call_closure (|
                                                  Ty.path "tracing::span::Span",
                                                  M.get_associated_function (|
                                                    Ty.path "tracing::span::Span",
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| meta |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::field::ValueSet",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::field::FieldSet",
                                                                "value_set",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        0
                                                                    ]
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::Field"
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::FieldSet"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata",
                                                                        "fields",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| meta |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              0
                                                                          ]
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::field::Field"
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.dyn
                                                                                          [
                                                                                            ("tracing_core::field::Value::Trait",
                                                                                              [])
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        Value.Array []
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.read (|
                                              let~ span : Ty.path "tracing::span::Span" :=
                                                M.call_closure (|
                                                  Ty.path "tracing::span::Span",
                                                  M.get_function (|
                                                    "tracing::__macro_support::__disabled_span",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::Metadata"
                                                            ],
                                                          M.get_trait_method (|
                                                            "tracing_core::callsite::Callsite",
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite",
                                                            [],
                                                            [],
                                                            "metadata",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (|
                                                                  get_constant (|
                                                                    "openvm_stark_backend::air_builders::symbolic::get_symbolic_builder::__CALLSITE",
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] := Value.Tuple [] in
                                              span
                                            |)))
                                      ]
                                    |)
                                  |)
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.write (|
                                __tracing_attr_guard,
                                M.call_closure (|
                                  Ty.path "tracing::span::Entered",
                                  M.get_associated_function (|
                                    Ty.path "tracing::span::Span",
                                    "enter",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                                |)
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool false |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return :
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                                    []
                                    [ F ] :=
                                M.never_to_any (|
                                  M.read (|
                                    M.loop (|
                                      Ty.path "never",
                                      ltac:(M.monadic (M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ builder :
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                        []
                        [ F ],
                      "new",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| width |) |) |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::rap::BaseAirWithPublicValues",
                          R,
                          [],
                          [ F ],
                          "num_public_values",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rap |) |) |) ]
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.read (| num_challenges_to_sample |) |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.read (| num_exposed_values_after_challenge |) |)
                      |);
                      M.read (| rap_phase_seq_kind |);
                      M.read (| max_constraint_degree |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "openvm_stark_backend::rap::Rap",
                      R,
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                          []
                          [ F ]
                      ],
                      "eval",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rap |) |) |);
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (| M.borrow (| Pointer.Kind.MutRef, builder |) |)
                      |)
                    ]
                  |) in
                builder
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_get_symbolic_builder :
      M.IsFunction.C
        "openvm_stark_backend::air_builders::symbolic::get_symbolic_builder"
        get_symbolic_builder.
    Admitted.
    Global Typeclasses Opaque get_symbolic_builder.
    
    (* StructRecord
      {
        name := "SymbolicRapBuilder";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("preprocessed",
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ]);
            ("partitioned_main",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("after_challenge",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("public_values",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("challenges",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("exposed_values_after_challenge",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("constraints",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("interactions",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("max_constraint_degree", Ty.path "usize");
            ("rap_phase_seq_kind", Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind");
            ("trace_width", Ty.path "openvm_stark_backend::keygen::types::TraceWidth");
            ("interaction_partitions",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 12 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 12 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "preprocessed" |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "partitioned_main" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "after_challenge" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "public_values" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "challenges" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "exposed_values_after_challenge" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "constraints" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "interactions" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "max_constraint_degree" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "rap_phase_seq_kind" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "trace_width" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "interaction_partitions" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 12 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 12 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "preprocessed"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "partitioned_main"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "after_challenge"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "public_values"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "challenges"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "exposed_values_after_challenge"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "constraints"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::Interaction")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "interactions"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "max_constraint_degree"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind"
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "rap_phase_seq_kind"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "openvm_stark_backend::keygen::types::TraceWidth" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "trace_width"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "usize";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                                "interaction_partitions"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "SymbolicRapBuilder" |) |)
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 12 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*
          pub(crate) fn new(
              width: &TraceWidth,
              num_public_values: usize,
              num_challenges_to_sample: &[usize],
              num_exposed_values_after_challenge: &[usize],
              rap_phase_seq_kind: RapPhaseSeqKind,
              max_constraint_degree: usize,
          ) -> Self {
              let preprocessed_width = width.preprocessed.unwrap_or(0);
              let prep_values = [0, 1]
                  .into_iter()
                  .flat_map(|offset| {
                      (0..width.preprocessed.unwrap_or(0))
                          .map(move |index| SymbolicVariable::new(Entry::Preprocessed { offset }, index))
                  })
                  .collect();
              let preprocessed = RowMajorMatrix::new(prep_values, preprocessed_width);
      
              let mut partitioned_main: Vec<_> = width
                  .cached_mains
                  .iter()
                  .enumerate()
                  .map(|(part_index, &width)| gen_main_trace(part_index, width))
                  .collect();
              if width.common_main != 0 {
                  partitioned_main.push(gen_main_trace(width.cached_mains.len(), width.common_main));
              }
              let after_challenge = Self::new_after_challenge(&width.after_challenge);
      
              let public_values = (0..num_public_values)
                  .map(move |index| SymbolicVariable::new(Entry::Public, index))
                  .collect();
      
              let challenges = Self::new_challenges(num_challenges_to_sample);
      
              let exposed_values_after_challenge =
                  Self::new_exposed_values_after_challenge(num_exposed_values_after_challenge);
      
              Self {
                  preprocessed,
                  partitioned_main,
                  after_challenge,
                  public_values,
                  challenges,
                  exposed_values_after_challenge,
                  constraints: vec![],
                  interactions: vec![],
                  max_constraint_degree,
                  rap_phase_seq_kind,
                  trace_width: width.clone(),
                  interaction_partitions: None,
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [],
            [],
            [
              width;
              num_public_values;
              num_challenges_to_sample;
              num_exposed_values_after_challenge;
              rap_phase_seq_kind;
              max_constraint_degree
            ] =>
          ltac:(M.monadic
            (let width :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::keygen::types::TraceWidth" ],
                width
              |) in
            let num_public_values := M.alloc (| Ty.path "usize", num_public_values |) in
            let num_challenges_to_sample :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                num_challenges_to_sample
              |) in
            let num_exposed_values_after_challenge :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                num_exposed_values_after_challenge
              |) in
            let rap_phase_seq_kind :=
              M.alloc (|
                Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind",
                rap_phase_seq_kind
              |) in
            let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
            M.read (|
              let~ preprocessed_width : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    "unwrap_or",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| width |) |),
                        "openvm_stark_backend::keygen::types::TraceWidth",
                        "preprocessed"
                      |)
                    |);
                    Value.Integer IntegerKind.Usize 0
                  ]
                |) in
              let~ prep_values :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "usize" ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                            Ty.function
                              [ Ty.path "usize" ]
                              (Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ])
                          ];
                        Ty.function
                          [ Ty.path "usize" ]
                          (Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                              Ty.function
                                [ Ty.path "usize" ]
                                (Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ])
                            ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::array::iter::IntoIter")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "usize" ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                              Ty.function
                                [ Ty.path "usize" ]
                                (Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ])
                            ];
                          Ty.function
                            [ Ty.path "usize" ]
                            (Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                                Ty.function
                                  [ Ty.path "usize" ]
                                  (Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ])
                              ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "usize" ],
                        [],
                        [],
                        "flat_map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                              Ty.function
                                [ Ty.path "usize" ]
                                (Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ])
                            ];
                          Ty.function
                            [ Ty.path "usize" ]
                            (Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                                Ty.function
                                  [ Ty.path "usize" ]
                                  (Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ])
                              ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::array::iter::IntoIter")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.Array
                              [ Value.Integer IntegerKind.Usize 0; Value.Integer IntegerKind.Usize 1
                              ]
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ];
                                        Ty.function
                                          [ Ty.path "usize" ]
                                          (Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ])
                                      ],
                                    M.alloc (| Ty.path "usize", α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let offset := M.copy (| Ty.path "usize", γ |) in
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ];
                                                Ty.function
                                                  [ Ty.path "usize" ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ])
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.function
                                                  [ Ty.path "usize" ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              Value.mkStructRecord
                                                "core::ops::range::Range"
                                                []
                                                [ Ty.path "usize" ]
                                                [
                                                  ("start", Value.Integer IntegerKind.Usize 0);
                                                  ("end_",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        "unwrap_or",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| width |) |),
                                                            "openvm_stark_backend::keygen::types::TraceWidth",
                                                            "preprocessed"
                                                          |)
                                                        |);
                                                        Value.Integer IntegerKind.Usize 0
                                                      ]
                                                    |))
                                                ];
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                            []
                                                            [ F ],
                                                          M.alloc (| Ty.path "usize", α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let index :=
                                                                  M.copy (| Ty.path "usize", γ |) in
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                    []
                                                                    [ F ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                      []
                                                                      [ F ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.mkStructRecord
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed"
                                                                      []
                                                                      []
                                                                      [
                                                                        ("offset",
                                                                          M.read (| offset |))
                                                                      ];
                                                                    M.read (| index |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |) in
              let~ preprocessed :
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| prep_values |); M.read (| preprocessed_width |) ]
                |) in
              let~ partitioned_main :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ];
                        Ty.function
                          [
                            Ty.tuple
                              [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                          ]
                          (Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ];
                          Ty.function
                            [
                              Ty.tuple
                                [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                            ]
                            (Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                            ]
                            (Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "enumerate",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| width |) |),
                                            "openvm_stark_backend::keygen::types::TraceWidth",
                                            "cached_mains"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    M.alloc (|
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let part_index := M.copy (| Ty.path "usize", γ0_0 |) in
                                          let γ0_1 := M.deref (| M.read (| γ0_1 |) |) in
                                          let width := M.copy (| Ty.path "usize", γ0_1 |) in
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            M.get_function (|
                                              "openvm_stark_backend::air_builders::symbolic::gen_main_trace",
                                              [],
                                              [ F ]
                                            |),
                                            [ M.read (| part_index |); M.read (| width |) ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| width |) |),
                                      "openvm_stark_backend::keygen::types::TraceWidth",
                                      "common_main"
                                    |)
                                  |);
                                  Value.Integer IntegerKind.Usize 0
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "push",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, partitioned_main |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  M.get_function (|
                                    "openvm_stark_backend::air_builders::symbolic::gen_main_trace",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| width |) |),
                                            "openvm_stark_backend::keygen::types::TraceWidth",
                                            "cached_mains"
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| width |) |),
                                        "openvm_stark_backend::keygen::types::TraceWidth",
                                        "common_main"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ after_challenge :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ],
                    "new_after_challenge",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| width |) |),
                                    "openvm_stark_backend::keygen::types::TraceWidth",
                                    "after_challenge"
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ public_values :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.path "usize" ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function
                            [ Ty.path "usize" ]
                            (Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.function
                            [ Ty.path "usize" ]
                            (Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ])
                        ]
                      |),
                      [
                        Value.mkStructRecord
                          "core::ops::range::Range"
                          []
                          [ Ty.path "usize" ]
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_", M.read (| num_public_values |))
                          ];
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ],
                                    M.alloc (| Ty.path "usize", α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let index := M.copy (| Ty.path "usize", γ |) in
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ],
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              Value.StructTuple
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Public"
                                                []
                                                []
                                                [];
                                              M.read (| index |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |) in
              let~ challenges :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ],
                    "new_challenges",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.read (| num_challenges_to_sample |) |)
                    |)
                  ]
                |) in
              let~ exposed_values_after_challenge :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ],
                    "new_exposed_values_after_challenge",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.read (| num_exposed_values_after_challenge |) |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                  []
                  [ F ],
                Value.mkStructRecord
                  "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder"
                  []
                  [ F ]
                  [
                    ("preprocessed", M.read (| preprocessed |));
                    ("partitioned_main", M.read (| partitioned_main |));
                    ("after_challenge", M.read (| after_challenge |));
                    ("public_values", M.read (| public_values |));
                    ("challenges", M.read (| challenges |));
                    ("exposed_values_after_challenge", M.read (| exposed_values_after_challenge |));
                    ("constraints",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        []
                      |));
                    ("interactions",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::Interaction")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        []
                      |));
                    ("max_constraint_degree", M.read (| max_constraint_degree |));
                    ("rap_phase_seq_kind", M.read (| rap_phase_seq_kind |));
                    ("trace_width",
                      M.call_closure (|
                        Ty.path "openvm_stark_backend::keygen::types::TraceWidth",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "openvm_stark_backend::keygen::types::TraceWidth",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| width |) |) |) ]
                      |));
                    ("interaction_partitions",
                      Value.StructTuple
                        "core::option::Option::None"
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                        [])
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn constraints(self) -> SymbolicConstraints<F> {
              SymbolicConstraints {
                  constraints: self.constraints,
                  interactions: self.interactions,
              }
          }
      *)
      Definition constraints (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                  []
                  [ F ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints"
              []
              [ F ]
              [
                ("constraints",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                      "constraints"
                    |)
                  |));
                ("interactions",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                      "interactions"
                    |)
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_constraints :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "constraints" (constraints F).
      Admitted.
      Global Typeclasses Opaque constraints.
      
      (*
          pub fn params(&self) -> StarkVerifyingParams {
              let width = self.width();
              let num_exposed_values_after_challenge = self.num_exposed_values_after_challenge();
              let num_challenges_to_sample = self.num_challenges_to_sample();
              StarkVerifyingParams {
                  width,
                  num_public_values: self.public_values.len(),
                  num_exposed_values_after_challenge,
                  num_challenges_to_sample,
              }
          }
      *)
      Definition params (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.read (|
              let~ width : Ty.path "openvm_stark_backend::keygen::types::TraceWidth" :=
                M.call_closure (|
                  Ty.path "openvm_stark_backend::keygen::types::TraceWidth",
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ],
                    "width",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              let~ num_exposed_values_after_challenge :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ],
                    "num_exposed_values_after_challenge",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              let~ num_challenges_to_sample :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ],
                    "num_challenges_to_sample",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              M.alloc (|
                Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingParams",
                Value.mkStructRecord
                  "openvm_stark_backend::keygen::types::StarkVerifyingParams"
                  []
                  []
                  [
                    ("width", M.read (| width |));
                    ("num_public_values",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                              "public_values"
                            |)
                          |)
                        ]
                      |));
                    ("num_exposed_values_after_challenge",
                      M.read (| num_exposed_values_after_challenge |));
                    ("num_challenges_to_sample", M.read (| num_challenges_to_sample |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_params :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "params" (params F).
      Admitted.
      Global Typeclasses Opaque params.
      
      (*
          pub fn width(&self) -> TraceWidth {
              let mut ret = self.trace_width.clone();
              ret.after_challenge = self.after_challenge.iter().map(|m| m.width()).collect();
              ret
          }
      *)
      Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.read (|
              let~ ret : Ty.path "openvm_stark_backend::keygen::types::TraceWidth" :=
                M.call_closure (|
                  Ty.path "openvm_stark_backend::keygen::types::TraceWidth",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "openvm_stark_backend::keygen::types::TraceWidth",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                        "trace_width"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    ret,
                    "openvm_stark_backend::keygen::types::TraceWidth",
                    "after_challenge"
                  |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.path "usize")
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.path "usize";
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                          "after_challenge"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.path "usize",
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let m :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                              []
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ],
                                                γ
                                              |) in
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_trait_method (|
                                                "p3_matrix::Matrix",
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                          []
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ]
                                                ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| m |) |)
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |)
                |) in
              ret
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "width" (width F).
      Admitted.
      Global Typeclasses Opaque width.
      
      (*
          pub fn num_exposed_values_after_challenge(&self) -> Vec<usize> {
              self.exposed_values_after_challenge
                  .iter()
                  .map(|c| c.len())
                  .collect()
          }
      *)
      Definition num_exposed_values_after_challenge
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ];
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ]
                      (Ty.path "usize")
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ]
                        (Ty.path "usize")
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.path "usize";
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ]
                        (Ty.path "usize")
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                    "exposed_values_after_challenge"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.path "usize",
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let c :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          γ
                                        |) in
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| c |) |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_num_exposed_values_after_challenge :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C
          (Self F)
          "num_exposed_values_after_challenge"
          (num_exposed_values_after_challenge F).
      Admitted.
      Global Typeclasses Opaque num_exposed_values_after_challenge.
      
      (*
          pub fn num_challenges_to_sample(&self) -> Vec<usize> {
              self.challenges.iter().map(|c| c.len()).collect()
          }
      *)
      Definition num_challenges_to_sample
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ];
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ]
                      (Ty.path "usize")
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ]
                        (Ty.path "usize")
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.path "usize";
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ]
                        (Ty.path "usize")
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                    "challenges"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.path "usize",
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let c :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          γ
                                        |) in
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| c |) |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_num_challenges_to_sample :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "num_challenges_to_sample" (num_challenges_to_sample F).
      Admitted.
      Global Typeclasses Opaque num_challenges_to_sample.
      
      (*
          fn new_after_challenge(
              width_after_phase: &[usize],
          ) -> Vec<RowMajorMatrix<SymbolicVariable<F>>> {
              width_after_phase
                  .iter()
                  .map(|&width| {
                      let mat_values = [0, 1]
                          .into_iter()
                          .flat_map(|offset| {
                              (0..width).map(move |index| {
                                  SymbolicVariable::new(Entry::Permutation { offset }, index)
                              })
                          })
                          .collect_vec();
                      RowMajorMatrix::new(mat_values, width)
                  })
                  .collect_vec()
          }
      *)
      Definition new_after_challenge
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ width_after_phase ] =>
          ltac:(M.monadic
            (let width_after_phase :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                width_after_phase
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "itertools::Itertools",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                    Ty.function
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                      (Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ])
                  ],
                [],
                [],
                "collect_vec",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                      Ty.function
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ])
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.function
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| width_after_phase |) |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.deref (| M.read (| γ |) |) in
                                      let width := M.copy (| Ty.path "usize", γ |) in
                                      M.read (|
                                        let~ mat_values :
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ] :=
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.get_trait_method (|
                                              "itertools::Itertools",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::array::iter::IntoIter")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [ Ty.path "usize" ];
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        []
                                                        [ Ty.path "usize" ];
                                                      Ty.function
                                                        [ Ty.path "usize" ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                          []
                                                          [ F ])
                                                    ];
                                                  Ty.function
                                                    [ Ty.path "usize" ]
                                                    (Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.function
                                                          [ Ty.path "usize" ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                            []
                                                            [ F ])
                                                      ])
                                                ],
                                              [],
                                              [],
                                              "collect_vec",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::array::iter::IntoIter")
                                                      [ Value.Integer IntegerKind.Usize 2 ]
                                                      [ Ty.path "usize" ];
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.function
                                                          [ Ty.path "usize" ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                            []
                                                            [ F ])
                                                      ];
                                                    Ty.function
                                                      [ Ty.path "usize" ]
                                                      (Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ];
                                                          Ty.function
                                                            [ Ty.path "usize" ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                              []
                                                              [ F ])
                                                        ])
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::array::iter::IntoIter")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "flat_map",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.function
                                                          [ Ty.path "usize" ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                            []
                                                            [ F ])
                                                      ];
                                                    Ty.function
                                                      [ Ty.path "usize" ]
                                                      (Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ];
                                                          Ty.function
                                                            [ Ty.path "usize" ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                              []
                                                              [ F ])
                                                        ])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::array::iter::IntoIter")
                                                      [ Value.Integer IntegerKind.Usize 2 ]
                                                      [ Ty.path "usize" ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 2 ]
                                                        [ Ty.path "usize" ],
                                                      [],
                                                      [],
                                                      "into_iter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      Value.Array
                                                        [
                                                          Value.Integer IntegerKind.Usize 0;
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::map::Map")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ];
                                                                  Ty.function
                                                                    [ Ty.path "usize" ]
                                                                    (Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                      []
                                                                      [ F ])
                                                                ],
                                                              M.alloc (| Ty.path "usize", α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let offset :=
                                                                      M.copy (|
                                                                        Ty.path "usize",
                                                                        γ
                                                                      |) in
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::range::Range")
                                                                            []
                                                                            [ Ty.path "usize" ];
                                                                          Ty.function
                                                                            [ Ty.path "usize" ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                              []
                                                                              [ F ])
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        [],
                                                                        "map",
                                                                        [],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                            []
                                                                            [ F ];
                                                                          Ty.function
                                                                            [ Ty.path "usize" ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                              []
                                                                              [ F ])
                                                                        ]
                                                                      |),
                                                                      [
                                                                        Value.mkStructRecord
                                                                          "core::ops::range::Range"
                                                                          []
                                                                          [ Ty.path "usize" ]
                                                                          [
                                                                            ("start",
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0);
                                                                            ("end_",
                                                                              M.read (| width |))
                                                                          ];
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                                      []
                                                                                      [ F ],
                                                                                    M.alloc (|
                                                                                      Ty.path
                                                                                        "usize",
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                index :=
                                                                                            M.copy (|
                                                                                              Ty.path
                                                                                                "usize",
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                                              []
                                                                                              [ F ],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                                                []
                                                                                                [ F
                                                                                                ],
                                                                                              "new",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              Value.mkStructRecord
                                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation"
                                                                                                []
                                                                                                []
                                                                                                [
                                                                                                  ("offset",
                                                                                                    M.read (|
                                                                                                      offset
                                                                                                    |))
                                                                                                ];
                                                                                              M.read (|
                                                                                                index
                                                                                              |)
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            ]
                                          |) in
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              "new",
                                              [],
                                              []
                                            |),
                                            [ M.read (| mat_values |); M.read (| width |) ]
                                          |)
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_after_challenge :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new_after_challenge" (new_after_challenge F).
      Admitted.
      Global Typeclasses Opaque new_after_challenge.
      
      (*
          fn new_challenges(num_challenges_to_sample: &[usize]) -> Vec<Vec<SymbolicVariable<F>>> {
              num_challenges_to_sample
                  .iter()
                  .map(|&num_challenges| {
                      (0..num_challenges)
                          .map(|index| SymbolicVariable::new(Entry::Challenge, index))
                          .collect_vec()
                  })
                  .collect_vec()
          }
      *)
      Definition new_challenges
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ num_challenges_to_sample ] =>
          ltac:(M.monadic
            (let num_challenges_to_sample :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                num_challenges_to_sample
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "itertools::Itertools",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                    Ty.function
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                      (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ])
                  ],
                [],
                [],
                "collect_vec",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                      Ty.function
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ])
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| num_challenges_to_sample |) |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.deref (| M.read (| γ |) |) in
                                      let num_challenges := M.copy (| Ty.path "usize", γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.get_trait_method (|
                                          "itertools::Itertools",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ];
                                              Ty.function
                                                [ Ty.path "usize" ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ])
                                            ],
                                          [],
                                          [],
                                          "collect_vec",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ];
                                                Ty.function
                                                  [ Ty.path "usize" ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ])
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.function
                                                  [ Ty.path "usize" ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              Value.mkStructRecord
                                                "core::ops::range::Range"
                                                []
                                                [ Ty.path "usize" ]
                                                [
                                                  ("start", Value.Integer IntegerKind.Usize 0);
                                                  ("end_", M.read (| num_challenges |))
                                                ];
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                            []
                                                            [ F ],
                                                          M.alloc (| Ty.path "usize", α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let index :=
                                                                  M.copy (| Ty.path "usize", γ |) in
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                    []
                                                                    [ F ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                      []
                                                                      [ F ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructTuple
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Challenge"
                                                                      []
                                                                      []
                                                                      [];
                                                                    M.read (| index |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_challenges :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new_challenges" (new_challenges F).
      Admitted.
      Global Typeclasses Opaque new_challenges.
      
      (*
          fn new_exposed_values_after_challenge(
              num_exposed_values_after_challenge: &[usize],
          ) -> Vec<Vec<SymbolicVariable<F>>> {
              num_exposed_values_after_challenge
                  .iter()
                  .map(|&num| {
                      (0..num)
                          .map(|index| SymbolicVariable::new(Entry::Exposed, index))
                          .collect_vec()
                  })
                  .collect_vec()
          }
      *)
      Definition new_exposed_values_after_challenge
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ num_exposed_values_after_challenge ] =>
          ltac:(M.monadic
            (let num_exposed_values_after_challenge :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                num_exposed_values_after_challenge
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "itertools::Itertools",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                    Ty.function
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                      (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ])
                  ],
                [],
                [],
                "collect_vec",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                      Ty.function
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ])
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| num_exposed_values_after_challenge |) |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.deref (| M.read (| γ |) |) in
                                      let num := M.copy (| Ty.path "usize", γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.get_trait_method (|
                                          "itertools::Itertools",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ];
                                              Ty.function
                                                [ Ty.path "usize" ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ])
                                            ],
                                          [],
                                          [],
                                          "collect_vec",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ];
                                                Ty.function
                                                  [ Ty.path "usize" ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ])
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.function
                                                  [ Ty.path "usize" ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              Value.mkStructRecord
                                                "core::ops::range::Range"
                                                []
                                                [ Ty.path "usize" ]
                                                [
                                                  ("start", Value.Integer IntegerKind.Usize 0);
                                                  ("end_", M.read (| num |))
                                                ];
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                            []
                                                            [ F ],
                                                          M.alloc (| Ty.path "usize", α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let index :=
                                                                  M.copy (| Ty.path "usize", γ |) in
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                    []
                                                                    [ F ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                      []
                                                                      [ F ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructTuple
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Exposed"
                                                                      []
                                                                      []
                                                                      [];
                                                                    M.read (| index |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_exposed_values_after_challenge :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C
          (Self F)
          "new_exposed_values_after_challenge"
          (new_exposed_values_after_challenge F).
      Admitted.
      Global Typeclasses Opaque new_exposed_values_after_challenge.
    End Impl_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_p3_air_air_AirBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*     type F = F; *)
      Definition _F (F : Ty.t) : Ty.t := F.
      
      (*     type Expr = SymbolicExpression<Self::F>; *)
      Definition _Expr (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
          []
          [
            Ty.associated_in_trait
              "p3_air::air::AirBuilder"
              []
              []
              (Ty.apply
                (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                []
                [ F ])
              "F"
          ].
      
      (*     type Var = SymbolicVariable<Self::F>; *)
      Definition _Var (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
          []
          [
            Ty.associated_in_trait
              "p3_air::air::AirBuilder"
              []
              []
              (Ty.apply
                (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                []
                [ F ])
              "F"
          ].
      
      (*     type M = RowMajorMatrix<Self::Var>; *)
      Definition _M_ (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "p3_matrix::dense::DenseMatrix")
          []
          [
            Ty.associated_in_trait
              "p3_air::air::AirBuilder"
              []
              []
              (Ty.apply
                (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                []
                [ F ])
              "Var";
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.associated_in_trait
                  "p3_air::air::AirBuilder"
                  []
                  []
                  (Ty.apply
                    (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                    []
                    [ F ])
                  "Var";
                Ty.path "alloc::alloc::Global"
              ]
          ].
      
      (*
          fn main(&self) -> Self::M {
              if self.partitioned_main.len() == 1 {
                  self.partitioned_main[0].clone()
              } else {
                  panic!("Main trace is either empty or partitioned. This function should not be used.")
              }
          }
      *)
      Definition main (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          Ty.path "bool",
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "len",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                      "partitioned_main"
                                    |)
                                  |)
                                ]
                              |);
                              Value.Integer IntegerKind.Usize 1
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [ Ty.path "usize" ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                    "partitioned_main"
                                  |)
                                |);
                                Value.Integer IntegerKind.Usize 0
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.never_to_any (|
                      M.call_closure (|
                        Ty.path "never",
                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              [ Value.Integer IntegerKind.Usize 1 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                      Value.Array
                                        [
                                          mk_str (|
                                            "Main trace is either empty or partitioned. This function should not be used."
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn is_first_row(&self) -> Self::Expr {
              SymbolicExpression::IsFirstRow
          }
      *)
      Definition is_first_row
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            Value.StructTuple
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
              []
              [ F ]
              []))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn is_last_row(&self) -> Self::Expr {
              SymbolicExpression::IsLastRow
          }
      *)
      Definition is_last_row (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            Value.StructTuple
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
              []
              [ F ]
              []))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn is_transition_window(&self, size: usize) -> Self::Expr {
              if size == 2 {
                  SymbolicExpression::IsTransition
              } else {
                  panic!("uni-stark only supports a window size of 2")
              }
          }
      *)
      Definition is_transition_window
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; size ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            let size := M.alloc (| Ty.path "usize", size |) in
            M.match_operator (|
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          Ty.path "bool",
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [ M.read (| size |); Value.Integer IntegerKind.Usize 2 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    Value.StructTuple
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                      []
                      [ F ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (M.never_to_any (|
                      M.call_closure (|
                        Ty.path "never",
                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              [ Value.Integer IntegerKind.Usize 1 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                      Value.Array
                                        [ mk_str (| "uni-stark only supports a window size of 2" |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn assert_zero<I: Into<Self::Expr>>(&mut self, x: I) {
              self.constraints.push(x.into());
          }
      *)
      Definition assert_zero (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ _ as I ], [ self; x ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            let x := M.alloc (| I, x |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                        "constraints"
                      |)
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        I,
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| x |) ]
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::AirBuilder"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("F", InstanceField.Ty (_F F));
            ("Expr", InstanceField.Ty (_Expr F));
            ("Var", InstanceField.Ty (_Var F));
            ("M_", InstanceField.Ty (_M_ F));
            ("main", InstanceField.Method (main F));
            ("is_first_row", InstanceField.Method (is_first_row F));
            ("is_last_row", InstanceField.Method (is_last_row F));
            ("is_transition_window", InstanceField.Method (is_transition_window F));
            ("assert_zero", InstanceField.Method (assert_zero F))
          ].
    End Impl_p3_air_air_AirBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_p3_air_air_PairBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*
          fn preprocessed(&self) -> Self::M {
              self.preprocessed.clone()
          }
      *)
      Definition preprocessed
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ],
              M.get_trait_method (|
                "core::clone::Clone",
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                [],
                [],
                "clone",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                    "preprocessed"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::PairBuilder"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("preprocessed", InstanceField.Method (preprocessed F)) ].
    End Impl_p3_air_air_PairBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_p3_air_air_ExtensionBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*     type EF = F; *)
      Definition _EF (F : Ty.t) : Ty.t := F.
      
      (*     type ExprEF = SymbolicExpression<F>; *)
      Definition _ExprEF (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
          []
          [ F ].
      
      (*     type VarEF = SymbolicVariable<F>; *)
      Definition _VarEF (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
          []
          [ F ].
      
      (*
          fn assert_zero_ext<I>(&mut self, x: I)
          where
              I: Into<Self::ExprEF>,
          {
              self.constraints.push(x.into());
          }
      *)
      Definition assert_zero_ext
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ _ as I ], [ self; x ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            let x := M.alloc (| I, x |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                        "constraints"
                      |)
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        I,
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| x |) ]
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::ExtensionBuilder"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("EF", InstanceField.Ty (_EF F));
            ("ExprEF", InstanceField.Ty (_ExprEF F));
            ("VarEF", InstanceField.Ty (_VarEF F));
            ("assert_zero_ext", InstanceField.Method (assert_zero_ext F))
          ].
    End Impl_p3_air_air_ExtensionBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_p3_air_air_AirBuilderWithPublicValues_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*     type PublicVar = SymbolicVariable<F>; *)
      Definition _PublicVar (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
          []
          [ F ].
      
      (*
          fn public_values(&self) -> &[Self::PublicVar] {
              &self.public_values
          }
      *)
      Definition public_values
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ]
                        ]
                    ],
                  M.get_trait_method (|
                    "core::ops::deref::Deref",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "deref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                            "public_values"
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::AirBuilderWithPublicValues"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("PublicVar", InstanceField.Ty (_PublicVar F));
            ("public_values", InstanceField.Method (public_values F))
          ].
    End Impl_p3_air_air_AirBuilderWithPublicValues_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_p3_air_air_PermutationAirBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*     type MP = RowMajorMatrix<Self::VarEF>; *)
      Definition _MP (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "p3_matrix::dense::DenseMatrix")
          []
          [
            Ty.associated_in_trait
              "p3_air::air::ExtensionBuilder"
              []
              []
              (Ty.apply
                (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                []
                [ F ])
              "VarEF";
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.associated_in_trait
                  "p3_air::air::ExtensionBuilder"
                  []
                  []
                  (Ty.apply
                    (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                    []
                    [ F ])
                  "VarEF";
                Ty.path "alloc::alloc::Global"
              ]
          ].
      
      (*     type RandomVar = SymbolicVariable<F>; *)
      Definition _RandomVar (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
          []
          [ F ].
      
      (*
          fn permutation(&self) -> Self::MP {
              self.after_challenge
                  .first()
                  .expect("Challenge phase not supported")
                  .clone()
          }
      *)
      Definition permutation (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ],
              M.get_trait_method (|
                "core::clone::Clone",
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                [],
                [],
                "clone",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ]
                          ],
                        "expect",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ],
                            "first",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                        "after_challenge"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "Challenge phase not supported" |) |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn permutation_randomness(&self) -> &[Self::RandomVar] {
              self.challenges
                  .first()
                  .map(|c| c.as_slice())
                  .expect("Challenge phase not supported")
          }
      *)
      Definition permutation_randomness
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ]
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ]
                              ]
                          ]
                      ],
                    "expect",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ]
                                ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ]
                                ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ]
                                  ]
                              ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "first",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                        "challenges"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ]
                                          ]
                                      ],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let c :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              γ
                                            |) in
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "as_slice",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| c |) |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "Challenge phase not supported" |) |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::PermutationAirBuilder"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("MP", InstanceField.Ty (_MP F));
            ("RandomVar", InstanceField.Ty (_RandomVar F));
            ("permutation", InstanceField.Method (permutation F));
            ("permutation_randomness", InstanceField.Method (permutation_randomness F))
          ].
    End Impl_p3_air_air_PermutationAirBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_openvm_stark_backend_rap_PermutationAirBuilderWithExposedValues_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*
          fn permutation_exposed_values(&self) -> &[Self::VarEF] {
              self.exposed_values_after_challenge
                  .first()
                  .map(|c| c.as_slice())
                  .expect("Challenge phase not supported")
          }
      *)
      Definition permutation_exposed_values
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ]
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ]
                              ]
                          ]
                      ],
                    "expect",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ]
                                ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ]
                                ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ]
                                  ]
                              ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "first",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                        "exposed_values_after_challenge"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                              []
                                              [ F ]
                                          ]
                                      ],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let c :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              γ
                                            |) in
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "as_slice",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| c |) |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "Challenge phase not supported" |) |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::rap::PermutationAirBuilderWithExposedValues"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [ ("permutation_exposed_values", InstanceField.Method (permutation_exposed_values F)) ].
    End Impl_openvm_stark_backend_rap_PermutationAirBuilderWithExposedValues_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_openvm_stark_backend_interaction_InteractionBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*
          fn push_interaction<E: Into<Self::Expr>>(
              &mut self,
              bus_index: BusIndex,
              fields: impl IntoIterator<Item = E>,
              count: impl Into<Self::Expr>,
              count_weight: u32,
          ) {
              let fields = fields.into_iter().map(|f| f.into()).collect();
              let count = count.into();
              self.interactions.push(Interaction {
                  bus_index,
                  message: fields,
                  count,
                  count_weight,
              });
          }
      *)
      Definition push_interaction
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [],
            [ E; impl_IntoIterator_Item___E_; impl_Into_Self_Expr_ ],
            [ self; bus_index; fields; count; count_weight ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            let bus_index := M.alloc (| Ty.path "u16", bus_index |) in
            let fields := M.alloc (| impl_IntoIterator_Item___E_, fields |) in
            let count := M.alloc (| impl_Into_Self_Expr_, count |) in
            let count_weight := M.alloc (| Ty.path "u32", count_weight |) in
            M.read (|
              let~ fields :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          impl_IntoIterator_Item___E_
                          "IntoIter";
                        Ty.function
                          [ E ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::collect::IntoIterator"
                            []
                            []
                            impl_IntoIterator_Item___E_
                            "IntoIter";
                          Ty.function
                            [ E ]
                            (Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          impl_IntoIterator_Item___E_
                          "IntoIter",
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.function
                            [ E ]
                            (Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait
                            "core::iter::traits::collect::IntoIterator"
                            []
                            []
                            impl_IntoIterator_Item___E_
                            "IntoIter",
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            impl_IntoIterator_Item___E_,
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| fields |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ],
                                    M.alloc (| E, α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let f := M.copy (| E, γ |) in
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ],
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              E,
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                              "into",
                                              [],
                                              []
                                            |),
                                            [ M.read (| f |) ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |) in
              let~ count :
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  M.get_trait_method (|
                    "core::convert::Into",
                    impl_Into_Self_Expr_,
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                    "into",
                    [],
                    []
                  |),
                  [ M.read (| count |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::Interaction")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                        "interactions"
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_stark_backend::interaction::Interaction"
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ]
                      [
                        ("bus_index", M.read (| bus_index |));
                        ("message", M.read (| fields |));
                        ("count", M.read (| count |));
                        ("count_weight", M.read (| count_weight |))
                      ]
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn num_interactions(&self) -> usize {
              self.interactions.len()
          }
      *)
      Definition num_interactions
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                "len",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                    "interactions"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn all_interactions(&self) -> &[Interaction<Self::Expr>] {
              &self.interactions
          }
      *)
      Definition all_interactions
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::Interaction")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ]
                            ]
                        ]
                    ],
                  M.get_trait_method (|
                    "core::ops::deref::Deref",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::Interaction")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "deref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                            "interactions"
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::interaction::InteractionBuilder"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("push_interaction", InstanceField.Method (push_interaction F));
            ("num_interactions", InstanceField.Method (num_interactions F));
            ("all_interactions", InstanceField.Method (all_interactions F))
          ].
    End Impl_openvm_stark_backend_interaction_InteractionBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_openvm_stark_backend_interaction_rap_InteractionPhaseAirBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*
          fn finalize_interactions(&mut self) {
              let num_interactions = self.num_interactions();
              if num_interactions != 0 {
                  assert!(
                      self.after_challenge.is_empty(),
                      "after_challenge width should be auto-populated by the InteractionBuilder"
                  );
                  assert!(self.challenges.is_empty());
                  assert!(self.exposed_values_after_challenge.is_empty());
      
                  if self.rap_phase_seq_kind == RapPhaseSeqKind::FriLogUp {
                      let interaction_partitions =
                          find_interaction_chunks(&self.interactions, self.max_constraint_degree)
                              .interaction_partitions();
                      let num_chunks = interaction_partitions.len();
                      self.interaction_partitions.replace(interaction_partitions);
                      let perm_width = num_chunks + 1;
                      self.after_challenge = Self::new_after_challenge(&[perm_width]);
                  }
      
                  let phases_shapes = self.rap_phase_seq_kind.shape();
                  let phase_shape = phases_shapes.first().unwrap();
      
                  self.challenges = Self::new_challenges(&[phase_shape.num_challenges]);
                  self.exposed_values_after_challenge =
                      Self::new_exposed_values_after_challenge(&[phase_shape.num_exposed_values]);
              }
          }
      *)
      Definition finalize_interactions
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.read (|
              let~ num_interactions : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "openvm_stark_backend::interaction::InteractionBuilder",
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ],
                    [],
                    [],
                    "num_interactions",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [ M.read (| num_interactions |); Value.Integer IntegerKind.Usize 0 ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                              []
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "is_empty",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                                    "after_challenge"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_const",
                                              [ Value.Integer IntegerKind.Usize 1 ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "after_challenge width should be auto-populated by the InteractionBuilder"
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                          []
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "is_empty",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                                    "challenges"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          mk_str (|
                                            "assertion failed: self.challenges.is_empty()"
                                          |)
                                        ]
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                          []
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "is_empty",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                                    "exposed_values_after_challenge"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          mk_str (|
                                            "assertion failed: self.exposed_values_after_challenge.is_empty()"
                                          |)
                                        ]
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              Ty.path
                                                "openvm_stark_backend::interaction::RapPhaseSeqKind",
                                              [],
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::interaction::RapPhaseSeqKind"
                                              ],
                                              "eq",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                                  "rap_phase_seq_kind"
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path
                                                    "openvm_stark_backend::interaction::RapPhaseSeqKind",
                                                  Value.StructTuple
                                                    "openvm_stark_backend::interaction::RapPhaseSeqKind::FriLogUp"
                                                    []
                                                    []
                                                    []
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ interaction_partitions :
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ] :=
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.get_associated_function (|
                                            Ty.path
                                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                            "interaction_partitions",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path
                                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                              M.get_function (|
                                                "openvm_stark_backend::interaction::fri_log_up::find_interaction_chunks",
                                                [],
                                                [ F ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                    []
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::interaction::Interaction")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [ F ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [],
                                                        "deref",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                                                "interactions"
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                                    "max_constraint_degree"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |) in
                                      let~ num_chunks : Ty.path "usize" :=
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, interaction_partitions |)
                                          ]
                                        |) in
                                      let~ _ :
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ] :=
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            "replace",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                                "interaction_partitions"
                                              |)
                                            |);
                                            M.read (| interaction_partitions |)
                                          ]
                                        |) in
                                      let~ perm_width : Ty.path "usize" :=
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.read (| num_chunks |);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.write (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                            "after_challenge"
                                          |),
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                      []
                                                      [ F ];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                          []
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                                                []
                                                [ F ],
                                              "new_after_challenge",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                M.pointer_coercion
                                                  M.PointerCoercion.Unsize
                                                  (Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [ Ty.path "usize" ]
                                                    ])
                                                  (Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.path "usize" ]
                                                    ]),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [ Ty.path "usize" ],
                                                          Value.Array [ M.read (| perm_width |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ phases_shapes :
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.path "openvm_stark_backend::interaction::RapPhaseShape";
                                  Ty.path "alloc::alloc::Global"
                                ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.path "openvm_stark_backend::interaction::RapPhaseShape";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind",
                                "shape",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                    "rap_phase_seq_kind"
                                  |)
                                |)
                              ]
                            |) in
                          let~ phase_shape :
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ]
                                  ],
                                "unwrap",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape"
                                      ],
                                    "first",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_stark_backend::interaction::RapPhaseShape"
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::interaction::RapPhaseShape";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, phases_shapes |) ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                "challenges"
                              |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                                    []
                                    [ F ],
                                  "new_challenges",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [ Ty.path "usize" ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [ Ty.path "usize" ],
                                              Value.Array
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| phase_shape |) |),
                                                      "openvm_stark_backend::interaction::RapPhaseShape",
                                                      "num_challenges"
                                                    |)
                                                  |)
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                "exposed_values_after_challenge"
                              |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                                    []
                                    [ F ],
                                  "new_exposed_values_after_challenge",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [ Ty.path "usize" ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [ Ty.path "usize" ],
                                              Value.Array
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| phase_shape |) |),
                                                      "openvm_stark_backend::interaction::RapPhaseShape",
                                                      "num_exposed_values"
                                                    |)
                                                  |)
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn max_constraint_degree(&self) -> usize {
              self.max_constraint_degree
          }
      *)
      Definition max_constraint_degree
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                "max_constraint_degree"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn rap_phase_seq_kind(&self) -> RapPhaseSeqKind {
              self.rap_phase_seq_kind
          }
      *)
      Definition rap_phase_seq_kind
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                "rap_phase_seq_kind"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn symbolic_interactions(&self) -> Vec<SymbolicInteraction<F>> {
              self.interactions.clone()
          }
      *)
      Definition symbolic_interactions
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "core::clone::Clone",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                [],
                [],
                "clone",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                    "interactions"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::interaction::rap::InteractionPhaseAirBuilder"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("finalize_interactions", InstanceField.Method (finalize_interactions F));
            ("max_constraint_degree", InstanceField.Method (max_constraint_degree F));
            ("rap_phase_seq_kind", InstanceField.Method (rap_phase_seq_kind F));
            ("symbolic_interactions", InstanceField.Method (symbolic_interactions F))
          ].
    End Impl_openvm_stark_backend_interaction_rap_InteractionPhaseAirBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    Module Impl_openvm_stark_backend_air_builders_PartitionedAirBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
          []
          [ F ].
      
      (*
          fn cached_mains(&self) -> &[Self::M] {
              &self.partitioned_main[..self.trace_width.cached_mains.len()]
          }
      *)
      Definition cached_mains
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "core::ops::index::Index",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [ Ty.apply (Ty.path "core::ops::range::RangeTo") [] [ Ty.path "usize" ] ],
                        "index",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                            "partitioned_main"
                          |)
                        |);
                        Value.mkStructRecord
                          "core::ops::range::RangeTo"
                          []
                          [ Ty.path "usize" ]
                          [
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  "len",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                        "trace_width"
                                      |),
                                      "openvm_stark_backend::keygen::types::TraceWidth",
                                      "cached_mains"
                                    |)
                                  |)
                                ]
                              |))
                          ]
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn common_main(&self) -> &Self::M {
              assert_ne!(
                  self.trace_width.common_main, 0,
                  "AIR doesn't have a common main trace"
              );
              &self.partitioned_main[self.trace_width.cached_mains.len()]
          }
      *)
      Definition common_main (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                      ],
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                              "trace_width"
                            |),
                            "openvm_stark_backend::keygen::types::TraceWidth",
                            "common_main"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val :=
                          M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                        let right_val :=
                          M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind : Ty.path "core::panicking::AssertKind" :=
                                      Value.StructTuple
                                        "core::panicking::AssertKind::Ne"
                                        []
                                        []
                                        [] in
                                    M.alloc (|
                                      Ty.path "never",
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            []
                                            [ Ty.path "core::fmt::Arguments" ]
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_const",
                                                  [ Value.Integer IntegerKind.Usize 1 ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "str" ]
                                                            ],
                                                          Value.Array
                                                            [
                                                              mk_str (|
                                                                "AIR doesn't have a common main trace"
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |)))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                  ],
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::index::Index",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [ Ty.path "usize" ],
                            "index",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                "partitioned_main"
                              |)
                            |);
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                "len",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder",
                                      "trace_width"
                                    |),
                                    "openvm_stark_backend::keygen::types::TraceWidth",
                                    "cached_mains"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::air_builders::PartitionedAirBuilder"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("cached_mains", InstanceField.Method (cached_mains F));
            ("common_main", InstanceField.Method (common_main F))
          ].
    End Impl_openvm_stark_backend_air_builders_PartitionedAirBuilder_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_F.
    
    (* StructTuple
      {
        name := "LocalOnlyChecker";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_openvm_stark_backend_air_builders_symbolic_LocalOnlyChecker.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::air_builders::symbolic::LocalOnlyChecker".
      
      (*
          fn check_var<F: Field>(var: SymbolicVariable<F>) -> bool {
              match var.entry {
                  Entry::Preprocessed { offset } => offset == 0,
                  Entry::Main { offset, .. } => offset == 0,
                  Entry::Permutation { offset } => offset == 0,
                  Entry::Public => true,
                  Entry::Challenge => true,
                  Entry::Exposed => true,
              }
          }
      *)
      Definition check_var (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ F ], [ var ] =>
          ltac:(M.monadic
            (let var :=
              M.alloc (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                  []
                  [ F ],
                var
              |) in
            M.match_operator (|
              Ty.path "bool",
              M.SubPointer.get_struct_record_field (|
                var,
                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                "entry"
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed",
                        "offset"
                      |) in
                    let offset := M.copy (| Ty.path "usize", γ0_0 |) in
                    M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [ M.read (| offset |); Value.Integer IntegerKind.Usize 0 ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                        "offset"
                      |) in
                    let offset := M.copy (| Ty.path "usize", γ0_0 |) in
                    M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [ M.read (| offset |); Value.Integer IntegerKind.Usize 0 ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation",
                        "offset"
                      |) in
                    let offset := M.copy (| Ty.path "usize", γ0_0 |) in
                    M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [ M.read (| offset |); Value.Integer IntegerKind.Usize 0 ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Public"
                      |) in
                    Value.Bool true));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Challenge"
                      |) in
                    Value.Bool true));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Exposed"
                      |) in
                    Value.Bool true))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_check_var :
        M.IsAssociatedFunction.C Self "check_var" check_var.
      Admitted.
      Global Typeclasses Opaque check_var.
      
      (*
          fn check_expr<F: Field>(expr: &SymbolicExpression<F>) -> bool {
              match expr {
                  SymbolicExpression::Variable(var) => Self::check_var( *var),
                  SymbolicExpression::IsFirstRow => false,
                  SymbolicExpression::IsLastRow => false,
                  SymbolicExpression::IsTransition => false,
                  SymbolicExpression::Constant(_) => true,
                  SymbolicExpression::Add { x, y, .. } => Self::check_expr(x) && Self::check_expr(y),
                  SymbolicExpression::Sub { x, y, .. } => Self::check_expr(x) && Self::check_expr(y),
                  SymbolicExpression::Neg { x, .. } => Self::check_expr(x),
                  SymbolicExpression::Mul { x, y, .. } => Self::check_expr(x) && Self::check_expr(y),
              }
          }
      *)
      Definition check_expr (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ F ], [ expr ] =>
          ltac:(M.monadic
            (let expr :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                expr
              |) in
            M.match_operator (|
              Ty.path "bool",
              expr,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                        0
                      |) in
                    let var :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_associated_function (|
                        Ty.path "openvm_stark_backend::air_builders::symbolic::LocalOnlyChecker",
                        "check_var",
                        [],
                        [ F ]
                      |),
                      [ M.read (| M.deref (| M.read (| var |) |) |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                      |) in
                    Value.Bool false));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                      |) in
                    Value.Bool false));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                      |) in
                    Value.Bool false));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    Value.Bool true));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                        "y"
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        γ1_0
                      |) in
                    let y :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        γ1_1
                      |) in
                    LogicalOp.and (|
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_associated_function (|
                          Ty.path "openvm_stark_backend::air_builders::symbolic::LocalOnlyChecker",
                          "check_expr",
                          [],
                          [ F ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          M.get_associated_function (|
                            Ty.path
                              "openvm_stark_backend::air_builders::symbolic::LocalOnlyChecker",
                            "check_expr",
                            [],
                            [ F ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
                                |)
                              |)
                            |)
                          ]
                        |)))
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                        "y"
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        γ1_0
                      |) in
                    let y :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        γ1_1
                      |) in
                    LogicalOp.and (|
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_associated_function (|
                          Ty.path "openvm_stark_backend::air_builders::symbolic::LocalOnlyChecker",
                          "check_expr",
                          [],
                          [ F ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          M.get_associated_function (|
                            Ty.path
                              "openvm_stark_backend::air_builders::symbolic::LocalOnlyChecker",
                            "check_expr",
                            [],
                            [ F ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
                                |)
                              |)
                            |)
                          ]
                        |)))
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                        "x"
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_associated_function (|
                        Ty.path "openvm_stark_backend::air_builders::symbolic::LocalOnlyChecker",
                        "check_expr",
                        [],
                        [ F ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                        "y"
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        γ1_0
                      |) in
                    let y :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        γ1_1
                      |) in
                    LogicalOp.and (|
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_associated_function (|
                          Ty.path "openvm_stark_backend::air_builders::symbolic::LocalOnlyChecker",
                          "check_expr",
                          [],
                          [ F ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          M.get_associated_function (|
                            Ty.path
                              "openvm_stark_backend::air_builders::symbolic::LocalOnlyChecker",
                            "check_expr",
                            [],
                            [ F ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
                                |)
                              |)
                            |)
                          ]
                        |)))
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_check_expr :
        M.IsAssociatedFunction.C Self "check_expr" check_expr.
      Admitted.
      Global Typeclasses Opaque check_expr.
    End Impl_openvm_stark_backend_air_builders_symbolic_LocalOnlyChecker.
    
    (*
    fn gen_main_trace<F: Field>(
        part_index: usize,
        width: usize,
    ) -> RowMajorMatrix<SymbolicVariable<F>> {
        let mat_values = [0, 1]
            .into_iter()
            .flat_map(|offset| {
                (0..width)
                    .map(move |index| SymbolicVariable::new(Entry::Main { part_index, offset }, index))
            })
            .collect_vec();
        RowMajorMatrix::new(mat_values, width)
    }
    *)
    Definition gen_main_trace (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ part_index; width ] =>
        ltac:(M.monadic
          (let part_index := M.alloc (| Ty.path "usize", part_index |) in
          let width := M.alloc (| Ty.path "usize", width |) in
          M.read (|
            let~ mat_values :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                      []
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                      []
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::array::iter::IntoIter")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "usize" ];
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function
                            [ Ty.path "usize" ]
                            (Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ])
                        ];
                      Ty.function
                        [ Ty.path "usize" ]
                        (Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                            Ty.function
                              [ Ty.path "usize" ]
                              (Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ])
                          ])
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "usize" ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                            Ty.function
                              [ Ty.path "usize" ]
                              (Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ])
                          ];
                        Ty.function
                          [ Ty.path "usize" ]
                          (Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                              Ty.function
                                [ Ty.path "usize" ]
                                (Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ])
                            ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::array::iter::IntoIter")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "usize" ],
                      [],
                      [],
                      "flat_map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                            Ty.function
                              [ Ty.path "usize" ]
                              (Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ])
                          ];
                        Ty.function
                          [ Ty.path "usize" ]
                          (Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                              Ty.function
                                [ Ty.path "usize" ]
                                (Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                  []
                                  [ F ])
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "usize" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.Array
                            [ Value.Integer IntegerKind.Usize 0; Value.Integer IntegerKind.Usize 1 ]
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ];
                                      Ty.function
                                        [ Ty.path "usize" ]
                                        (Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ])
                                    ],
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let offset := M.copy (| Ty.path "usize", γ |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ];
                                              Ty.function
                                                [ Ty.path "usize" ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ])
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "map",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                []
                                                [ F ];
                                              Ty.function
                                                [ Ty.path "usize" ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                  []
                                                  [ F ])
                                            ]
                                          |),
                                          [
                                            Value.mkStructRecord
                                              "core::ops::range::Range"
                                              []
                                              [ Ty.path "usize" ]
                                              [
                                                ("start", Value.Integer IntegerKind.Usize 0);
                                                ("end_", M.read (| width |))
                                              ];
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                          []
                                                          [ F ],
                                                        M.alloc (| Ty.path "usize", α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let index :=
                                                                M.copy (| Ty.path "usize", γ |) in
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                  []
                                                                  [ F ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                    []
                                                                    [ F ],
                                                                  "new",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  Value.mkStructRecord
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main"
                                                                    []
                                                                    []
                                                                    [
                                                                      ("part_index",
                                                                        M.read (| part_index |));
                                                                      ("offset",
                                                                        M.read (| offset |))
                                                                    ];
                                                                  M.read (| index |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            M.alloc (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ];
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ],
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                      []
                      [ F ];
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| mat_values |); M.read (| width |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_gen_main_trace :
      M.IsFunction.C "openvm_stark_backend::air_builders::symbolic::gen_main_trace" gen_main_trace.
    Admitted.
    Global Typeclasses Opaque gen_main_trace.
  End symbolic.
End air_builders.
