(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module air_builders.
  Module symbolic.
    Module symbolic_expression.
      (*
      Enum SymbolicExpression
      {
        const_params := [];
        ty_params := [ "F" ];
        variants :=
          [
            {
              name := "Variable";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                      []
                      [ F ]
                  ];
            };
            {
              name := "IsFirstRow";
              item := StructTuple [];
            };
            {
              name := "IsLastRow";
              item := StructTuple [];
            };
            {
              name := "IsTransition";
              item := StructTuple [];
            };
            {
              name := "Constant";
              item := StructTuple [ F ];
            };
            {
              name := "Add";
              item :=
                StructRecord
                  [
                    ("x",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]);
                    ("y",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]);
                    ("degree_multiple", Ty.path "usize")
                  ];
            };
            {
              name := "Sub";
              item :=
                StructRecord
                  [
                    ("x",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]);
                    ("y",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]);
                    ("degree_multiple", Ty.path "usize")
                  ];
            };
            {
              name := "Neg";
              item :=
                StructRecord
                  [
                    ("x",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]);
                    ("degree_multiple", Ty.path "usize")
                  ];
            };
            {
              name := "Mul";
              item :=
                StructRecord
                  [
                    ("x",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]);
                    ("y",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]);
                    ("degree_multiple", Ty.path "usize")
                  ];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_SymbolicExpression_Variable :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable"
          0.
      Axiom IsDiscriminant_SymbolicExpression_IsFirstRow :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
          1.
      Axiom IsDiscriminant_SymbolicExpression_IsLastRow :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
          2.
      Axiom IsDiscriminant_SymbolicExpression_IsTransition :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
          3.
      Axiom IsDiscriminant_SymbolicExpression_Constant :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
          4.
      Axiom IsDiscriminant_SymbolicExpression_Add :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add"
          5.
      Axiom IsDiscriminant_SymbolicExpression_Sub :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub"
          6.
      Axiom IsDiscriminant_SymbolicExpression_Neg :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg"
          7.
      Axiom IsDiscriminant_SymbolicExpression_Mul :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul"
          8.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (* Clone *)
        Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable"
                        []
                        [ F ]
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                              []
                              [ F ],
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ],
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                        |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                        []
                        [ F ]
                        []));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                        |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                        []
                        [ F ]
                        []));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                        |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                        []
                        [ F ]
                        []));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                          0
                        |) in
                      let __self_0 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ1_0 |) in
                      Value.StructTuple
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                        []
                        [ F ]
                        [
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              F,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                          "y"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add"
                        []
                        [ F ]
                        [
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("y",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                          "y"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub"
                        []
                        [ F ]
                        [
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("y",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg"
                        []
                        [ F ]
                        [
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                          "y"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul"
                        []
                        [ F ]
                        [
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("y",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Variable" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ]
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IsFirstRow" |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IsLastRow" |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IsTransition" |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                          0
                        |) in
                      let __self_0 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ1_0 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Constant" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ F ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                          "y"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Add" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "x" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "y" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |) ]
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                          "y"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Sub" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "x" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "y" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |) ]
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field2_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Neg" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "x" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                          "y"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                          "degree_multiple"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Mul" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "x" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "y" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |) ]
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module underscore.
        Module Impl_serde_ser_Serialize_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
              []
              [ F ].
          
          (* Serialize *)
          Definition serialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.deref (| M.read (| self |) |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                                0
                              |) in
                            let __field0 :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                      []
                                      [ F ]
                                  ],
                                γ0_0
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_newtype_variant",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ]
                                ]
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpression" |);
                                Value.Integer IntegerKind.U32 0;
                                mk_str (| "Variable" |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __field0 |) |) |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_unit_variant",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpression" |);
                                Value.Integer IntegerKind.U32 1;
                                mk_str (| "IsFirstRow" |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_unit_variant",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpression" |);
                                Value.Integer IntegerKind.U32 2;
                                mk_str (| "IsLastRow" |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_unit_variant",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpression" |);
                                Value.Integer IntegerKind.U32 3;
                                mk_str (| "IsTransition" |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                                0
                              |) in
                            let __field0 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ0_0 |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_newtype_variant",
                                [],
                                [ F ]
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "SymbolicExpression" |);
                                Value.Integer IntegerKind.U32 4;
                                mk_str (| "Constant" |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __field0 |) |) |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                "x"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                "y"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                "degree_multiple"
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ0_0
                              |) in
                            let y :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_2 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "SymbolicExpression" |);
                                            Value.Integer IntegerKind.U32 5;
                                            mk_str (| "Add" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        Value.Integer IntegerKind.Usize 0;
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "x" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| x |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "y" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| y |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "degree_multiple" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| degree_multiple |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                "x"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                "y"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                "degree_multiple"
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ0_0
                              |) in
                            let y :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_2 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "SymbolicExpression" |);
                                            Value.Integer IntegerKind.U32 6;
                                            mk_str (| "Sub" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        Value.Integer IntegerKind.Usize 0;
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "x" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| x |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "y" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| y |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "degree_multiple" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| degree_multiple |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                                "x"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                                "degree_multiple"
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ0_0
                              |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "SymbolicExpression" |);
                                            Value.Integer IntegerKind.U32 7;
                                            mk_str (| "Neg" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    Value.Integer IntegerKind.Usize 0;
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "x" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| x |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "degree_multiple" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| degree_multiple |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                "x"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                "y"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                "degree_multiple"
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ0_0
                              |) in
                            let y :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let degree_multiple :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_2 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "SymbolicExpression" |);
                                            Value.Integer IntegerKind.U32 8;
                                            mk_str (| "Mul" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        Value.Integer IntegerKind.Usize 0;
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "x" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| x |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "y" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| y |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "degree_multiple" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| degree_multiple |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)))
                      ]
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
        End Impl_serde_ser_Serialize_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Module Impl_serde_de_Deserialize_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
              []
              [ F ].
          
          (* Deserialize *)
          Definition deserialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_enum",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::_'1::deserialize::__Visitor")
                        []
                        [ F ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "SymbolicExpression" |);
                    M.read (|
                      get_constant (|
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::_'1::deserialize::VARIANTS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::_'1::deserialize::__Visitor"
                      []
                      [ F ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
        End Impl_serde_de_Deserialize_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      End underscore.
      
      
      Module Impl_core_hash_Hash_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn hash<H: Hasher>(&self, state: &mut H) {
                // First hash the discriminant of the enum
                std::mem::discriminant(self).hash(state);
                // Degree multiple is not necessary
                match self {
                    Self::Variable(v) => v.hash(state),
                    Self::IsFirstRow => {}   // discriminant is enough
                    Self::IsLastRow => {}    // discriminant is enough
                    Self::IsTransition => {} // discriminant is enough
                    Self::Constant(f) => f.hash(state),
                    Self::Add { x, y, .. } => {
                        ptr::hash(&**x, state);
                        ptr::hash(&**y, state);
                    }
                    Self::Sub { x, y, .. } => {
                        ptr::hash(&**x, state);
                        ptr::hash(&**y, state);
                    }
                    Self::Neg { x, .. } => {
                        ptr::hash(&**x, state);
                    }
                    Self::Mul { x, y, .. } => {
                        ptr::hash(&**x, state);
                        ptr::hash(&**y, state);
                    }
                }
            }
        *)
        Definition hash (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ H ], [ self; state ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let state := M.alloc (| Ty.apply (Ty.path "&mut") [] [ H ], state |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.apply
                        (Ty.path "core::mem::Discriminant")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                      [],
                      [],
                      "hash",
                      [],
                      [ H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::mem::Discriminant")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::mem::Discriminant")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ],
                            M.get_function (|
                              "core::mem::discriminant",
                              [],
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ]
                              ]
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                              0
                            |) in
                          let v :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ],
                              [],
                              [],
                              "hash",
                              [],
                              [ H ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| v |) |) |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                            |) in
                          Value.Tuple []));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                            |) in
                          Value.Tuple []));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                            |) in
                          Value.Tuple []));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                              0
                            |) in
                          let f := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ1_0 |) in
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_trait_method (|
                              "core::hash::Hash",
                              F,
                              [],
                              [],
                              "hash",
                              [],
                              [ H ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| f |) |) |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                              "x"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                              "y"
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              γ1_0
                            |) in
                          let y :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              γ1_1
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::ptr::hash",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    H
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.ConstPointer,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| state |) |)
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::ptr::hash",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    H
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.ConstPointer,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| y |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| state |) |)
                                  |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                              "x"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                              "y"
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              γ1_0
                            |) in
                          let y :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              γ1_1
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::ptr::hash",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    H
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.ConstPointer,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| state |) |)
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::ptr::hash",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    H
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.ConstPointer,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| y |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| state |) |)
                                  |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                              "x"
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              γ1_0
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::ptr::hash",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    H
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.ConstPointer,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| state |) |)
                                  |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                              "x"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                              "y"
                            |) in
                          let x :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              γ1_0
                            |) in
                          let y :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              γ1_1
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::ptr::hash",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    H
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.ConstPointer,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| x |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| state |) |)
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::ptr::hash",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    H
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.ConstPointer,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| y |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| state |) |)
                                  |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::hash::Hash"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("hash", InstanceField.Method (hash F)) ].
      End Impl_core_hash_Hash_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_cmp_PartialEq_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn eq(&self, other: &Self) -> bool {
                // First check if the variants match
                if std::mem::discriminant(self) != std::mem::discriminant(other) {
                    return false;
                }
        
                // Then check equality based on variant-specific data
                match (self, other) {
                    (Self::Variable(v1), Self::Variable(v2)) => v1 == v2,
                    // IsFirstRow, IsLastRow, and IsTransition are all unit variants,
                    // so if the discriminants match, they're equal
                    (Self::IsFirstRow, Self::IsFirstRow) => true,
                    (Self::IsLastRow, Self::IsLastRow) => true,
                    (Self::IsTransition, Self::IsTransition) => true,
                    (Self::Constant(c1), Self::Constant(c2)) => c1 == c2,
                    // For compound expressions, compare pointers to match how Hash is implemented
                    (Self::Add { x: x1, y: y1, .. }, Self::Add { x: x2, y: y2, .. }) => {
                        Arc::ptr_eq(x1, x2) && Arc::ptr_eq(y1, y2)
                    }
                    (Self::Sub { x: x1, y: y1, .. }, Self::Sub { x: x2, y: y2, .. }) => {
                        Arc::ptr_eq(x1, x2) && Arc::ptr_eq(y1, y2)
                    }
                    (Self::Neg { x: x1, .. }, Self::Neg { x: x2, .. }) => Arc::ptr_eq(x1, x2),
                    (Self::Mul { x: x1, y: y1, .. }, Self::Mul { x: x2, y: y2, .. }) => {
                        Arc::ptr_eq(x1, x2) && Arc::ptr_eq(y1, y2)
                    }
                    // This should never be reached because we've already checked the discriminants
                    _ => false,
                }
            }
        *)
        Definition eq (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  other
                |) in
              M.catch_return (Ty.path "bool") (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply
                                          (Ty.path "core::mem::Discriminant")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ]
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::mem::Discriminant")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ]
                                        ],
                                        "ne",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::mem::Discriminant")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::mem::Discriminant")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ],
                                              M.get_function (|
                                                "core::mem::discriminant",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::mem::Discriminant")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::mem::Discriminant")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ],
                                              M.get_function (|
                                                "core::mem::discriminant",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| other |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (| M.read (| M.return_ (| Value.Bool false |) |) |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    M.alloc (|
                      Ty.path "bool",
                      M.match_operator (|
                        Ty.path "bool",
                        M.alloc (|
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ]
                                ]
                            ],
                          Value.Tuple [ M.read (| self |); M.read (| other |) ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                                  0
                                |) in
                              let v1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ]
                                    ],
                                  γ2_0
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                                  0
                                |) in
                              let v2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ]
                                    ],
                                  γ2_0
                                |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                        []
                                        [ F ]
                                    ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, v1 |);
                                  M.borrow (| Pointer.Kind.Ref, v2 |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                                |) in
                              Value.Bool true));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                                |) in
                              Value.Bool true));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                                |) in
                              Value.Bool true));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                                  0
                                |) in
                              let c1 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                                  0
                                |) in
                              let c2 := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ2_0 |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply (Ty.path "&") [] [ F ],
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ F ] ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, c1 |);
                                  M.borrow (| Pointer.Kind.Ref, c2 |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                  "x"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                  "y"
                                |) in
                              let x1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_0
                                |) in
                              let y1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_1
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                  "x"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                                  "y"
                                |) in
                              let x2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_0
                                |) in
                              let y2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_1
                                |) in
                              LogicalOp.and (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "ptr_eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x1 |) |) |);
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x2 |) |) |)
                                  ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "ptr_eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| y1 |) |)
                                      |);
                                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y2 |) |) |)
                                    ]
                                  |)))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                  "x"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                  "y"
                                |) in
                              let x1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_0
                                |) in
                              let y1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_1
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                  "x"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                                  "y"
                                |) in
                              let x2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_0
                                |) in
                              let y2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_1
                                |) in
                              LogicalOp.and (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "ptr_eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x1 |) |) |);
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x2 |) |) |)
                                  ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "ptr_eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| y1 |) |)
                                      |);
                                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y2 |) |) |)
                                    ]
                                  |)))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                                  "x"
                                |) in
                              let x1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_0
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                                  "x"
                                |) in
                              let x2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_0
                                |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "ptr_eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x1 |) |) |);
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x2 |) |) |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                  "x"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                  "y"
                                |) in
                              let x1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_0
                                |) in
                              let y1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_1
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                  "x"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                                  "y"
                                |) in
                              let x2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_0
                                |) in
                              let y2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_1
                                |) in
                              LogicalOp.and (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "ptr_eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x1 |) |) |);
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x2 |) |) |)
                                  ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "ptr_eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| y1 |) |)
                                      |);
                                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y2 |) |) |)
                                    ]
                                  |)))
                              |)));
                          fun γ => ltac:(M.monadic (Value.Bool false))
                        ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("eq", InstanceField.Method (eq F)) ].
      End Impl_core_cmp_PartialEq_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_cmp_Eq_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [].
      End Impl_core_cmp_Eq_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            pub const fn degree_multiple(&self) -> usize {
                match self {
                    SymbolicExpression::Variable(v) => v.degree_multiple(),
                    SymbolicExpression::IsFirstRow => 1,
                    SymbolicExpression::IsLastRow => 1,
                    SymbolicExpression::IsTransition => 0,
                    SymbolicExpression::Constant(_) => 0,
                    SymbolicExpression::Add {
                        degree_multiple, ..
                    } => *degree_multiple,
                    SymbolicExpression::Sub {
                        degree_multiple, ..
                    } => *degree_multiple,
                    SymbolicExpression::Neg {
                        degree_multiple, ..
                    } => *degree_multiple,
                    SymbolicExpression::Mul {
                        degree_multiple, ..
                    } => *degree_multiple,
                }
            }
        *)
        Definition degree_multiple
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "usize",
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                          0
                        |) in
                      let v :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                            []
                            [ F ],
                          "degree_multiple",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| v |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                        |) in
                      Value.Integer IntegerKind.Usize 1));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                        |) in
                      Value.Integer IntegerKind.Usize 1));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                        |) in
                      Value.Integer IntegerKind.Usize 0));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                          0
                        |) in
                      Value.Integer IntegerKind.Usize 0));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                          "degree_multiple"
                        |) in
                      let degree_multiple :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      M.read (| M.deref (| M.read (| degree_multiple |) |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                          "degree_multiple"
                        |) in
                      let degree_multiple :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      M.read (| M.deref (| M.read (| degree_multiple |) |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                          "degree_multiple"
                        |) in
                      let degree_multiple :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      M.read (| M.deref (| M.read (| degree_multiple |) |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                          "degree_multiple"
                        |) in
                      let degree_multiple :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      M.read (| M.deref (| M.read (| degree_multiple |) |) |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_degree_multiple :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "degree_multiple" (degree_multiple F).
        Admitted.
        Global Typeclasses Opaque degree_multiple.
      End Impl_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_default_Default_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn default() -> Self {
                Self::Constant(F::ZERO)
            }
        *)
        Definition default (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [] =>
            ltac:(M.monadic
              (Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [ M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::default::Default"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("default", InstanceField.Method (default F)) ].
      End Impl_core_default_Default_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_convert_From_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn from(value: F) -> Self {
                Self::Constant(value)
            }
        *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| F, value |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [ M.read (| value |) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_p3_field_field_FieldAlgebra_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type F = F; *)
        Definition _F (F : Ty.t) : Ty.t := F.
        
        (*     const ZERO: Self = Self::Constant(F::ZERO); *)
        (* Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
          []
          [ F ] *)
        Definition value_ZERO
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          ltac:(M.monadic
            (M.alloc (|
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ],
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [ M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |) ]
            |))).
        
        (*     const ONE: Self = Self::Constant(F::ONE); *)
        (* Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
          []
          [ F ] *)
        Definition value_ONE (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          ltac:(M.monadic
            (M.alloc (|
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ],
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [ M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", F |) |) ]
            |))).
        
        (*     const TWO: Self = Self::Constant(F::TWO); *)
        (* Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
          []
          [ F ] *)
        Definition value_TWO (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          ltac:(M.monadic
            (M.alloc (|
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ],
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [ M.read (| get_constant (| "p3_field::field::FieldAlgebra::TWO", F |) |) ]
            |))).
        
        (*     const NEG_ONE: Self = Self::Constant(F::NEG_ONE); *)
        (* Ty.apply
          (Ty.path
            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
          []
          [ F ] *)
        Definition value_NEG_ONE
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          ltac:(M.monadic
            (M.alloc (|
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ],
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [ M.read (| get_constant (| "p3_field::field::FieldAlgebra::NEG_ONE", F |) |) ]
            |))).
        
        (*
            fn from_f(f: Self::F) -> Self {
                f.into()
            }
        *)
        Definition from_f (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ f ] =>
            ltac:(M.monadic
              (let f :=
                M.alloc (|
                  Ty.associated_in_trait
                    "p3_field::field::FieldAlgebra"
                    []
                    []
                    (Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ])
                    "F",
                  f
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::convert::Into",
                  F,
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "into",
                  [],
                  []
                |),
                [ M.read (| f |) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn from_bool(b: bool) -> Self {
                Self::Constant(F::from_bool(b))
            }
        *)
        Definition from_bool (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ b ] =>
            ltac:(M.monadic
              (let b := M.alloc (| Ty.path "bool", b |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [ M.read (| b |) ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn from_canonical_u8(n: u8) -> Self {
                Self::Constant(F::from_canonical_u8(n))
            }
        *)
        Definition from_canonical_u8
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ n ] =>
            ltac:(M.monadic
              (let n := M.alloc (| Ty.path "u8", n |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_canonical_u8",
                      [],
                      []
                    |),
                    [ M.read (| n |) ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn from_canonical_u16(n: u16) -> Self {
                Self::Constant(F::from_canonical_u16(n))
            }
        *)
        Definition from_canonical_u16
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ n ] =>
            ltac:(M.monadic
              (let n := M.alloc (| Ty.path "u16", n |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_canonical_u16",
                      [],
                      []
                    |),
                    [ M.read (| n |) ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn from_canonical_u32(n: u32) -> Self {
                Self::Constant(F::from_canonical_u32(n))
            }
        *)
        Definition from_canonical_u32
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ n ] =>
            ltac:(M.monadic
              (let n := M.alloc (| Ty.path "u32", n |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_canonical_u32",
                      [],
                      []
                    |),
                    [ M.read (| n |) ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn from_canonical_u64(n: u64) -> Self {
                Self::Constant(F::from_canonical_u64(n))
            }
        *)
        Definition from_canonical_u64
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ n ] =>
            ltac:(M.monadic
              (let n := M.alloc (| Ty.path "u64", n |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_canonical_u64",
                      [],
                      []
                    |),
                    [ M.read (| n |) ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn from_canonical_usize(n: usize) -> Self {
                Self::Constant(F::from_canonical_usize(n))
            }
        *)
        Definition from_canonical_usize
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ n ] =>
            ltac:(M.monadic
              (let n := M.alloc (| Ty.path "usize", n |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_canonical_usize",
                      [],
                      []
                    |),
                    [ M.read (| n |) ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn from_wrapped_u32(n: u32) -> Self {
                Self::Constant(F::from_wrapped_u32(n))
            }
        *)
        Definition from_wrapped_u32
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ n ] =>
            ltac:(M.monadic
              (let n := M.alloc (| Ty.path "u32", n |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_wrapped_u32",
                      [],
                      []
                    |),
                    [ M.read (| n |) ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn from_wrapped_u64(n: u64) -> Self {
                Self::Constant(F::from_wrapped_u64(n))
            }
        *)
        Definition from_wrapped_u64
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ n ] =>
            ltac:(M.monadic
              (let n := M.alloc (| Ty.path "u64", n |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant"
                []
                [ F ]
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_wrapped_u64",
                      [],
                      []
                    |),
                    [ M.read (| n |) ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "p3_field::field::FieldAlgebra"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *)
            [
              ("F", InstanceField.Ty (_F F));
              ("value_ZERO", InstanceField.Method (value_ZERO F));
              ("value_ONE", InstanceField.Method (value_ONE F));
              ("value_TWO", InstanceField.Method (value_TWO F));
              ("value_NEG_ONE", InstanceField.Method (value_NEG_ONE F));
              ("from_f", InstanceField.Method (from_f F));
              ("from_bool", InstanceField.Method (from_bool F));
              ("from_canonical_u8", InstanceField.Method (from_canonical_u8 F));
              ("from_canonical_u16", InstanceField.Method (from_canonical_u16 F));
              ("from_canonical_u32", InstanceField.Method (from_canonical_u32 F));
              ("from_canonical_u64", InstanceField.Method (from_canonical_u64 F));
              ("from_canonical_usize", InstanceField.Method (from_canonical_usize F));
              ("from_wrapped_u32", InstanceField.Method (from_wrapped_u32 F));
              ("from_wrapped_u64", InstanceField.Method (from_wrapped_u64 F))
            ].
      End Impl_p3_field_field_FieldAlgebra_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn add(self, rhs: Self) -> Self {
                let degree_multiple = self.degree_multiple().max(rhs.degree_multiple());
                Self::Add {
                    x: Arc::new(self),
                    y: Arc::new(rhs),
                    degree_multiple,
                }
            }
        *)
        Definition add (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  rhs
                |) in
              M.read (|
                let~ degree_multiple : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::cmp::Ord",
                      Ty.path "usize",
                      [],
                      [],
                      "max",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          "degree_multiple",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          "degree_multiple",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add"
                    []
                    [ F ]
                    [
                      ("x",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| self |) ]
                        |));
                      ("y",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| rhs |) ]
                        |));
                      ("degree_multiple", M.read (| degree_multiple |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Add"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("add", InstanceField.Method (add F)) ].
      End Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Add_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn add(self, rhs: F) -> Self {
                self + Self::from(rhs)
            }
        *)
        Definition add (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              let rhs := M.alloc (| F, rhs |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "add",
                  [],
                  []
                |),
                [
                  M.read (| self |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Add"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("add", InstanceField.Method (add F)) ].
      End Impl_core_ops_arith_Add_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_AddAssign_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn add_assign(&mut self, rhs: Self) {
                *self = self.clone() + rhs;
            }
        *)
        Definition add_assign
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  rhs
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.deref (| M.read (| self |) |),
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "add",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |);
                        M.read (| rhs |)
                      ]
                    |)
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::AddAssign"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("add_assign", InstanceField.Method (add_assign F)) ].
      End Impl_core_ops_arith_AddAssign_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_AddAssign_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn add_assign(&mut self, rhs: F) {
                *self += Self::from(rhs);
            }
        *)
        Definition add_assign
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let rhs := M.alloc (| F, rhs |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::ops::arith::AddAssign",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ],
                      "add_assign",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          [],
                          [ F ],
                          "from",
                          [],
                          []
                        |),
                        [ M.read (| rhs |) ]
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::AddAssign"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("add_assign", InstanceField.Method (add_assign F)) ].
      End Impl_core_ops_arith_AddAssign_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_iter_traits_accum_Sum_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sum<I: Iterator<Item = Self>>(iter: I) -> Self {
                iter.reduce(|x, y| x + y).unwrap_or(Self::ZERO)
            }
        *)
        Definition sum (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ _ as I ], [ iter ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| I, iter |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  "unwrap_or",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      I,
                      [],
                      [],
                      "reduce",
                      [],
                      [
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ]
                    |),
                    [
                      M.read (| iter |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let x :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ],
                                            γ
                                          |) in
                                        M.match_operator (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ],
                                            α1
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let y :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                      []
                                                      [ F ],
                                                    γ
                                                  |) in
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ],
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Add",
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                      []
                                                      [ F ],
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                        []
                                                        [ F ]
                                                    ],
                                                    "add",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| x |); M.read (| y |) ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |);
                  M.read (|
                    get_constant (|
                      "p3_field::field::FieldAlgebra::ZERO",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::accum::Sum"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("sum", InstanceField.Method (sum F)) ].
      End Impl_core_iter_traits_accum_Sum_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_iter_traits_accum_Sum_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sum<I: Iterator<Item = F>>(iter: I) -> Self {
                iter.map(|x| Self::from(x)).sum()
            }
        *)
        Definition sum (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ _ as I ], [ iter ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| I, iter |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      I;
                      Ty.function
                        [ F ]
                        (Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ])
                    ],
                  [],
                  [],
                  "sum",
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        I;
                        Ty.function
                          [ F ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      I,
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ];
                        Ty.function
                          [ F ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ]
                    |),
                    [
                      M.read (| iter |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ],
                                  M.alloc (| F, α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let x := M.copy (| F, γ |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ],
                                          M.get_trait_method (|
                                            "core::convert::From",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ],
                                            [],
                                            [ F ],
                                            "from",
                                            [],
                                            []
                                          |),
                                          [ M.read (| x |) ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::accum::Sum"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("sum", InstanceField.Method (sum F)) ].
      End Impl_core_iter_traits_accum_Sum_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sub(self, rhs: Self) -> Self {
                let degree_multiple = self.degree_multiple().max(rhs.degree_multiple());
                Self::Sub {
                    x: Arc::new(self),
                    y: Arc::new(rhs),
                    degree_multiple,
                }
            }
        *)
        Definition sub (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  rhs
                |) in
              M.read (|
                let~ degree_multiple : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::cmp::Ord",
                      Ty.path "usize",
                      [],
                      [],
                      "max",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          "degree_multiple",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          "degree_multiple",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub"
                    []
                    [ F ]
                    [
                      ("x",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| self |) ]
                        |));
                      ("y",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| rhs |) ]
                        |));
                      ("degree_multiple", M.read (| degree_multiple |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Sub"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("sub", InstanceField.Method (sub F)) ].
      End Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sub(self, rhs: F) -> Self {
                self - Self::from(rhs)
            }
        *)
        Definition sub (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              let rhs := M.alloc (| F, rhs |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Sub",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "sub",
                  [],
                  []
                |),
                [
                  M.read (| self |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Sub"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("sub", InstanceField.Method (sub F)) ].
      End Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_SubAssign_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sub_assign(&mut self, rhs: Self) {
                *self = self.clone() - rhs;
            }
        *)
        Definition sub_assign
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  rhs
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.deref (| M.read (| self |) |),
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "sub",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |);
                        M.read (| rhs |)
                      ]
                    |)
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::SubAssign"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("sub_assign", InstanceField.Method (sub_assign F)) ].
      End Impl_core_ops_arith_SubAssign_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_SubAssign_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sub_assign(&mut self, rhs: F) {
                *self -= Self::from(rhs);
            }
        *)
        Definition sub_assign
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let rhs := M.alloc (| F, rhs |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::ops::arith::SubAssign",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ],
                      "sub_assign",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          [],
                          [ F ],
                          "from",
                          [],
                          []
                        |),
                        [ M.read (| rhs |) ]
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::SubAssign"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("sub_assign", InstanceField.Method (sub_assign F)) ].
      End Impl_core_ops_arith_SubAssign_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Neg_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn neg(self) -> Self {
                let degree_multiple = self.degree_multiple();
                Self::Neg {
                    x: Arc::new(self),
                    degree_multiple,
                }
            }
        *)
        Definition neg (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              M.read (|
                let~ degree_multiple : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      "degree_multiple",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, self |) ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg"
                    []
                    [ F ]
                    [
                      ("x",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| self |) ]
                        |));
                      ("degree_multiple", M.read (| degree_multiple |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Neg"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("neg", InstanceField.Method (neg F)) ].
      End Impl_core_ops_arith_Neg_where_p3_field_field_Field_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn mul(self, rhs: Self) -> Self {
                #[allow(clippy::suspicious_arithmetic_impl)]
                let degree_multiple = self.degree_multiple() + rhs.degree_multiple();
                Self::Mul {
                    x: Arc::new(self),
                    y: Arc::new(rhs),
                    degree_multiple,
                }
            }
        *)
        Definition mul (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  rhs
                |) in
              M.read (|
                let~ degree_multiple : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          "degree_multiple",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          "degree_multiple",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul"
                    []
                    [ F ]
                    [
                      ("x",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| self |) ]
                        |));
                      ("y",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| rhs |) ]
                        |));
                      ("degree_multiple", M.read (| degree_multiple |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Mul"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
      End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn mul(self, rhs: F) -> Self {
                self * Self::from(rhs)
            }
        *)
        Definition mul (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              let rhs := M.alloc (| F, rhs |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Mul",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "mul",
                  [],
                  []
                |),
                [
                  M.read (| self |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Mul"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
      End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_MulAssign_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn mul_assign(&mut self, rhs: Self) {
                *self = self.clone() * rhs;
            }
        *)
        Definition mul_assign
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  rhs
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.deref (| M.read (| self |) |),
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |);
                        M.read (| rhs |)
                      ]
                    |)
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::MulAssign"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("mul_assign", InstanceField.Method (mul_assign F)) ].
      End Impl_core_ops_arith_MulAssign_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_MulAssign_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn mul_assign(&mut self, rhs: F) {
                *self *= Self::from(rhs);
            }
        *)
        Definition mul_assign
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let rhs := M.alloc (| F, rhs |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::ops::arith::MulAssign",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ],
                      "mul_assign",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          [],
                          [ F ],
                          "from",
                          [],
                          []
                        |),
                        [ M.read (| rhs |) ]
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::MulAssign"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("mul_assign", InstanceField.Method (mul_assign F)) ].
      End Impl_core_ops_arith_MulAssign_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_iter_traits_accum_Product_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn product<I: Iterator<Item = Self>>(iter: I) -> Self {
                iter.reduce(|x, y| x * y).unwrap_or(Self::ONE)
            }
        *)
        Definition product (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ _ as I ], [ iter ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| I, iter |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  "unwrap_or",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      I,
                      [],
                      [],
                      "reduce",
                      [],
                      [
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ]
                    |),
                    [
                      M.read (| iter |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let x :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ],
                                            γ
                                          |) in
                                        M.match_operator (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ],
                                            α1
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let y :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                      []
                                                      [ F ],
                                                    γ
                                                  |) in
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ],
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Mul",
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                      []
                                                      [ F ],
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                        []
                                                        [ F ]
                                                    ],
                                                    "mul",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| x |); M.read (| y |) ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |);
                  M.read (|
                    get_constant (|
                      "p3_field::field::FieldAlgebra::ONE",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::accum::Product"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("product", InstanceField.Method (product F)) ].
      End Impl_core_iter_traits_accum_Product_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_iter_traits_accum_Product_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn product<I: Iterator<Item = F>>(iter: I) -> Self {
                iter.map(|x| Self::from(x)).product()
            }
        *)
        Definition product (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ _ as I ], [ iter ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| I, iter |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      I;
                      Ty.function
                        [ F ]
                        (Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ])
                    ],
                  [],
                  [],
                  "product",
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        I;
                        Ty.function
                          [ F ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      I,
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                          []
                          [ F ];
                        Ty.function
                          [ F ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ]
                    |),
                    [
                      M.read (| iter |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ],
                                  M.alloc (| F, α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let x := M.copy (| F, γ |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ],
                                          M.get_trait_method (|
                                            "core::convert::From",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ],
                                            [],
                                            [ F ],
                                            "from",
                                            [],
                                            []
                                          |),
                                          [ M.read (| x |) ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::accum::Product"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("product", InstanceField.Method (product F)) ].
      End Impl_core_iter_traits_accum_Product_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      (* Trait *)
      Module SymbolicEvaluator.
        Definition eval_expr
            (F E Self : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self; symbolic_expr ] =>
            ltac:(M.monadic
              (let self := M.alloc (| Ty.apply (Ty.path "&") [] [ Self ], self |) in
              let symbolic_expr :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ]
                    ],
                  symbolic_expr
                |) in
              M.match_operator (|
                E,
                symbolic_expr,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable",
                          0
                        |) in
                      let var :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        E,
                        M.get_trait_method (|
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                          Self,
                          [],
                          [ F; E ],
                          "eval_var",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                          M.read (| M.deref (| M.read (| var |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Constant",
                          0
                        |) in
                      let c := M.alloc (| Ty.apply (Ty.path "&") [] [ F ], γ1_0 |) in
                      M.call_closure (|
                        E,
                        M.get_trait_method (|
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                          Self,
                          [],
                          [ F; E ],
                          "eval_const",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                          M.read (| M.deref (| M.read (| c |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Add",
                          "y"
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let y :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      M.call_closure (|
                        E,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          E,
                          [],
                          [ E ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            E,
                            M.get_trait_method (|
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                              Self,
                              [],
                              [ F; E ],
                              "eval_expr",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            E,
                            M.get_trait_method (|
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                              Self,
                              [],
                              [ F; E ],
                              "eval_expr",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Sub",
                          "y"
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let y :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      M.call_closure (|
                        E,
                        M.get_trait_method (|
                          "core::ops::arith::Sub",
                          E,
                          [],
                          [ E ],
                          "sub",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            E,
                            M.get_trait_method (|
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                              Self,
                              [],
                              [ F; E ],
                              "eval_expr",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            E,
                            M.get_trait_method (|
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                              Self,
                              [],
                              [ F; E ],
                              "eval_expr",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Neg",
                          "x"
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        E,
                        M.get_trait_method (| "core::ops::arith::Neg", E, [], [], "neg", [], [] |),
                        [
                          M.call_closure (|
                            E,
                            M.get_trait_method (|
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                              Self,
                              [],
                              [ F; E ],
                              "eval_expr",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                          "x"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Mul",
                          "y"
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      let y :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      M.call_closure (|
                        E,
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          E,
                          [],
                          [ E ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            E,
                            M.get_trait_method (|
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                              Self,
                              [],
                              [ F; E ],
                              "eval_expr",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            E,
                            M.get_trait_method (|
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                              Self,
                              [],
                              [ F; E ],
                              "eval_expr",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsFirstRow"
                        |) in
                      M.call_closure (|
                        E,
                        M.get_trait_method (|
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                          Self,
                          [],
                          [ F; E ],
                          "eval_is_first_row",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsLastRow"
                        |) in
                      M.call_closure (|
                        E,
                        M.get_trait_method (|
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                          Self,
                          [],
                          [ F; E ],
                          "eval_is_last_row",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::IsTransition"
                        |) in
                      M.call_closure (|
                        E,
                        M.get_trait_method (|
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                          Self,
                          [],
                          [ F; E ],
                          "eval_is_transition",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom ProvidedMethod_eval_expr :
          forall (F E : Ty.t),
          M.IsProvidedMethod
            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator"
            "eval_expr"
            (eval_expr F E).
        Definition eval_nodes
            (F E Self : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self; nodes ] =>
            ltac:(M.monadic
              (let self := M.alloc (| Ty.apply (Ty.path "&") [] [ Self ], self |) in
              let nodes :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                            []
                            [ F ]
                        ]
                    ],
                  nodes
                |) in
              M.read (|
                let~ exprs :
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ],
                      "with_capacity",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                []
                                [ F ]
                            ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| nodes |) |) |) ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                  []
                                  [ F ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                    []
                                    [ F ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.read (| nodes |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                          []
                                          [ F ]
                                      ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                      []
                                                      [ F ]
                                                  ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                      []
                                                      [ F ]
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let node :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode")
                                                          []
                                                          [ F ]
                                                      ],
                                                    γ0_0
                                                  |) in
                                                M.read (|
                                                  let~ expr : E :=
                                                    M.match_operator (|
                                                      E,
                                                      M.deref (| M.read (| node |) |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Variable",
                                                                0
                                                              |) in
                                                            let var :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                                                  []
                                                                  [ F ],
                                                                γ0_0
                                                              |) in
                                                            M.call_closure (|
                                                              E,
                                                              M.get_trait_method (|
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                                                                Self,
                                                                [],
                                                                [ F; E ],
                                                                "eval_var",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| self |) |)
                                                                |);
                                                                M.read (| var |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Constant",
                                                                0
                                                              |) in
                                                            let c := M.copy (| F, γ0_0 |) in
                                                            M.call_closure (|
                                                              E,
                                                              M.get_trait_method (|
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                                                                Self,
                                                                [],
                                                                [ F; E ],
                                                                "eval_const",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| self |) |)
                                                                |);
                                                                M.read (| c |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                                                "left_idx"
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Add",
                                                                "right_idx"
                                                              |) in
                                                            let left_idx :=
                                                              M.copy (| Ty.path "usize", γ0_0 |) in
                                                            let right_idx :=
                                                              M.copy (| Ty.path "usize", γ0_1 |) in
                                                            M.call_closure (|
                                                              E,
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Add",
                                                                E,
                                                                [],
                                                                [ E ],
                                                                "add",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  E,
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    E,
                                                                    [],
                                                                    [],
                                                                    "clone",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ E ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::Index",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                E;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [ Ty.path "usize" ],
                                                                            "index",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              exprs
                                                                            |);
                                                                            M.read (| left_idx |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  E,
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    E,
                                                                    [],
                                                                    [],
                                                                    "clone",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ E ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::Index",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                E;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [ Ty.path "usize" ],
                                                                            "index",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              exprs
                                                                            |);
                                                                            M.read (| right_idx |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                                                "left_idx"
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Sub",
                                                                "right_idx"
                                                              |) in
                                                            let left_idx :=
                                                              M.copy (| Ty.path "usize", γ0_0 |) in
                                                            let right_idx :=
                                                              M.copy (| Ty.path "usize", γ0_1 |) in
                                                            M.call_closure (|
                                                              E,
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Sub",
                                                                E,
                                                                [],
                                                                [ E ],
                                                                "sub",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  E,
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    E,
                                                                    [],
                                                                    [],
                                                                    "clone",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ E ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::Index",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                E;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [ Ty.path "usize" ],
                                                                            "index",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              exprs
                                                                            |);
                                                                            M.read (| left_idx |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  E,
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    E,
                                                                    [],
                                                                    [],
                                                                    "clone",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ E ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::Index",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                E;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [ Ty.path "usize" ],
                                                                            "index",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              exprs
                                                                            |);
                                                                            M.read (| right_idx |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Neg",
                                                                "idx"
                                                              |) in
                                                            let idx :=
                                                              M.copy (| Ty.path "usize", γ0_0 |) in
                                                            M.call_closure (|
                                                              E,
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Neg",
                                                                E,
                                                                [],
                                                                [],
                                                                "neg",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  E,
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    E,
                                                                    [],
                                                                    [],
                                                                    "clone",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ E ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::Index",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                E;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [ Ty.path "usize" ],
                                                                            "index",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              exprs
                                                                            |);
                                                                            M.read (| idx |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                                                "left_idx"
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::Mul",
                                                                "right_idx"
                                                              |) in
                                                            let left_idx :=
                                                              M.copy (| Ty.path "usize", γ0_0 |) in
                                                            let right_idx :=
                                                              M.copy (| Ty.path "usize", γ0_1 |) in
                                                            M.call_closure (|
                                                              E,
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                E,
                                                                [],
                                                                [ E ],
                                                                "mul",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  E,
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    E,
                                                                    [],
                                                                    [],
                                                                    "clone",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ E ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::Index",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                E;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [ Ty.path "usize" ],
                                                                            "index",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              exprs
                                                                            |);
                                                                            M.read (| left_idx |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  E,
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    E,
                                                                    [],
                                                                    [],
                                                                    "clone",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ E ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::Index",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                E;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [ Ty.path "usize" ],
                                                                            "index",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              exprs
                                                                            |);
                                                                            M.read (| right_idx |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsFirstRow"
                                                              |) in
                                                            M.call_closure (|
                                                              E,
                                                              M.get_trait_method (|
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                                                                Self,
                                                                [],
                                                                [ F; E ],
                                                                "eval_is_first_row",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| self |) |)
                                                                |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsLastRow"
                                                              |) in
                                                            M.call_closure (|
                                                              E,
                                                              M.get_trait_method (|
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                                                                Self,
                                                                [],
                                                                [ F; E ],
                                                                "eval_is_last_row",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| self |) |)
                                                                |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionNode::IsTransition"
                                                              |) in
                                                            M.call_closure (|
                                                              E,
                                                              M.get_trait_method (|
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                                                                Self,
                                                                [],
                                                                [ F; E ],
                                                                "eval_is_transition",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| self |) |)
                                                                |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ E; Ty.path "alloc::alloc::Global" ],
                                                        "push",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, exprs |);
                                                        M.read (| expr |)
                                                      ]
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                exprs
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom ProvidedMethod_eval_nodes :
          forall (F E : Ty.t),
          M.IsProvidedMethod
            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator"
            "eval_nodes"
            (eval_nodes F E).
      End SymbolicEvaluator.
    End symbolic_expression.
  End symbolic.
End air_builders.
