(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module air_builders.
  Module symbolic.
    Module symbolic_variable.
      (*
      Enum Entry
      {
        const_params := [];
        ty_params := [];
        variants :=
          [
            {
              name := "Preprocessed";
              item := StructRecord [ ("offset", Ty.path "usize") ];
            };
            {
              name := "Main";
              item := StructRecord [ ("part_index", Ty.path "usize"); ("offset", Ty.path "usize") ];
            };
            {
              name := "Permutation";
              item := StructRecord [ ("offset", Ty.path "usize") ];
            };
            {
              name := "Public";
              item := StructTuple [];
            };
            {
              name := "Challenge";
              item := StructTuple [];
            };
            {
              name := "Exposed";
              item := StructTuple [];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_Entry_Preprocessed :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed"
          0.
      Axiom IsDiscriminant_Entry_Main :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main"
          1.
      Axiom IsDiscriminant_Entry_Permutation :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation"
          2.
      Axiom IsDiscriminant_Entry_Public :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Public"
          3.
      Axiom IsDiscriminant_Entry_Challenge :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Challenge"
          4.
      Axiom IsDiscriminant_Entry_Exposed :
        M.IsDiscriminant
          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Exposed"
          5.
      
      Module Impl_core_marker_Copy_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::Copy"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_Copy_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
      
      Module Impl_core_clone_Clone_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
      
      Module Impl_core_fmt_Debug_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed",
                          "offset"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Preprocessed" |) |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "offset" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                          "part_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                          "offset"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field2_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Main" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "part_index" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "offset" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation",
                          "offset"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Permutation" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "offset" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Public"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Public" |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Challenge"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Challenge" |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Exposed"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Exposed" |) |) |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
      
      Module Impl_core_cmp_PartialEq_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
        
        (* PartialEq *)
        Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                    ],
                  other
                |) in
              M.read (|
                let~ __self_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |) in
                let~ __arg1_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |) in
                M.alloc (|
                  Ty.path "bool",
                  LogicalOp.and (|
                    M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                    |),
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.path "bool",
                        M.alloc (|
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                                ]
                            ],
                          Value.Tuple [ M.read (| self |); M.read (| other |) ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed",
                                  "offset"
                                |) in
                              let __self_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed",
                                  "offset"
                                |) in
                              let __arg1_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                                  "part_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                                  "offset"
                                |) in
                              let __self_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __self_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                                  "part_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                                  "offset"
                                |) in
                              let __arg1_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let __arg1_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_1 |) in
                              LogicalOp.and (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_1 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_1 |)
                                    ]
                                  |)))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation",
                                  "offset"
                                |) in
                              let __self_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation",
                                  "offset"
                                |) in
                              let __arg1_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)));
                          fun γ => ltac:(M.monadic (Value.Bool true))
                        ]
                      |)))
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [ Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry" ]
            Self
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
      
      Module Impl_core_cmp_Eq_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
      
      Module Impl_core_hash_Hash_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
        
        (* Hash *)
        Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __H ], [ self; state ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                    ],
                  self
                |) in
              let state := M.alloc (| Ty.apply (Ty.path "&mut") [] [ __H ], state |) in
              M.read (|
                let~ __self_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "isize",
                      [],
                      [],
                      "hash",
                      [],
                      [ __H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed",
                              "offset"
                            |) in
                          let __self_0 :=
                            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.path "usize",
                              [],
                              [],
                              "hash",
                              [],
                              [ __H ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                              "part_index"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                              "offset"
                            |) in
                          let __self_0 :=
                            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                          let __self_1 :=
                            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::hash::Hash",
                                  Ty.path "usize",
                                  [],
                                  [],
                                  "hash",
                                  [],
                                  [ __H ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| __self_0 |) |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| state |) |)
                                  |)
                                ]
                              |) in
                            M.alloc (|
                              Ty.tuple [],
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::hash::Hash",
                                  Ty.path "usize",
                                  [],
                                  [],
                                  "hash",
                                  [],
                                  [ __H ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| __self_1 |) |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| state |) |)
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation",
                              "offset"
                            |) in
                          let __self_0 :=
                            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.path "usize",
                              [],
                              [],
                              "hash",
                              [],
                              [ __H ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                            ]
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::hash::Hash"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("hash", InstanceField.Method hash) ].
      End Impl_core_hash_Hash_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
      
      Module underscore.
        Module Impl_serde_ser_Serialize_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
          Definition Self : Ty.t :=
            Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
          
          (* Serialize *)
          Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.deref (| M.read (| self |) |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed",
                                "offset"
                              |) in
                            let offset :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "Entry" |);
                                            Value.Integer IntegerKind.U32 0;
                                            mk_str (| "Preprocessed" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                Value.Integer IntegerKind.Usize 0;
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "offset" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| offset |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                                "part_index"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                                "offset"
                              |) in
                            let part_index :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            let offset :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "Entry" |);
                                            Value.Integer IntegerKind.U32 1;
                                            mk_str (| "Main" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    Value.Integer IntegerKind.Usize 0;
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "part_index" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| part_index |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "offset" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| offset |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation",
                                "offset"
                              |) in
                            let offset :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "Entry" |);
                                            Value.Integer IntegerKind.U32 2;
                                            mk_str (| "Permutation" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                Value.Integer IntegerKind.Usize 0;
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "offset" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| offset |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Public"
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_unit_variant",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "Entry" |);
                                Value.Integer IntegerKind.U32 3;
                                mk_str (| "Public" |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Challenge"
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_unit_variant",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "Entry" |);
                                Value.Integer IntegerKind.U32 4;
                                mk_str (| "Challenge" |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Exposed"
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_unit_variant",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "Entry" |);
                                Value.Integer IntegerKind.U32 5;
                                mk_str (| "Exposed" |)
                              ]
                            |)))
                      ]
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
        End Impl_serde_ser_Serialize_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Module Impl_serde_de_Deserialize_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
          Definition Self : Ty.t :=
            Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
          
          (* Deserialize *)
          Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry";
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_enum",
                    [],
                    [
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::_'1::deserialize::__Visitor"
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "Entry" |);
                    M.read (|
                      get_constant (|
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::_'1::deserialize::VARIANTS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::_'1::deserialize::__Visitor"
                      []
                      []
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
        End Impl_serde_de_Deserialize_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Module Impl_serde_ser_Serialize_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
              []
              [ F ].
          
          (* Serialize *)
          Definition serialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ __serde_state :
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct" :=
                        M.match_operator (|
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    [],
                                    "serialize_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    mk_str (| "SymbolicVariable" |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.cast (Ty.path "usize") (Value.Bool false);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "entry" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                                            "entry"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [ Ty.path "usize" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "index" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                                            "index"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "_phantom" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                                            "_phantom"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            [],
                            [],
                            "end",
                            [],
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
        End Impl_serde_ser_Serialize_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Module Impl_serde_de_Deserialize_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
              []
              [ F ].
          
          (* Deserialize *)
          Definition deserialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_struct",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::_'3::deserialize::__Visitor")
                        []
                        [ F ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "SymbolicVariable" |);
                    M.read (|
                      get_constant (|
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::_'3::deserialize::FIELDS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::_'3::deserialize::__Visitor"
                      []
                      [ F ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                                []
                                [ F ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
        End Impl_serde_de_Deserialize_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      End underscore.
      
      
      Module Impl_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry".
        
        (*
            pub fn offset(&self) -> Option<usize> {
                match self {
                    Entry::Preprocessed { offset } => Some( *offset),
                    Entry::Main { offset, .. } => Some( *offset),
                    Entry::Permutation { offset } => Some( *offset),
                    Entry::Public => None,
                    Entry::Challenge => None,
                    Entry::Exposed => None,
                }
            }
        *)
        Definition offset (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed",
                          "offset"
                        |) in
                      let offset :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [ Ty.path "usize" ]
                        [ M.read (| M.deref (| M.read (| offset |) |) |) ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                          "offset"
                        |) in
                      let offset :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [ Ty.path "usize" ]
                        [ M.read (| M.deref (| M.read (| offset |) |) |) ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation",
                          "offset"
                        |) in
                      let offset :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [ Ty.path "usize" ]
                        [ M.read (| M.deref (| M.read (| offset |) |) |) ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Public"
                        |) in
                      Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] []));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Challenge"
                        |) in
                      Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] []));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Exposed"
                        |) in
                      Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] []))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_offset : M.IsAssociatedFunction.C Self "offset" offset.
        Admitted.
        Global Typeclasses Opaque offset.
        
        (*
            pub fn rotate(self, offset: usize) -> Self {
                match self {
                    Entry::Preprocessed { offset: old_offset } => Entry::Preprocessed {
                        offset: old_offset + offset,
                    },
                    Entry::Main {
                        part_index,
                        offset: old_offset,
                    } => Entry::Main {
                        part_index,
                        offset: old_offset + offset,
                    },
                    Entry::Permutation { offset: old_offset } => Entry::Permutation {
                        offset: old_offset + offset,
                    },
                    Entry::Public | Entry::Challenge | Entry::Exposed => self,
                }
            }
        *)
        Definition rotate (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; offset ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                  self
                |) in
              let offset := M.alloc (| Ty.path "usize", offset |) in
              M.match_operator (|
                Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed",
                          "offset"
                        |) in
                      let old_offset := M.copy (| Ty.path "usize", γ0_0 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed"
                        []
                        []
                        [
                          ("offset",
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [ M.read (| old_offset |); M.read (| offset |) ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                          "part_index"
                        |) in
                      let γ0_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main",
                          "offset"
                        |) in
                      let part_index := M.copy (| Ty.path "usize", γ0_0 |) in
                      let old_offset := M.copy (| Ty.path "usize", γ0_1 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main"
                        []
                        []
                        [
                          ("part_index", M.read (| part_index |));
                          ("offset",
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [ M.read (| old_offset |); M.read (| offset |) ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation",
                          "offset"
                        |) in
                      let old_offset := M.copy (| Ty.path "usize", γ0_0 |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation"
                        []
                        []
                        [
                          ("offset",
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [ M.read (| old_offset |); M.read (| offset |) ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (Ty.tuple []) (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Public"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Challenge"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Exposed"
                                |) in
                              Value.Tuple []))
                        ],
                        fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [] => ltac:(M.monadic (M.read (| self |)))
                            | _ => M.impossible "wrong number of arguments"
                            end)
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_rotate : M.IsAssociatedFunction.C Self "rotate" rotate.
        Admitted.
        Global Typeclasses Opaque rotate.
        
        (*
            pub fn next(self) -> Self {
                self.rotate(1)
            }
        *)
        Definition next (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                  self
                |) in
              M.call_closure (|
                Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                M.get_associated_function (|
                  Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                  "rotate",
                  [],
                  []
                |),
                [ M.read (| self |); Value.Integer IntegerKind.Usize 1 ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_next : M.IsAssociatedFunction.C Self "next" next.
        Admitted.
        Global Typeclasses Opaque next.
      End Impl_openvm_stark_backend_air_builders_symbolic_symbolic_variable_Entry.
      
      (* StructRecord
        {
          name := "SymbolicVariable";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("entry",
                Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry");
              ("index", Ty.path "usize");
              ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
            ];
        } *)
      
      Module Impl_core_marker_Copy_where_core_marker_Copy_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::marker::Copy"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [].
      End Impl_core_marker_Copy_where_core_marker_Copy_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (* Clone *)
        Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable"
                []
                [ F ]
                [
                  ("entry",
                    M.call_closure (|
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                                "entry"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("index",
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                                "index"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("_phantom",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                                "_phantom"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SymbolicVariable" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "entry" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                              "entry"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "index" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                              "index"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                                  "_phantom"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_hash_Hash_where_core_hash_Hash_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (* Hash *)
        Definition hash (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ __H ], [ self; state ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let state := M.alloc (| Ty.apply (Ty.path "&mut") [] [ __H ], state |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                      [],
                      [],
                      "hash",
                      [],
                      [ __H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                              "entry"
                            |)
                          |)
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "usize",
                      [],
                      [],
                      "hash",
                      [],
                      [ __H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                              "index"
                            |)
                          |)
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                      [],
                      [],
                      "hash",
                      [],
                      [ __H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                              "_phantom"
                            |)
                          |)
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::hash::Hash"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("hash", InstanceField.Method (hash F)) ].
      End Impl_core_hash_Hash_where_core_hash_Hash_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.tuple [],
                        Value.DeclaredButUndefined,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.tuple [],
                                Value.DeclaredButUndefined,
                                [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                              |)))
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq F))
            ].
      End Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (* PartialEq *)
        Definition eq (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ]
                    ],
                  other
                |) in
              LogicalOp.and (|
                LogicalOp.and (|
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                      [],
                      [
                        Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry"
                      ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                          "entry"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                          "entry"
                        |)
                      |)
                    ]
                  |),
                  ltac:(M.monadic
                    (M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                            "index"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| other |) |),
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                            "index"
                          |)
                        |)
                      ]
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                      [],
                      [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                          "_phantom"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                          "_phantom"
                        |)
                      |)
                    ]
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("eq", InstanceField.Method (eq F)) ].
      End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      
      
      Module Impl_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*
            pub const fn new(entry: Entry, index: usize) -> Self {
                Self {
                    entry,
                    index,
                    _phantom: PhantomData,
                }
            }
        *)
        Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ entry; index ] =>
            ltac:(M.monadic
              (let entry :=
                M.alloc (|
                  Ty.path "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                  entry
                |) in
              let index := M.alloc (| Ty.path "usize", index |) in
              Value.mkStructRecord
                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable"
                []
                [ F ]
                [
                  ("entry", M.read (| entry |));
                  ("index", M.read (| index |));
                  ("_phantom", Value.StructTuple "core::marker::PhantomData" [] [ F ] [])
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "new" (new F).
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub const fn degree_multiple(&self) -> usize {
                match self.entry {
                    Entry::Preprocessed { .. } | Entry::Main { .. } | Entry::Permutation { .. } => 1,
                    Entry::Public | Entry::Challenge | Entry::Exposed => 0,
                }
            }
        *)
        Definition degree_multiple
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "usize",
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                  "entry"
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (Ty.tuple []) (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Preprocessed"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Main"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Permutation"
                                |) in
                              Value.Tuple []))
                        ],
                        fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [] => ltac:(M.monadic (Value.Integer IntegerKind.Usize 1))
                            | _ => M.impossible "wrong number of arguments"
                            end)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (Ty.tuple []) (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Public"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Challenge"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry::Exposed"
                                |) in
                              Value.Tuple []))
                        ],
                        fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [] => ltac:(M.monadic (Value.Integer IntegerKind.Usize 0))
                            | _ => M.impossible "wrong number of arguments"
                            end)
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_degree_multiple :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "degree_multiple" (degree_multiple F).
        Admitted.
        Global Typeclasses Opaque degree_multiple.
        
        (*
            pub fn rotate(self, offset: usize) -> Self {
                Self {
                    entry: self.entry.rotate(offset),
                    index: self.index,
                    _phantom: PhantomData,
                }
            }
        *)
        Definition rotate (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; offset ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let offset := M.alloc (| Ty.path "usize", offset |) in
              Value.mkStructRecord
                "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable"
                []
                [ F ]
                [
                  ("entry",
                    M.call_closure (|
                      Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                      M.get_associated_function (|
                        Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_variable::Entry",
                        "rotate",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                            "entry"
                          |)
                        |);
                        M.read (| offset |)
                      ]
                    |));
                  ("index",
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable",
                        "index"
                      |)
                    |));
                  ("_phantom", Value.StructTuple "core::marker::PhantomData" [] [ F ] [])
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_rotate :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "rotate" (rotate F).
        Admitted.
        Global Typeclasses Opaque rotate.
        
        (*
            pub fn next(self) -> Self {
                self.rotate(1)
            }
        *)
        Definition next (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                  []
                  [ F ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  "rotate",
                  [],
                  []
                |),
                [ M.read (| self |); Value.Integer IntegerKind.Usize 1 ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_next :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "next" (next F).
        Admitted.
        Global Typeclasses Opaque next.
      End Impl_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_convert_From_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn from(value: SymbolicVariable<F>) -> Self {
                SymbolicExpression::Variable(value)
            }
        *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ value ] =>
            ltac:(M.monadic
              (let value :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  value
                |) in
              Value.StructTuple
                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression::Variable"
                []
                [ F ]
                [ M.read (| value |) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*     type Output = SymbolicExpression<F>; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn add(self, rhs: Self) -> Self::Output {
                SymbolicExpression::from(self) + SymbolicExpression::from(rhs)
            }
        *)
        Definition add (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  rhs
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "add",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Add"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("add", InstanceField.Method (add F)) ].
      End Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_ops_arith_Add_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*     type Output = SymbolicExpression<F>; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn add(self, rhs: F) -> Self::Output {
                SymbolicExpression::from(self) + SymbolicExpression::from(rhs)
            }
        *)
        Definition add (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let rhs := M.alloc (| F, rhs |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "add",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Add"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("add", InstanceField.Method (add F)) ].
      End Impl_core_ops_arith_Add_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*     type Output = SymbolicExpression<F>; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn add(self, rhs: SymbolicExpression<F>) -> Self::Output {
                SymbolicExpression::from(self) + rhs
            }
        *)
        Definition add (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  rhs
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "add",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |);
                  M.read (| rhs |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Add"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("add", InstanceField.Method (add F)) ].
      End Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn add(self, rhs: SymbolicVariable<F>) -> Self::Output {
                self + Self::from(rhs)
            }
        *)
        Definition add (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  rhs
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "add",
                  [],
                  []
                |),
                [
                  M.read (| self |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Add"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("add", InstanceField.Method (add F)) ].
      End Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*     type Output = SymbolicExpression<F>; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sub(self, rhs: Self) -> Self::Output {
                SymbolicExpression::from(self) - SymbolicExpression::from(rhs)
            }
        *)
        Definition sub (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  rhs
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Sub",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "sub",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Sub"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("sub", InstanceField.Method (sub F)) ].
      End Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*     type Output = SymbolicExpression<F>; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sub(self, rhs: F) -> Self::Output {
                SymbolicExpression::from(self) - SymbolicExpression::from(rhs)
            }
        *)
        Definition sub (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let rhs := M.alloc (| F, rhs |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Sub",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "sub",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Sub"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("sub", InstanceField.Method (sub F)) ].
      End Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*     type Output = SymbolicExpression<F>; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sub(self, rhs: SymbolicExpression<F>) -> Self::Output {
                SymbolicExpression::from(self) - rhs
            }
        *)
        Definition sub (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  rhs
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Sub",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "sub",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |);
                  M.read (| rhs |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Sub"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("sub", InstanceField.Method (sub F)) ].
      End Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn sub(self, rhs: SymbolicVariable<F>) -> Self::Output {
                self - Self::from(rhs)
            }
        *)
        Definition sub (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  rhs
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Sub",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "sub",
                  [],
                  []
                |),
                [
                  M.read (| self |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Sub"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("sub", InstanceField.Method (sub F)) ].
      End Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
      
      Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*     type Output = SymbolicExpression<F>; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn mul(self, rhs: Self) -> Self::Output {
                SymbolicExpression::from(self) * SymbolicExpression::from(rhs)
            }
        *)
        Definition mul (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  rhs
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Mul",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "mul",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Mul"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
      End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*     type Output = SymbolicExpression<F>; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn mul(self, rhs: F) -> Self::Output {
                SymbolicExpression::from(self) * SymbolicExpression::from(rhs)
            }
        *)
        Definition mul (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let rhs := M.alloc (| F, rhs |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Mul",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "mul",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Mul"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
      End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
            []
            [ F ].
        
        (*     type Output = SymbolicExpression<F>; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn mul(self, rhs: SymbolicExpression<F>) -> Self::Output {
                SymbolicExpression::from(self) * rhs
            }
        *)
        Definition mul (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  rhs
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Mul",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "mul",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |);
                  M.read (| rhs |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Mul"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
      End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F.
      
      Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*     type Output = Self; *)
        Definition _Output (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ].
        
        (*
            fn mul(self, rhs: SymbolicVariable<F>) -> Self::Output {
                self * Self::from(rhs)
            }
        *)
        Definition mul (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  self
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                    []
                    [ F ],
                  rhs
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path
                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                  []
                  [ F ],
                M.get_trait_method (|
                  "core::ops::arith::Mul",
                  Ty.apply
                    (Ty.path
                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                    []
                    [ F ],
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                  "mul",
                  [],
                  []
                |),
                [
                  M.read (| self |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                          []
                          [ F ]
                      ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| rhs |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::ops::arith::Mul"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path
                  "openvm_stark_backend::air_builders::symbolic::symbolic_variable::SymbolicVariable")
                []
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
      End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_air_builders_symbolic_symbolic_variable_SymbolicVariable_F_for_openvm_stark_backend_air_builders_symbolic_symbolic_expression_SymbolicExpression_F.
    End symbolic_variable.
  End symbolic.
End air_builders.
