(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module config.
  (* Trait *)
  (* Empty module 'StarkGenericConfig' *)
  
  Axiom Val :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::Val") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_commit::domain::PolynomialSpace"
        []
        []
        (Ty.associated_in_trait
          "p3_commit::pcs::Pcs"
          []
          [
            Ty.associated_in_trait
              "openvm_stark_backend::config::StarkGenericConfig"
              []
              []
              SC
              "Challenge";
            Ty.associated_in_trait
              "openvm_stark_backend::config::StarkGenericConfig"
              []
              []
              SC
              "Challenger"
          ]
          (Ty.associated_in_trait "openvm_stark_backend::config::StarkGenericConfig" [] [] SC "Pcs")
          "Domain")
        "Val").
  
  Axiom Com :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::Com") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_commit::pcs::Pcs"
        []
        [
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenge";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenger"
        ]
        (Ty.associated_in_trait "openvm_stark_backend::config::StarkGenericConfig" [] [] SC "Pcs")
        "Commitment").
  
  Axiom PcsProverData :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::PcsProverData") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_commit::pcs::Pcs"
        []
        [
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenge";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenger"
        ]
        (Ty.associated_in_trait "openvm_stark_backend::config::StarkGenericConfig" [] [] SC "Pcs")
        "ProverData").
  
  Axiom PcsProof :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::PcsProof") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_commit::pcs::Pcs"
        []
        [
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenge";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenger"
        ]
        (Ty.associated_in_trait "openvm_stark_backend::config::StarkGenericConfig" [] [] SC "Pcs")
        "Proof").
  
  Axiom PcsError :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::PcsError") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_commit::pcs::Pcs"
        []
        [
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenge";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenger"
        ]
        (Ty.associated_in_trait "openvm_stark_backend::config::StarkGenericConfig" [] [] SC "Pcs")
        "Error").
  
  Axiom Domain :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::Domain") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_commit::pcs::Pcs"
        []
        [
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenge";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenger"
        ]
        (Ty.associated_in_trait "openvm_stark_backend::config::StarkGenericConfig" [] [] SC "Pcs")
        "Domain").
  
  Axiom RapPhaseSeqPartialProof :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::RapPhaseSeqPartialProof") [] [ SC ]) =
      (Ty.associated_in_trait
        "openvm_stark_backend::interaction::RapPhaseSeq"
        []
        [
          Ty.associated_in_trait
            "p3_commit::domain::PolynomialSpace"
            []
            []
            (Ty.associated_in_trait
              "p3_commit::pcs::Pcs"
              []
              [
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenge";
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenger"
              ]
              (Ty.associated_in_trait
                "openvm_stark_backend::config::StarkGenericConfig"
                []
                []
                SC
                "Pcs")
              "Domain")
            "Val";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenge";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenger"
        ]
        (Ty.associated_in_trait
          "openvm_stark_backend::config::StarkGenericConfig"
          []
          []
          SC
          "RapPhaseSeq")
        "PartialProof").
  
  Axiom RapPartialProvingKey :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::RapPartialProvingKey") [] [ SC ]) =
      (Ty.associated_in_trait
        "openvm_stark_backend::interaction::RapPhaseSeq"
        []
        [
          Ty.associated_in_trait
            "p3_commit::domain::PolynomialSpace"
            []
            []
            (Ty.associated_in_trait
              "p3_commit::pcs::Pcs"
              []
              [
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenge";
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenger"
              ]
              (Ty.associated_in_trait
                "openvm_stark_backend::config::StarkGenericConfig"
                []
                []
                SC
                "Pcs")
              "Domain")
            "Val";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenge";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenger"
        ]
        (Ty.associated_in_trait
          "openvm_stark_backend::config::StarkGenericConfig"
          []
          []
          SC
          "RapPhaseSeq")
        "PartialProvingKey").
  
  Axiom RapPhaseSeqError :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::RapPhaseSeqError") [] [ SC ]) =
      (Ty.associated_in_trait
        "openvm_stark_backend::interaction::RapPhaseSeq"
        []
        [
          Ty.associated_in_trait
            "p3_commit::domain::PolynomialSpace"
            []
            []
            (Ty.associated_in_trait
              "p3_commit::pcs::Pcs"
              []
              [
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenge";
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenger"
              ]
              (Ty.associated_in_trait
                "openvm_stark_backend::config::StarkGenericConfig"
                []
                []
                SC
                "Pcs")
              "Domain")
            "Val";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenge";
          Ty.associated_in_trait
            "openvm_stark_backend::config::StarkGenericConfig"
            []
            []
            SC
            "Challenger"
        ]
        (Ty.associated_in_trait
          "openvm_stark_backend::config::StarkGenericConfig"
          []
          []
          SC
          "RapPhaseSeq")
        "Error").
  
  Axiom PackedVal :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::PackedVal") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_field::field::Field"
        []
        []
        (Ty.associated_in_trait
          "p3_commit::domain::PolynomialSpace"
          []
          []
          (Ty.associated_in_trait
            "p3_commit::pcs::Pcs"
            []
            [
              Ty.associated_in_trait
                "openvm_stark_backend::config::StarkGenericConfig"
                []
                []
                SC
                "Challenge";
              Ty.associated_in_trait
                "openvm_stark_backend::config::StarkGenericConfig"
                []
                []
                SC
                "Challenger"
            ]
            (Ty.associated_in_trait
              "openvm_stark_backend::config::StarkGenericConfig"
              []
              []
              SC
              "Pcs")
            "Domain")
          "Val")
        "Packing").
  
  Axiom PackedChallenge :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::config::PackedChallenge") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_field::field::ExtensionField"
        []
        [
          Ty.associated_in_trait
            "p3_commit::domain::PolynomialSpace"
            []
            []
            (Ty.associated_in_trait
              "p3_commit::pcs::Pcs"
              []
              [
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenge";
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenger"
              ]
              (Ty.associated_in_trait
                "openvm_stark_backend::config::StarkGenericConfig"
                []
                []
                SC
                "Pcs")
              "Domain")
            "Val"
        ]
        (Ty.associated_in_trait
          "openvm_stark_backend::config::StarkGenericConfig"
          []
          []
          SC
          "Challenge")
        "ExtensionPacking").
  
  (* StructRecord
    {
      name := "StarkConfig";
      const_params := [];
      ty_params := [ "Pcs"; "RapPhaseSeq"; "Challenge"; "Challenger" ];
      fields :=
        [
          ("pcs", Pcs);
          ("rap_phase", RapPhaseSeq);
          ("_phantom",
            Ty.apply
              (Ty.path "core::marker::PhantomData")
              []
              [ Ty.tuple [ Challenge; Challenger ] ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Pcs_where_core_fmt_Debug_RapPhaseSeq_where_core_fmt_Debug_Challenge_where_core_fmt_Debug_Challenger_for_openvm_stark_backend_config_StarkConfig_Pcs_RapPhaseSeq_Challenge_Challenger.
    Definition Self (Pcs RapPhaseSeq Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "openvm_stark_backend::config::StarkConfig")
        []
        [ Pcs; RapPhaseSeq; Challenge; Challenger ].
    
    (* Debug *)
    Definition fmt
        (Pcs RapPhaseSeq Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Pcs RapPhaseSeq Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::config::StarkConfig")
                    []
                    [ Pcs; RapPhaseSeq; Challenge; Challenger ]
                ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "StarkConfig" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pcs" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Pcs ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::config::StarkConfig",
                          "pcs"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rap_phase" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ RapPhaseSeq ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::config::StarkConfig",
                          "rap_phase"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::marker::PhantomData")
                            []
                            [ Ty.tuple [ Challenge; Challenger ] ]
                        ]
                    ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::marker::PhantomData")
                                []
                                [ Ty.tuple [ Challenge; Challenger ] ]
                            ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::config::StarkConfig",
                              "_phantom"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Pcs RapPhaseSeq Challenge Challenger : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Pcs RapPhaseSeq Challenge Challenger)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Pcs RapPhaseSeq Challenge Challenger)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Pcs_where_core_fmt_Debug_RapPhaseSeq_where_core_fmt_Debug_Challenge_where_core_fmt_Debug_Challenger_for_openvm_stark_backend_config_StarkConfig_Pcs_RapPhaseSeq_Challenge_Challenger.
  
  Module Impl_openvm_stark_backend_config_StarkConfig_Pcs_RapPhaseSeq_Challenge_Challenger.
    Definition Self (Pcs RapPhaseSeq Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "openvm_stark_backend::config::StarkConfig")
        []
        [ Pcs; RapPhaseSeq; Challenge; Challenger ].
    
    (*
        pub const fn new(pcs: Pcs, rap_phase: RapPhaseSeq) -> Self {
            Self {
                pcs,
                rap_phase,
                _phantom: PhantomData,
            }
        }
    *)
    Definition new
        (Pcs RapPhaseSeq Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Pcs RapPhaseSeq Challenge Challenger in
      match ε, τ, α with
      | [], [], [ pcs; rap_phase ] =>
        ltac:(M.monadic
          (let pcs := M.alloc (| Pcs, pcs |) in
          let rap_phase := M.alloc (| RapPhaseSeq, rap_phase |) in
          Value.mkStructRecord
            "openvm_stark_backend::config::StarkConfig"
            []
            [ Pcs; RapPhaseSeq; Challenge; Challenger ]
            [
              ("pcs", M.read (| pcs |));
              ("rap_phase", M.read (| rap_phase |));
              ("_phantom",
                Value.StructTuple
                  "core::marker::PhantomData"
                  []
                  [ Ty.tuple [ Challenge; Challenger ] ]
                  [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (Pcs RapPhaseSeq Challenge Challenger : Ty.t),
      M.IsAssociatedFunction.C
        (Self Pcs RapPhaseSeq Challenge Challenger)
        "new"
        (new Pcs RapPhaseSeq Challenge Challenger).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_openvm_stark_backend_config_StarkConfig_Pcs_RapPhaseSeq_Challenge_Challenger.
  
  Module Impl_openvm_stark_backend_config_StarkGenericConfig_where_p3_field_field_ExtensionField_Challenge_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_where_p3_commit_pcs_Pcs_Pcs_Challenge_Challenger_where_core_marker_Send_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_where_core_marker_Sync_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_where_core_marker_Send_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Commitment_where_core_marker_Sync_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Commitment_where_core_marker_Send_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_ProverData_where_core_marker_Sync_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_ProverData_where_core_marker_Send_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Proof_where_core_marker_Sync_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Proof_where_openvm_stark_backend_interaction_RapPhaseSeq_Rps_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_where_core_marker_Send_associated_in_trait_openvm_stark_backend_interaction_RapPhaseSeq__associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_Rps_PartialProof_where_core_marker_Sync_associated_in_trait_openvm_stark_backend_interaction_RapPhaseSeq__associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_Rps_PartialProof_where_core_marker_Send_associated_in_trait_openvm_stark_backend_interaction_RapPhaseSeq__associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_Rps_PartialProvingKey_where_core_marker_Sync_associated_in_trait_openvm_stark_backend_interaction_RapPhaseSeq__associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_Rps_PartialProvingKey_where_p3_challenger_FieldChallenger_Challenger_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_where_p3_challenger_CanObserve_Challenger_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Commitment_where_p3_challenger_CanSample_Challenger_Challenge_for_openvm_stark_backend_config_StarkConfig_Pcs_Rps_Challenge_Challenger.
    Definition Self (Pcs Rps Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "openvm_stark_backend::config::StarkConfig")
        []
        [ Pcs; Rps; Challenge; Challenger ].
    
    (*     type Pcs = Pcs; *)
    Definition _Pcs (Pcs Rps Challenge Challenger : Ty.t) : Ty.t := Pcs.
    
    (*     type RapPhaseSeq = Rps; *)
    Definition _RapPhaseSeq (Pcs Rps Challenge Challenger : Ty.t) : Ty.t := Rps.
    
    (*     type Challenge = Challenge; *)
    Definition _Challenge (Pcs Rps Challenge Challenger : Ty.t) : Ty.t := Challenge.
    
    (*     type Challenger = Challenger; *)
    Definition _Challenger (Pcs Rps Challenge Challenger : Ty.t) : Ty.t := Challenger.
    
    (*
        fn pcs(&self) -> &Self::Pcs {
            &self.pcs
        }
    *)
    Definition pcs
        (Pcs Rps Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Pcs Rps Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::config::StarkConfig")
                    []
                    [ Pcs; Rps; Challenge; Challenger ]
                ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_stark_backend::config::StarkConfig",
                  "pcs"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn rap_phase_seq(&self) -> &Self::RapPhaseSeq {
            &self.rap_phase
        }
    *)
    Definition rap_phase_seq
        (Pcs Rps Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Pcs Rps Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::config::StarkConfig")
                    []
                    [ Pcs; Rps; Challenge; Challenger ]
                ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_stark_backend::config::StarkConfig",
                  "rap_phase"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Pcs Rps Challenge Challenger : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::config::StarkGenericConfig"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Pcs Rps Challenge Challenger)
        (* Instance *)
        [
          ("Pcs", InstanceField.Ty (_Pcs Pcs Rps Challenge Challenger));
          ("RapPhaseSeq", InstanceField.Ty (_RapPhaseSeq Pcs Rps Challenge Challenger));
          ("Challenge", InstanceField.Ty (_Challenge Pcs Rps Challenge Challenger));
          ("Challenger", InstanceField.Ty (_Challenger Pcs Rps Challenge Challenger));
          ("pcs", InstanceField.Method (pcs Pcs Rps Challenge Challenger));
          ("rap_phase_seq", InstanceField.Method (rap_phase_seq Pcs Rps Challenge Challenger))
        ].
  End Impl_openvm_stark_backend_config_StarkGenericConfig_where_p3_field_field_ExtensionField_Challenge_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_where_p3_commit_pcs_Pcs_Pcs_Challenge_Challenger_where_core_marker_Send_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_where_core_marker_Sync_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_where_core_marker_Send_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Commitment_where_core_marker_Sync_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Commitment_where_core_marker_Send_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_ProverData_where_core_marker_Sync_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_ProverData_where_core_marker_Send_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Proof_where_core_marker_Sync_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Proof_where_openvm_stark_backend_interaction_RapPhaseSeq_Rps_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_where_core_marker_Send_associated_in_trait_openvm_stark_backend_interaction_RapPhaseSeq__associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_Rps_PartialProof_where_core_marker_Sync_associated_in_trait_openvm_stark_backend_interaction_RapPhaseSeq__associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_Rps_PartialProof_where_core_marker_Send_associated_in_trait_openvm_stark_backend_interaction_RapPhaseSeq__associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_Rps_PartialProvingKey_where_core_marker_Sync_associated_in_trait_openvm_stark_backend_interaction_RapPhaseSeq__associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_Challenge_Challenger_Rps_PartialProvingKey_where_p3_challenger_FieldChallenger_Challenger_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_where_p3_challenger_CanObserve_Challenger_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Commitment_where_p3_challenger_CanSample_Challenger_Challenge_for_openvm_stark_backend_config_StarkConfig_Pcs_Rps_Challenge_Challenger.
  
  (* StructTuple
    {
      name := "UniStarkConfig";
      const_params := [];
      ty_params := [ "SC" ];
      fields := [ SC ];
    } *)
  
  Module Impl_p3_uni_stark_config_StarkGenericConfig_where_openvm_stark_backend_config_StarkGenericConfig_SC_for_openvm_stark_backend_config_UniStarkConfig_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::config::UniStarkConfig") [] [ SC ].
    
    (*     type Pcs = SC::Pcs; *)
    Definition _Pcs (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait "openvm_stark_backend::config::StarkGenericConfig" [] [] SC "Pcs".
    
    (*     type Challenge = SC::Challenge; *)
    Definition _Challenge (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "openvm_stark_backend::config::StarkGenericConfig"
        []
        []
        SC
        "Challenge".
    
    (*     type Challenger = SC::Challenger; *)
    Definition _Challenger (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "openvm_stark_backend::config::StarkGenericConfig"
        []
        []
        SC
        "Challenger".
    
    (*
        fn pcs(&self) -> &Self::Pcs {
            self.0.pcs()
        }
    *)
    Definition pcs (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::config::UniStarkConfig") [] [ SC ] ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Pcs"
                  ],
                M.get_trait_method (|
                  "openvm_stark_backend::config::StarkGenericConfig",
                  SC,
                  [],
                  [],
                  "pcs",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::config::UniStarkConfig",
                      0
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SC : Ty.t),
      M.IsTraitInstance
        "p3_uni_stark::config::StarkGenericConfig"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self SC)
        (* Instance *)
        [
          ("Pcs", InstanceField.Ty (_Pcs SC));
          ("Challenge", InstanceField.Ty (_Challenge SC));
          ("Challenger", InstanceField.Ty (_Challenger SC));
          ("pcs", InstanceField.Method (pcs SC))
        ].
  End Impl_p3_uni_stark_config_StarkGenericConfig_where_openvm_stark_backend_config_StarkGenericConfig_SC_for_openvm_stark_backend_config_UniStarkConfig_SC.
End config.
