(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module gkr.
  Module gate.
    (*
    Enum Gate
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "LogUp";
            item := StructTuple [];
          };
          {
            name := "GrandProduct";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_Gate_LogUp :
      M.IsDiscriminant "openvm_stark_backend::gkr::gate::Gate::LogUp" 0.
    Axiom IsDiscriminant_Gate_GrandProduct :
      M.IsDiscriminant "openvm_stark_backend::gkr::gate::Gate::GrandProduct" 1.
    
    Module Impl_core_fmt_Debug_for_openvm_stark_backend_gkr_gate_Gate.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::gkr::gate::Gate".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::gkr::gate::Gate" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.match_operator (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_stark_backend::gkr::gate::Gate::LogUp"
                          |) in
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "LogUp" |) |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_stark_backend::gkr::gate::Gate::GrandProduct"
                          |) in
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "GrandProduct" |) |) |)))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_stark_backend_gkr_gate_Gate.
    
    Module Impl_core_clone_Clone_for_openvm_stark_backend_gkr_gate_Gate.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::gkr::gate::Gate".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::gkr::gate::Gate" ],
                self
              |) in
            M.read (| M.deref (| M.read (| self |) |) |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_stark_backend_gkr_gate_Gate.
    
    Module Impl_core_marker_Copy_for_openvm_stark_backend_gkr_gate_Gate.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::gkr::gate::Gate".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_stark_backend_gkr_gate_Gate.
    
    Module Impl_openvm_stark_backend_gkr_gate_Gate.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::gkr::gate::Gate".
      
      (*
          pub(crate) fn eval<F: Field>(
              &self,
              mask: &GkrMask<F>,
          ) -> Result<Vec<F>, InvalidNumMaskColumnsError> {
              Ok(match self {
                  Self::LogUp => {
                      if mask.columns().len() != 2 {
                          return Err(InvalidNumMaskColumnsError);
                      }
      
                      let [numerator_a, numerator_b] = mask.columns()[0];
                      let [denominator_a, denominator_b] = mask.columns()[1];
      
                      let a = Fraction::new(numerator_a, denominator_a);
                      let b = Fraction::new(numerator_b, denominator_b);
                      let res = a + b;
      
                      vec![res.numerator, res.denominator]
                  }
                  Self::GrandProduct => {
                      if mask.columns().len() != 1 {
                          return Err(InvalidNumMaskColumnsError);
                      }
      
                      let [a, b] = mask.columns()[0];
                      vec![a * b]
                  }
              })
          }
      *)
      Definition eval (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ F ], [ self; mask ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::gkr::gate::Gate" ],
                self
              |) in
            let mask :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ] ],
                mask
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                  Ty.path "openvm_stark_backend::gkr::gate::InvalidNumMaskColumnsError"
                ]) (|
              ltac:(M.monadic
                (Value.StructTuple
                  "core::result::Result::Ok"
                  []
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.path "openvm_stark_backend::gkr::gate::InvalidNumMaskColumnsError"
                  ]
                  [
                    M.match_operator (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      self,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.deref (| M.read (| γ |) |) in
                            let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::gkr::gate::Gate::LogUp"
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              Ty.path "bool",
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ne,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [ F ]
                                                        ],
                                                      "len",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                      [ F ]
                                                                  ]
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::gkr::types::GkrMask")
                                                                []
                                                                [ F ],
                                                              "columns",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| mask |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 2
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "core::result::Result::Err"
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ];
                                                  Ty.path
                                                    "openvm_stark_backend::gkr::gate::InvalidNumMaskColumnsError"
                                                ]
                                                [
                                                  Value.StructTuple
                                                    "openvm_stark_backend::gkr::gate::InvalidNumMaskColumnsError"
                                                    []
                                                    []
                                                    []
                                                ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ],
                                M.match_operator (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ],
                                  M.SubPointer.get_array_field (|
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ F ]
                                              ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "openvm_stark_backend::gkr::types::GkrMask")
                                            []
                                            [ F ],
                                          "columns",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| mask |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                                        let numerator_a := M.copy (| F, γ0_0 |) in
                                        let numerator_b := M.copy (| F, γ0_1 |) in
                                        M.match_operator (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          M.SubPointer.get_array_field (|
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 2 ]
                                                          [ F ]
                                                      ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::gkr::types::GkrMask")
                                                    []
                                                    [ F ],
                                                  "columns",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| mask |) |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            Value.Integer IntegerKind.Usize 1
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_slice_index (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_slice_index (| γ, 1 |) in
                                                let denominator_a := M.copy (| F, γ0_0 |) in
                                                let denominator_b := M.copy (| F, γ0_1 |) in
                                                M.read (|
                                                  let~ a :
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::poly::uni::Fraction")
                                                        []
                                                        [ F ] :=
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::poly::uni::Fraction")
                                                        []
                                                        [ F ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::poly::uni::Fraction")
                                                          []
                                                          [ F ],
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| numerator_a |);
                                                        M.read (| denominator_a |)
                                                      ]
                                                    |) in
                                                  let~ b :
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::poly::uni::Fraction")
                                                        []
                                                        [ F ] :=
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::poly::uni::Fraction")
                                                        []
                                                        [ F ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::poly::uni::Fraction")
                                                          []
                                                          [ F ],
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| numerator_b |);
                                                        M.read (| denominator_b |)
                                                      ]
                                                    |) in
                                                  let~ res :
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::poly::uni::Fraction")
                                                        []
                                                        [ F ] :=
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::poly::uni::Fraction")
                                                        []
                                                        [ F ],
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Add",
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::poly::uni::Fraction")
                                                          []
                                                          [ F ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::poly::uni::Fraction")
                                                            []
                                                            [ F ]
                                                        ],
                                                        "add",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| a |); M.read (| b |) ]
                                                    |) in
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ],
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ],
                                                      M.get_associated_function (|
                                                        Ty.apply (Ty.path "slice") [] [ F ],
                                                        "into_vec",
                                                        [],
                                                        [ Ty.path "alloc::alloc::Global" ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "alloc::boxed::Box")
                                                            []
                                                            [
                                                              Ty.apply (Ty.path "slice") [] [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.pointer_coercion
                                                            M.PointerCoercion.Unsize
                                                            (Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ])
                                                            (Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              []
                                                              [
                                                                Ty.apply (Ty.path "slice") [] [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]),
                                                          [
                                                            M.read (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                      [ F ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "new",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                      [ F ],
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            res,
                                                                            "openvm_stark_backend::poly::uni::Fraction",
                                                                            "numerator"
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            res,
                                                                            "openvm_stark_backend::poly::uni::Fraction",
                                                                            "denominator"
                                                                          |)
                                                                        |)
                                                                      ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.deref (| M.read (| γ |) |) in
                            let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::gkr::gate::Gate::GrandProduct"
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              Ty.path "bool",
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ne,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [ F ]
                                                        ],
                                                      "len",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                      [ F ]
                                                                  ]
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::gkr::types::GkrMask")
                                                                []
                                                                [ F ],
                                                              "columns",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| mask |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "core::result::Result::Err"
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ];
                                                  Ty.path
                                                    "openvm_stark_backend::gkr::gate::InvalidNumMaskColumnsError"
                                                ]
                                                [
                                                  Value.StructTuple
                                                    "openvm_stark_backend::gkr::gate::InvalidNumMaskColumnsError"
                                                    []
                                                    []
                                                    []
                                                ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ],
                                M.match_operator (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ],
                                  M.SubPointer.get_array_field (|
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ F ]
                                              ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "openvm_stark_backend::gkr::types::GkrMask")
                                            []
                                            [ F ],
                                          "columns",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| mask |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                                        let a := M.copy (| F, γ0_0 |) in
                                        let b := M.copy (| F, γ0_1 |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ F ],
                                            "into_vec",
                                            [],
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::boxed::Box")
                                                []
                                                [
                                                  Ty.apply (Ty.path "slice") [] [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              M.pointer_coercion
                                                M.PointerCoercion.Unsize
                                                (Ty.apply
                                                  (Ty.path "alloc::boxed::Box")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ])
                                                (Ty.apply
                                                  (Ty.path "alloc::boxed::Box")
                                                  []
                                                  [
                                                    Ty.apply (Ty.path "slice") [] [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::boxed::Box")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [ F ],
                                                        Value.Array
                                                          [
                                                            M.call_closure (|
                                                              F,
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                F,
                                                                [],
                                                                [ F ],
                                                                "mul",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| a |); M.read (| b |) ]
                                                            |)
                                                          ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)
                              |)
                            |)))
                      ]
                    |)
                  ]))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_eval : M.IsAssociatedFunction.C Self "eval" eval.
      Admitted.
      Global Typeclasses Opaque eval.
    End Impl_openvm_stark_backend_gkr_gate_Gate.
    
    (* StructTuple
      {
        name := "InvalidNumMaskColumnsError";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_stark_backend_gkr_gate_InvalidNumMaskColumnsError.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::gkr::gate::InvalidNumMaskColumnsError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::gkr::gate::InvalidNumMaskColumnsError" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "InvalidNumMaskColumnsError" |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_stark_backend_gkr_gate_InvalidNumMaskColumnsError.
  End gate.
End gkr.
