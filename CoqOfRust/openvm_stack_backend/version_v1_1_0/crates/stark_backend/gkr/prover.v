(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module gkr.
  Module prover.
    (* StructRecord
      {
        name := "HypercubeEqEvals";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("y", Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]);
            ("evals", Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_gkr_prover_HypercubeEqEvals_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals") [] [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "HypercubeEqEvals" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "y" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::gkr::prover::HypercubeEqEvals",
                            "y"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "evals" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::gkr::prover::HypercubeEqEvals",
                                "evals"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_gkr_prover_HypercubeEqEvals_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_gkr_prover_HypercubeEqEvals_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals") [] [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                      []
                      [ F ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::gkr::prover::HypercubeEqEvals"
              []
              [ F ]
              [
                ("y",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::gkr::prover::HypercubeEqEvals",
                              "y"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("evals",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::gkr::prover::HypercubeEqEvals",
                              "evals"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_gkr_prover_HypercubeEqEvals_F.
    
    Module Impl_openvm_stark_backend_gkr_prover_HypercubeEqEvals_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals") [] [ F ].
      
      (*
          pub fn eval(y: &[F]) -> Self {
              let y = y.to_vec();
      
              if y.is_empty() {
                  let evals = vec![F::ONE];
                  return Self { evals, y };
              }
      
              // Compute evaluations for when x_0 = 0.
              let evals = Self::gen(&y[1..], F::ONE - y[0]);
              assert_eq!(evals.len(), 1 << (y.len() - 1));
              Self { evals, y }
          }
      *)
      Definition eval (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ y ] =>
          ltac:(M.monadic
            (let y :=
              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ], y |) in
            M.catch_return
              (Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals") [] [ F ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ y :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ F ],
                        "to_vec",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ],
                                      "is_empty",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, y |) ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                let~ evals :
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ] :=
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ F ],
                                      "into_vec",
                                      [],
                                      [ Ty.path "alloc::alloc::Global" ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          []
                                          [
                                            Ty.apply (Ty.path "slice") [] [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ])
                                          (Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            []
                                            [
                                              Ty.apply (Ty.path "slice") [] [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::boxed::Box")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 1 ]
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::boxed::Box")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "new",
                                                [],
                                                []
                                              |),
                                              [
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 1 ]
                                                    [ F ],
                                                  Value.Array
                                                    [
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ONE",
                                                          F
                                                        |)
                                                      |)
                                                    ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |) in
                                M.return_ (|
                                  Value.mkStructRecord
                                    "openvm_stark_backend::gkr::prover::HypercubeEqEvals"
                                    []
                                    [ F ]
                                    [ ("evals", M.read (| evals |)); ("y", M.read (| y |)) ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ evals :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                          []
                          [ F ],
                        "gen",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeFrom")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, y |);
                                    Value.mkStructRecord
                                      "core::ops::range::RangeFrom"
                                      []
                                      [ Ty.path "usize" ]
                                      [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |);
                        M.call_closure (|
                          F,
                          M.get_trait_method (|
                            "core::ops::arith::Sub",
                            F,
                            [],
                            [ F ],
                            "sub",
                            [],
                            []
                          |),
                          [
                            M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", F |) |);
                            M.read (|
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ F ],
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    [ Ty.path "usize" ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, y |);
                                    Value.Integer IntegerKind.Usize 0
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                          ],
                        Value.Tuple
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.path "usize",
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, evals |) ]
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.path "usize",
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.shl,
                                  [
                                    Value.Integer IntegerKind.Usize 1;
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, y |) ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let left_val :=
                              M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            let right_val :=
                              M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [
                                                M.read (| M.deref (| M.read (| left_val |) |) |);
                                                M.read (| M.deref (| M.read (| right_val |) |) |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.read (|
                                        let~ kind : Ty.path "core::panicking::AssertKind" :=
                                          Value.StructTuple
                                            "core::panicking::AssertKind::Eq"
                                            []
                                            []
                                            [] in
                                        M.alloc (|
                                          Ty.path "never",
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (|
                                              "core::panicking::assert_failed",
                                              [],
                                              [ Ty.path "usize"; Ty.path "usize" ]
                                            |),
                                            [
                                              M.read (| kind |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| left_val |) |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| right_val |) |)
                                                  |)
                                                |)
                                              |);
                                              Value.StructTuple
                                                "core::option::Option::None"
                                                []
                                                [ Ty.path "core::fmt::Arguments" ]
                                                []
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                      []
                      [ F ],
                    Value.mkStructRecord
                      "openvm_stark_backend::gkr::prover::HypercubeEqEvals"
                      []
                      [ F ]
                      [ ("evals", M.read (| evals |)); ("y", M.read (| y |)) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_eval :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "eval" (eval F).
      Admitted.
      Global Typeclasses Opaque eval.
      
      (*
          fn gen(y: &[F], v: F) -> Vec<F> {
              let mut evals = Vec::with_capacity(1 << y.len());
              evals.push(v);
      
              for &y_i in y.iter().rev() {
                  for j in 0..evals.len() {
                      // `lhs[j] = eq(0, y_i) * c[i]`
                      // `rhs[j] = eq(1, y_i) * c[i]`
                      let tmp = evals[j] * y_i;
                      evals.push(tmp);
                      evals[j] -= tmp;
                  }
              }
      
              evals
          }
      *)
      Definition gen (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ y; v ] =>
          ltac:(M.monadic
            (let y :=
              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ], y |) in
            let v := M.alloc (| F, v |) in
            M.read (|
              let~ evals :
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "with_capacity",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.shl,
                      [
                        Value.Integer IntegerKind.Usize 1;
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ F ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "push",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, evals |); M.read (| v |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                  [],
                                  [],
                                  "rev",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ F ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    []
                                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ F ] ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.apply (Ty.path "&") [] [ F ] ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::rev::Rev")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ F ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ0_0 := M.read (| γ0_0 |) in
                                              let y_i := M.copy (| F, γ0_0 |) in
                                              M.read (|
                                                M.use
                                                  (M.alloc (|
                                                    Ty.tuple [],
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            [],
                                                            [],
                                                            "into_iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.mkStructRecord
                                                              "core::ops::range::Range"
                                                              []
                                                              [ Ty.path "usize" ]
                                                              [
                                                                ("start",
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    0);
                                                                ("end_",
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "len",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        evals
                                                                      |)
                                                                    ]
                                                                  |))
                                                              ]
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let iter :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                γ
                                                              |) in
                                                            M.read (|
                                                              M.loop (|
                                                                Ty.tuple [],
                                                                ltac:(M.monadic
                                                                  (let~ _ : Ty.tuple [] :=
                                                                    M.match_operator (|
                                                                      Ty.tuple [],
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::ops::range::Range")
                                                                              []
                                                                              [ Ty.path "usize" ],
                                                                            [],
                                                                            [],
                                                                            "next",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  iter
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let _ :=
                                                                              M.is_struct_tuple (|
                                                                                γ,
                                                                                "core::option::Option::None"
                                                                              |) in
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.break (||)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::option::Option::Some",
                                                                                0
                                                                              |) in
                                                                            let j :=
                                                                              M.copy (|
                                                                                Ty.path "usize",
                                                                                γ0_0
                                                                              |) in
                                                                            M.read (|
                                                                              let~ tmp : F :=
                                                                                M.call_closure (|
                                                                                  F,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "mul",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.deref (|
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [ F ],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::index::Index",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                F;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [],
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                            "index",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              evals
                                                                                            |);
                                                                                            M.read (|
                                                                                              j
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    M.read (| y_i |)
                                                                                  ]
                                                                                |) in
                                                                              let~ _ :
                                                                                  Ty.tuple [] :=
                                                                                M.call_closure (|
                                                                                  Ty.tuple [],
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        F;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    "push",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      evals
                                                                                    |);
                                                                                    M.read (| tmp |)
                                                                                  ]
                                                                                |) in
                                                                              let~ _ :
                                                                                  Ty.tuple [] :=
                                                                                M.call_closure (|
                                                                                  Ty.tuple [],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::SubAssign",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "sub_assign",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      M.deref (|
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&mut")
                                                                                            []
                                                                                            [ F ],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::index::IndexMut",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                F;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [],
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                            "index_mut",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              evals
                                                                                            |);
                                                                                            M.read (|
                                                                                              j
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    M.read (| tmp |)
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Ty.tuple [],
                                                                                Value.Tuple []
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (|
                                                                    Ty.tuple [],
                                                                    Value.Tuple []
                                                                  |)))
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  |))
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              evals
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_gen :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "gen" (gen F).
      Admitted.
      Global Typeclasses Opaque gen.
    End Impl_openvm_stark_backend_gkr_prover_HypercubeEqEvals_F.
    
    Module Impl_core_ops_deref_Deref_for_openvm_stark_backend_gkr_prover_HypercubeEqEvals_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals") [] [ F ].
      
      (*     type Target = [F]; *)
      Definition _Target (F : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ F ].
      
      (*
          fn deref(&self) -> &Self::Target {
              self.evals.deref()
          }
      *)
      Definition deref (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                  M.get_trait_method (|
                    "core::ops::deref::Deref",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "deref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_stark_backend::gkr::prover::HypercubeEqEvals",
                        "evals"
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::deref::Deref"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [ ("Target", InstanceField.Ty (_Target F)); ("deref", InstanceField.Method (deref F)) ].
    End Impl_core_ops_deref_Deref_for_openvm_stark_backend_gkr_prover_HypercubeEqEvals_F.
    
    (* StructRecord
      {
        name := "GkrMultivariatePolyOracle";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("eq_evals",
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals") [] [ F ]
                ]);
            ("input_layer", Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ]);
            ("eq_fixed_var_correction", F);
            ("lambda", F)
          ];
      } *)
    
    Module Impl_openvm_stark_backend_poly_multi_MultivariatePolyOracle_where_p3_field_field_Field_F_F_for_openvm_stark_backend_gkr_prover_GkrMultivariatePolyOracle_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle") [] [ F ].
      
      (*
          fn arity(&self) -> usize {
              self.input_layer.n_variables() - 1
          }
      *)
      Definition arity (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ],
                    "n_variables",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                        "input_layer"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.Usize 1
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn marginalize_first(&self, claim: F) -> UnivariatePolynomial<F> {
              let n_variables = self.arity();
              assert_ne!(n_variables, 0);
              let n_terms = 1 << (n_variables - 1);
              // Vector used to generate evaluations of `eq(x, y)` for `x` in the boolean hypercube.
              let y = &self.eq_evals.y;
              let lambda = self.lambda;
      
              let (mut eval_at_0, mut eval_at_2) = match &self.input_layer {
                  Layer::GrandProduct(col) => eval_grand_product_sum(self.eq_evals, col, n_terms),
                  Layer::LogUpGeneric {
                      numerators,
                      denominators,
                  }
                  | Layer::LogUpMultiplicities {
                      numerators,
                      denominators,
                  } => eval_logup_sum(self.eq_evals, numerators, denominators, n_terms, lambda),
                  Layer::LogUpSingles { denominators } => {
                      eval_logup_singles_sum(self.eq_evals, denominators, n_terms, lambda)
                  }
              };
      
              eval_at_0 *= self.eq_fixed_var_correction;
              eval_at_2 *= self.eq_fixed_var_correction;
              correct_sum_as_poly_in_first_variable(eval_at_0, eval_at_2, claim, y, n_variables)
          }
      *)
      Definition marginalize_first
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; claim ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                      []
                      [ F ]
                  ],
                self
              |) in
            let claim := M.alloc (| F, claim |) in
            M.read (|
              let~ n_variables : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "openvm_stark_backend::poly::multi::MultivariatePolyOracle",
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                      []
                      [ F ],
                    [],
                    [ F ],
                    "arity",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                      ],
                    Value.Tuple
                      [
                        M.borrow (| Pointer.Kind.Ref, n_variables |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val :=
                          M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                        let right_val :=
                          M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind : Ty.path "core::panicking::AssertKind" :=
                                      Value.StructTuple
                                        "core::panicking::AssertKind::Ne"
                                        []
                                        []
                                        [] in
                                    M.alloc (|
                                      Ty.path "never",
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::None"
                                            []
                                            [ Ty.path "core::fmt::Arguments" ]
                                            []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |)))
                  ]
                |) in
              let~ n_terms : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.Usize 1;
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.sub,
                      [ M.read (| n_variables |); Value.Integer IntegerKind.Usize 1 ]
                    |)
                  ]
                |) in
              let~ y :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                          "eq_evals"
                        |)
                      |)
                    |),
                    "openvm_stark_backend::gkr::prover::HypercubeEqEvals",
                    "y"
                  |)
                |) in
              let~ lambda : F :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                    "lambda"
                  |)
                |) in
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                    []
                    [ F ],
                  M.alloc (|
                    Ty.tuple [ F; F ],
                    M.match_operator (|
                      Ty.tuple [ F; F ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ],
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                            "input_layer"
                          |)
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_stark_backend::gkr::types::Layer::GrandProduct",
                                0
                              |) in
                            let col :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                      []
                                      [ F ]
                                  ],
                                γ1_0
                              |) in
                            M.call_closure (|
                              Ty.tuple [ F; F ],
                              M.get_function (|
                                "openvm_stark_backend::gkr::prover::eval_grand_product_sum",
                                [],
                                [ F ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                                        "eq_evals"
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| col |) |) |);
                                M.read (| n_terms |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.find_or_pattern
                              (Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                        []
                                        [ F ]
                                    ];
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                        []
                                        [ F ]
                                    ]
                                ]) (|
                              γ,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "openvm_stark_backend::gkr::types::Layer::LogUpGeneric",
                                        "numerators"
                                      |) in
                                    let γ1_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "openvm_stark_backend::gkr::types::Layer::LogUpGeneric",
                                        "denominators"
                                      |) in
                                    let numerators :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                              []
                                              [ F ]
                                          ],
                                        γ1_0
                                      |) in
                                    let denominators :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                              []
                                              [ F ]
                                          ],
                                        γ1_1
                                      |) in
                                    Value.Tuple [ numerators; denominators ]));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "openvm_stark_backend::gkr::types::Layer::LogUpMultiplicities",
                                        "numerators"
                                      |) in
                                    let γ1_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "openvm_stark_backend::gkr::types::Layer::LogUpMultiplicities",
                                        "denominators"
                                      |) in
                                    let numerators :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                              []
                                              [ F ]
                                          ],
                                        γ1_0
                                      |) in
                                    let denominators :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                              []
                                              [ F ]
                                          ],
                                        γ1_1
                                      |) in
                                    Value.Tuple [ numerators; denominators ]))
                              ],
                              fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ numerators; denominators ] =>
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.tuple [ F; F ],
                                        M.get_function (|
                                          "openvm_stark_backend::gkr::prover::eval_logup_sum",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                                                  "eq_evals"
                                                |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| numerators |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| denominators |) |)
                                          |);
                                          M.read (| n_terms |);
                                          M.read (| lambda |)
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::gkr::types::Layer::LogUpSingles",
                                "denominators"
                              |) in
                            let denominators :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                      []
                                      [ F ]
                                  ],
                                γ1_0
                              |) in
                            M.call_closure (|
                              Ty.tuple [ F; F ],
                              M.get_function (|
                                "openvm_stark_backend::gkr::prover::eval_logup_singles_sum",
                                [],
                                [ F ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                                        "eq_evals"
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| denominators |) |)
                                |);
                                M.read (| n_terms |);
                                M.read (| lambda |)
                              ]
                            |)))
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let eval_at_0 := M.copy (| F, γ0_0 |) in
                        let eval_at_2 := M.copy (| F, γ0_1 |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "core::ops::arith::MulAssign",
                                F,
                                [],
                                [ F ],
                                "mul_assign",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, eval_at_0 |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                                    "eq_fixed_var_correction"
                                  |)
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "core::ops::arith::MulAssign",
                                F,
                                [],
                                [ F ],
                                "mul_assign",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, eval_at_2 |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                                    "eq_fixed_var_correction"
                                  |)
                                |)
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                              []
                              [ F ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                []
                                [ F ],
                              M.get_function (|
                                "openvm_stark_backend::gkr::prover::correct_sum_as_poly_in_first_variable",
                                [],
                                [ F ]
                              |),
                              [
                                M.read (| eval_at_0 |);
                                M.read (| eval_at_2 |);
                                M.read (| claim |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| y |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.read (| n_variables |)
                              ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn partial_evaluation(self, alpha: F) -> Self {
              if self.is_constant() {
                  return self;
              }
      
              let z0 = self.eq_evals.y[self.eq_evals.y.len() - self.arity()];
              let eq_fixed_var_correction = self.eq_fixed_var_correction * hypercube_eq(&[alpha], &[z0]);
      
              Self {
                  eq_evals: self.eq_evals,
                  eq_fixed_var_correction,
                  input_layer: self.input_layer.fix_first_variable(alpha),
                  lambda: self.lambda,
              }
          }
      *)
      Definition partial_evaluation
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; alpha ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                  []
                  [ F ],
                self
              |) in
            let alpha := M.alloc (| F, alpha |) in
            M.catch_return
              (Ty.apply
                (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                []
                [ F ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                        []
                                        [ F ],
                                      "is_constant",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (| M.read (| M.return_ (| M.read (| self |) |) |) |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ z0 : F :=
                    M.read (|
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ F ],
                          M.get_trait_method (|
                            "core::ops::index::Index",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            [],
                            [ Ty.path "usize" ],
                            "index",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (|
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                                      "eq_evals"
                                    |)
                                  |)
                                |),
                                "openvm_stark_backend::gkr::prover::HypercubeEqEvals",
                                "y"
                              |)
                            |);
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.sub,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (|
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              self,
                                              "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                                              "eq_evals"
                                            |)
                                          |)
                                        |),
                                        "openvm_stark_backend::gkr::prover::HypercubeEqEvals",
                                        "y"
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_trait_method (|
                                    "openvm_stark_backend::poly::multi::MultivariatePolyOracle",
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                      []
                                      [ F ],
                                    [],
                                    [ F ],
                                    "arity",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |) in
                  let~ eq_fixed_var_correction : F :=
                    M.call_closure (|
                      F,
                      M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                            "eq_fixed_var_correction"
                          |)
                        |);
                        M.call_closure (|
                          F,
                          M.get_function (|
                            "openvm_stark_backend::poly::multi::hypercube_eq",
                            [],
                            [ F ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ F ]
                                  ])
                                (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ F ],
                                        Value.Array [ M.read (| alpha |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ F ]
                                  ])
                                (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ F ],
                                        Value.Array [ M.read (| z0 |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                      []
                      [ F ],
                    Value.mkStructRecord
                      "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle"
                      []
                      [ F ]
                      [
                        ("eq_evals",
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                              "eq_evals"
                            |)
                          |));
                        ("eq_fixed_var_correction", M.read (| eq_fixed_var_correction |));
                        ("input_layer",
                          M.call_closure (|
                            Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ],
                              "fix_first_variable",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                                  "input_layer"
                                |)
                              |);
                              M.read (| alpha |)
                            ]
                          |));
                        ("lambda",
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                              "lambda"
                            |)
                          |))
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::poly::multi::MultivariatePolyOracle"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *)
          [
            ("arity", InstanceField.Method (arity F));
            ("marginalize_first", InstanceField.Method (marginalize_first F));
            ("partial_evaluation", InstanceField.Method (partial_evaluation F))
          ].
    End Impl_openvm_stark_backend_poly_multi_MultivariatePolyOracle_where_p3_field_field_Field_F_F_for_openvm_stark_backend_gkr_prover_GkrMultivariatePolyOracle_F.
    
    (*
    fn eval_grand_product_sum<F: Field>(
        eq_evals: &HypercubeEqEvals<F>,
        input_layer: &Mle<F>,
        n_terms: usize,
    ) -> (F, F) {
        let mut eval_at_0 = F::ZERO;
        let mut eval_at_2 = F::ZERO;
    
        for i in 0..n_terms {
            // Input polynomial values at (r, {0, 1, 2}, bits(i), {0, 1})
            let (inp_r0_0, inp_r0_1) = (input_layer[i * 2], input_layer[i * 2 + 1]);
            let (inp_r1_0, inp_r1_1) = (
                input_layer[(n_terms + i) * 2],
                input_layer[(n_terms + i) * 2 + 1],
            );
    
            // Calculate values at t = 2
            let inp_r2_0 = inp_r1_0.double() - inp_r0_0;
            let inp_r2_1 = inp_r1_1.double() - inp_r0_1;
    
            // Product polynomials at t = 0 and t = 2
            let prod_at_r0i = inp_r0_0 * inp_r0_1;
            let prod_at_r2i = inp_r2_0 * inp_r2_1;
    
            // Accumulate evaluated terms
            let eq_eval_at_0i = eq_evals[i];
            eval_at_0 += eq_eval_at_0i * prod_at_r0i;
            eval_at_2 += eq_eval_at_0i * prod_at_r2i;
        }
    
        (eval_at_0, eval_at_2)
    }
    *)
    Definition eval_grand_product_sum (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ eq_evals; input_layer; n_terms ] =>
        ltac:(M.monadic
          (let eq_evals :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals") [] [ F ]
                ],
              eq_evals
            |) in
          let input_layer :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::poly::multi::Mle") [] [ F ] ],
              input_layer
            |) in
          let n_terms := M.alloc (| Ty.path "usize", n_terms |) in
          M.read (|
            let~ eval_at_0 : F :=
              M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |) in
            let~ eval_at_2 : F :=
              M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [
                                ("start", Value.Integer IntegerKind.Usize 0);
                                ("end_", M.read (| n_terms |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple [ F; F ],
                                                Value.Tuple
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::poly::multi::Mle")
                                                                []
                                                                [ F ],
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (| input_layer |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            M.read (| i |);
                                                            Value.Integer IntegerKind.Usize 2
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::poly::multi::Mle")
                                                                []
                                                                [ F ],
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (| input_layer |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.add,
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.mul,
                                                              [
                                                                M.read (| i |);
                                                                Value.Integer IntegerKind.Usize 2
                                                              ]
                                                            |);
                                                            Value.Integer IntegerKind.Usize 1
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let inp_r0_0 := M.copy (| F, γ0_0 |) in
                                                    let inp_r0_1 := M.copy (| F, γ0_1 |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        Ty.tuple [ F; F ],
                                                        Value.Tuple
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::poly::multi::Mle")
                                                                        []
                                                                        [ F ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| input_layer |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.mul,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.add,
                                                                      [
                                                                        M.read (| n_terms |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::poly::multi::Mle")
                                                                        []
                                                                        [ F ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| input_layer |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.add,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.mul,
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.add,
                                                                          [
                                                                            M.read (| n_terms |);
                                                                            M.read (| i |)
                                                                          ]
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                    |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let inp_r1_0 := M.copy (| F, γ0_0 |) in
                                                            let inp_r1_1 := M.copy (| F, γ0_1 |) in
                                                            M.read (|
                                                              let~ inp_r2_0 : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "sub",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "p3_field::field::FieldAlgebra",
                                                                        F,
                                                                        [],
                                                                        [],
                                                                        "double",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          inp_r1_0
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.read (| inp_r0_0 |)
                                                                  ]
                                                                |) in
                                                              let~ inp_r2_1 : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "sub",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "p3_field::field::FieldAlgebra",
                                                                        F,
                                                                        [],
                                                                        [],
                                                                        "double",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          inp_r1_1
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.read (| inp_r0_1 |)
                                                                  ]
                                                                |) in
                                                              let~ prod_at_r0i : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "mul",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| inp_r0_0 |);
                                                                    M.read (| inp_r0_1 |)
                                                                  ]
                                                                |) in
                                                              let~ prod_at_r2i : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "mul",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| inp_r2_0 |);
                                                                    M.read (| inp_r2_1 |)
                                                                  ]
                                                                |) in
                                                              let~ eq_eval_at_0i : F :=
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ F ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                                                                            []
                                                                            [ F ],
                                                                          [],
                                                                          [],
                                                                          "deref",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| eq_evals |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    M.read (| i |)
                                                                  |)
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::AddAssign",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "add_assign",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      eval_at_0
                                                                    |);
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        F,
                                                                        [],
                                                                        [ F ],
                                                                        "mul",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| eq_eval_at_0i |);
                                                                        M.read (| prod_at_r0i |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::AddAssign",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "add_assign",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      eval_at_2
                                                                    |);
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        F,
                                                                        [],
                                                                        [ F ],
                                                                        "mul",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| eq_eval_at_0i |);
                                                                        M.read (| prod_at_r2i |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |) in
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                Value.Tuple []
                                                              |)
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            M.alloc (|
              Ty.tuple [ F; F ],
              Value.Tuple [ M.read (| eval_at_0 |); M.read (| eval_at_2 |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_eval_grand_product_sum :
      M.IsFunction.C
        "openvm_stark_backend::gkr::prover::eval_grand_product_sum"
        eval_grand_product_sum.
    Admitted.
    Global Typeclasses Opaque eval_grand_product_sum.
    
    (*
    fn eval_logup_sum<F: Field>(
        eq_evals: &HypercubeEqEvals<F>,
        input_numerators: &Mle<F>,
        input_denominators: &Mle<F>,
        n_terms: usize,
        lambda: F,
    ) -> (F, F) {
        let mut eval_at_0 = F::ZERO;
        let mut eval_at_2 = F::ZERO;
    
        for i in 0..n_terms {
            // Gather input values at (r, {0, 1, 2}, bits(i), {0, 1})
            let (numer_r0_0, denom_r0_0) = (input_numerators[i * 2], input_denominators[i * 2]);
            let (numer_r0_1, denom_r0_1) = (input_numerators[i * 2 + 1], input_denominators[i * 2 + 1]);
            let (numer_r1_0, denom_r1_0) = (
                input_numerators[(n_terms + i) * 2],
                input_denominators[(n_terms + i) * 2],
            );
            let (numer_r1_1, denom_r1_1) = (
                input_numerators[(n_terms + i) * 2 + 1],
                input_denominators[(n_terms + i) * 2 + 1],
            );
    
            // Calculate values at r, t = 2
            let numer_r2_0 = numer_r1_0.double() - numer_r0_0;
            let denom_r2_0 = denom_r1_0.double() - denom_r0_0;
            let numer_r2_1 = numer_r1_1.double() - numer_r0_1;
            let denom_r2_1 = denom_r1_1.double() - denom_r0_1;
    
            // Compute fractions at t = 0 and t = 2
            let numer_at_r0i = numer_r0_0 * denom_r0_1 + numer_r0_1 * denom_r0_0;
            let denom_at_r0i = denom_r0_1 * denom_r0_0;
            let numer_at_r2i = numer_r2_0 * denom_r2_1 + numer_r2_1 * denom_r2_0;
            let denom_at_r2i = denom_r2_1 * denom_r2_0;
    
            // Accumulate the evaluated terms
            let eq_eval_at_0i = eq_evals[i];
            eval_at_0 += eq_eval_at_0i * (numer_at_r0i + lambda * denom_at_r0i);
            eval_at_2 += eq_eval_at_0i * (numer_at_r2i + lambda * denom_at_r2i);
        }
    
        (eval_at_0, eval_at_2)
    }
    *)
    Definition eval_logup_sum (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ eq_evals; input_numerators; input_denominators; n_terms; lambda ] =>
        ltac:(M.monadic
          (let eq_evals :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals") [] [ F ]
                ],
              eq_evals
            |) in
          let input_numerators :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::poly::multi::Mle") [] [ F ] ],
              input_numerators
            |) in
          let input_denominators :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::poly::multi::Mle") [] [ F ] ],
              input_denominators
            |) in
          let n_terms := M.alloc (| Ty.path "usize", n_terms |) in
          let lambda := M.alloc (| F, lambda |) in
          M.read (|
            let~ eval_at_0 : F :=
              M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |) in
            let~ eval_at_2 : F :=
              M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [
                                ("start", Value.Integer IntegerKind.Usize 0);
                                ("end_", M.read (| n_terms |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple [ F; F ],
                                                Value.Tuple
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::poly::multi::Mle")
                                                                []
                                                                [ F ],
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (| input_numerators |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            M.read (| i |);
                                                            Value.Integer IntegerKind.Usize 2
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::poly::multi::Mle")
                                                                []
                                                                [ F ],
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (| input_denominators |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            M.read (| i |);
                                                            Value.Integer IntegerKind.Usize 2
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let numer_r0_0 := M.copy (| F, γ0_0 |) in
                                                    let denom_r0_0 := M.copy (| F, γ0_1 |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        Ty.tuple [ F; F ],
                                                        Value.Tuple
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::poly::multi::Mle")
                                                                        []
                                                                        [ F ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            input_numerators
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.add,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.mul,
                                                                      [
                                                                        M.read (| i |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                    |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::poly::multi::Mle")
                                                                        []
                                                                        [ F ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            input_denominators
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.add,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.mul,
                                                                      [
                                                                        M.read (| i |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                    |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let numer_r0_1 :=
                                                              M.copy (| F, γ0_0 |) in
                                                            let denom_r0_1 :=
                                                              M.copy (| F, γ0_1 |) in
                                                            M.match_operator (|
                                                              Ty.tuple [],
                                                              M.alloc (|
                                                                Ty.tuple [ F; F ],
                                                                Value.Tuple
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ F ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::poly::multi::Mle")
                                                                                []
                                                                                [ F ],
                                                                              [],
                                                                              [],
                                                                              "deref",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    input_numerators
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.mul,
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              BinOp.Wrap.add,
                                                                              [
                                                                                M.read (|
                                                                                  n_terms
                                                                                |);
                                                                                M.read (| i |)
                                                                              ]
                                                                            |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ F ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::poly::multi::Mle")
                                                                                []
                                                                                [ F ],
                                                                              [],
                                                                              [],
                                                                              "deref",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    input_denominators
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.mul,
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              BinOp.Wrap.add,
                                                                              [
                                                                                M.read (|
                                                                                  n_terms
                                                                                |);
                                                                                M.read (| i |)
                                                                              ]
                                                                            |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        0
                                                                      |) in
                                                                    let γ0_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        1
                                                                      |) in
                                                                    let numer_r1_0 :=
                                                                      M.copy (| F, γ0_0 |) in
                                                                    let denom_r1_0 :=
                                                                      M.copy (| F, γ0_1 |) in
                                                                    M.match_operator (|
                                                                      Ty.tuple [],
                                                                      M.alloc (|
                                                                        Ty.tuple [ F; F ],
                                                                        Value.Tuple
                                                                          [
                                                                            M.read (|
                                                                              M.SubPointer.get_array_field (|
                                                                                M.deref (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [ F ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::deref::Deref",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::poly::multi::Mle")
                                                                                        []
                                                                                        [ F ],
                                                                                      [],
                                                                                      [],
                                                                                      "deref",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            input_numerators
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                M.call_closure (|
                                                                                  Ty.path "usize",
                                                                                  BinOp.Wrap.add,
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "usize",
                                                                                      BinOp.Wrap.mul,
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          BinOp.Wrap.add,
                                                                                          [
                                                                                            M.read (|
                                                                                              n_terms
                                                                                            |);
                                                                                            M.read (|
                                                                                              i
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          2
                                                                                      ]
                                                                                    |);
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      1
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (|
                                                                              M.SubPointer.get_array_field (|
                                                                                M.deref (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [ F ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::deref::Deref",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::poly::multi::Mle")
                                                                                        []
                                                                                        [ F ],
                                                                                      [],
                                                                                      [],
                                                                                      "deref",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            input_denominators
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                M.call_closure (|
                                                                                  Ty.path "usize",
                                                                                  BinOp.Wrap.add,
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "usize",
                                                                                      BinOp.Wrap.mul,
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          BinOp.Wrap.add,
                                                                                          [
                                                                                            M.read (|
                                                                                              n_terms
                                                                                            |);
                                                                                            M.read (|
                                                                                              i
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          2
                                                                                      ]
                                                                                    |);
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      1
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let numer_r1_1 :=
                                                                              M.copy (|
                                                                                F,
                                                                                γ0_0
                                                                              |) in
                                                                            let denom_r1_1 :=
                                                                              M.copy (|
                                                                                F,
                                                                                γ0_1
                                                                              |) in
                                                                            M.read (|
                                                                              let~ numer_r2_0 : F :=
                                                                                M.call_closure (|
                                                                                  F,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Sub",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "sub",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "p3_field::field::FieldAlgebra",
                                                                                        F,
                                                                                        [],
                                                                                        [],
                                                                                        "double",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          numer_r1_0
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.read (|
                                                                                      numer_r0_0
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ denom_r2_0 : F :=
                                                                                M.call_closure (|
                                                                                  F,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Sub",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "sub",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "p3_field::field::FieldAlgebra",
                                                                                        F,
                                                                                        [],
                                                                                        [],
                                                                                        "double",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          denom_r1_0
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.read (|
                                                                                      denom_r0_0
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ numer_r2_1 : F :=
                                                                                M.call_closure (|
                                                                                  F,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Sub",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "sub",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "p3_field::field::FieldAlgebra",
                                                                                        F,
                                                                                        [],
                                                                                        [],
                                                                                        "double",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          numer_r1_1
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.read (|
                                                                                      numer_r0_1
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ denom_r2_1 : F :=
                                                                                M.call_closure (|
                                                                                  F,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Sub",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "sub",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "p3_field::field::FieldAlgebra",
                                                                                        F,
                                                                                        [],
                                                                                        [],
                                                                                        "double",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          denom_r1_1
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.read (|
                                                                                      denom_r0_1
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ numer_at_r0i :
                                                                                  F :=
                                                                                M.call_closure (|
                                                                                  F,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "add",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        F,
                                                                                        [],
                                                                                        [ F ],
                                                                                        "mul",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          numer_r0_0
                                                                                        |);
                                                                                        M.read (|
                                                                                          denom_r0_1
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        F,
                                                                                        [],
                                                                                        [ F ],
                                                                                        "mul",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          numer_r0_1
                                                                                        |);
                                                                                        M.read (|
                                                                                          denom_r0_0
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ denom_at_r0i :
                                                                                  F :=
                                                                                M.call_closure (|
                                                                                  F,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "mul",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      denom_r0_1
                                                                                    |);
                                                                                    M.read (|
                                                                                      denom_r0_0
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ numer_at_r2i :
                                                                                  F :=
                                                                                M.call_closure (|
                                                                                  F,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "add",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        F,
                                                                                        [],
                                                                                        [ F ],
                                                                                        "mul",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          numer_r2_0
                                                                                        |);
                                                                                        M.read (|
                                                                                          denom_r2_1
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        F,
                                                                                        [],
                                                                                        [ F ],
                                                                                        "mul",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          numer_r2_1
                                                                                        |);
                                                                                        M.read (|
                                                                                          denom_r2_0
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ denom_at_r2i :
                                                                                  F :=
                                                                                M.call_closure (|
                                                                                  F,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "mul",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      denom_r2_1
                                                                                    |);
                                                                                    M.read (|
                                                                                      denom_r2_0
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ eq_eval_at_0i :
                                                                                  F :=
                                                                                M.read (|
                                                                                  M.SubPointer.get_array_field (|
                                                                                    M.deref (|
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "slice")
                                                                                              []
                                                                                              [ F ]
                                                                                          ],
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                                                                                            []
                                                                                            [ F ],
                                                                                          [],
                                                                                          [],
                                                                                          "deref",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                eq_evals
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |),
                                                                                    M.read (| i |)
                                                                                  |)
                                                                                |) in
                                                                              let~ _ :
                                                                                  Ty.tuple [] :=
                                                                                M.call_closure (|
                                                                                  Ty.tuple [],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::AddAssign",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "add_assign",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      eval_at_0
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        F,
                                                                                        [],
                                                                                        [ F ],
                                                                                        "mul",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          eq_eval_at_0i
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          F,
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Add",
                                                                                            F,
                                                                                            [],
                                                                                            [ F ],
                                                                                            "add",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              numer_at_r0i
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              F,
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Mul",
                                                                                                F,
                                                                                                [],
                                                                                                [ F
                                                                                                ],
                                                                                                "mul",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  lambda
                                                                                                |);
                                                                                                M.read (|
                                                                                                  denom_at_r0i
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ _ :
                                                                                  Ty.tuple [] :=
                                                                                M.call_closure (|
                                                                                  Ty.tuple [],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::AddAssign",
                                                                                    F,
                                                                                    [],
                                                                                    [ F ],
                                                                                    "add_assign",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      eval_at_2
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        F,
                                                                                        [],
                                                                                        [ F ],
                                                                                        "mul",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          eq_eval_at_0i
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          F,
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Add",
                                                                                            F,
                                                                                            [],
                                                                                            [ F ],
                                                                                            "add",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              numer_at_r2i
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              F,
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Mul",
                                                                                                F,
                                                                                                [],
                                                                                                [ F
                                                                                                ],
                                                                                                "mul",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  lambda
                                                                                                |);
                                                                                                M.read (|
                                                                                                  denom_at_r2i
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Ty.tuple [],
                                                                                Value.Tuple []
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            M.alloc (|
              Ty.tuple [ F; F ],
              Value.Tuple [ M.read (| eval_at_0 |); M.read (| eval_at_2 |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_eval_logup_sum :
      M.IsFunction.C "openvm_stark_backend::gkr::prover::eval_logup_sum" eval_logup_sum.
    Admitted.
    Global Typeclasses Opaque eval_logup_sum.
    
    (*
    fn eval_logup_singles_sum<F: Field>(
        eq_evals: &HypercubeEqEvals<F>,
        input_denominators: &Mle<F>,
        n_terms: usize,
        lambda: F,
    ) -> (F, F) {
        let mut eval_at_0 = F::ZERO;
        let mut eval_at_2 = F::ZERO;
    
        for i in 0..n_terms {
            // Input denominator values at (r, {0, 1, 2}, bits(i), {0, 1})
            let (inp_denom_r0_0, inp_denom_r0_1) =
                (input_denominators[i * 2], input_denominators[i * 2 + 1]);
            let (inp_denom_r1_0, inp_denom_r1_1) = (
                input_denominators[(n_terms + i) * 2],
                input_denominators[(n_terms + i) * 2 + 1],
            );
    
            // Calculate values at t = 2
            let inp_denom_r2_0 = inp_denom_r1_0.double() - inp_denom_r0_0;
            let inp_denom_r2_1 = inp_denom_r1_1.double() - inp_denom_r0_1;
    
            // Fraction addition polynomials at t = 0 and t = 2
            let numer_at_r0i = inp_denom_r0_0 + inp_denom_r0_1;
            let denom_at_r0i = inp_denom_r0_0 * inp_denom_r0_1;
            let numer_at_r2i = inp_denom_r2_0 + inp_denom_r2_1;
            let denom_at_r2i = inp_denom_r2_0 * inp_denom_r2_1;
    
            // Accumulate evaluated terms
            let eq_eval_at_0i = eq_evals[i];
            eval_at_0 += eq_eval_at_0i * (numer_at_r0i + lambda * denom_at_r0i);
            eval_at_2 += eq_eval_at_0i * (numer_at_r2i + lambda * denom_at_r2i);
        }
    
        (eval_at_0, eval_at_2)
    }
    *)
    Definition eval_logup_singles_sum (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ eq_evals; input_denominators; n_terms; lambda ] =>
        ltac:(M.monadic
          (let eq_evals :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::HypercubeEqEvals") [] [ F ]
                ],
              eq_evals
            |) in
          let input_denominators :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::poly::multi::Mle") [] [ F ] ],
              input_denominators
            |) in
          let n_terms := M.alloc (| Ty.path "usize", n_terms |) in
          let lambda := M.alloc (| F, lambda |) in
          M.read (|
            let~ eval_at_0 : F :=
              M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |) in
            let~ eval_at_2 : F :=
              M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [
                                ("start", Value.Integer IntegerKind.Usize 0);
                                ("end_", M.read (| n_terms |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple [ F; F ],
                                                Value.Tuple
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::poly::multi::Mle")
                                                                []
                                                                [ F ],
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (| input_denominators |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            M.read (| i |);
                                                            Value.Integer IntegerKind.Usize 2
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::poly::multi::Mle")
                                                                []
                                                                [ F ],
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (| input_denominators |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.add,
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.mul,
                                                              [
                                                                M.read (| i |);
                                                                Value.Integer IntegerKind.Usize 2
                                                              ]
                                                            |);
                                                            Value.Integer IntegerKind.Usize 1
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let inp_denom_r0_0 := M.copy (| F, γ0_0 |) in
                                                    let inp_denom_r0_1 := M.copy (| F, γ0_1 |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        Ty.tuple [ F; F ],
                                                        Value.Tuple
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::poly::multi::Mle")
                                                                        []
                                                                        [ F ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            input_denominators
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.mul,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.add,
                                                                      [
                                                                        M.read (| n_terms |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::poly::multi::Mle")
                                                                        []
                                                                        [ F ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            input_denominators
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.add,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.mul,
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.add,
                                                                          [
                                                                            M.read (| n_terms |);
                                                                            M.read (| i |)
                                                                          ]
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                    |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let inp_denom_r1_0 :=
                                                              M.copy (| F, γ0_0 |) in
                                                            let inp_denom_r1_1 :=
                                                              M.copy (| F, γ0_1 |) in
                                                            M.read (|
                                                              let~ inp_denom_r2_0 : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "sub",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "p3_field::field::FieldAlgebra",
                                                                        F,
                                                                        [],
                                                                        [],
                                                                        "double",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          inp_denom_r1_0
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.read (| inp_denom_r0_0 |)
                                                                  ]
                                                                |) in
                                                              let~ inp_denom_r2_1 : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "sub",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "p3_field::field::FieldAlgebra",
                                                                        F,
                                                                        [],
                                                                        [],
                                                                        "double",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          inp_denom_r1_1
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.read (| inp_denom_r0_1 |)
                                                                  ]
                                                                |) in
                                                              let~ numer_at_r0i : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Add",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "add",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| inp_denom_r0_0 |);
                                                                    M.read (| inp_denom_r0_1 |)
                                                                  ]
                                                                |) in
                                                              let~ denom_at_r0i : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "mul",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| inp_denom_r0_0 |);
                                                                    M.read (| inp_denom_r0_1 |)
                                                                  ]
                                                                |) in
                                                              let~ numer_at_r2i : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Add",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "add",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| inp_denom_r2_0 |);
                                                                    M.read (| inp_denom_r2_1 |)
                                                                  ]
                                                                |) in
                                                              let~ denom_at_r2i : F :=
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "mul",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| inp_denom_r2_0 |);
                                                                    M.read (| inp_denom_r2_1 |)
                                                                  ]
                                                                |) in
                                                              let~ eq_eval_at_0i : F :=
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ F ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                                                                            []
                                                                            [ F ],
                                                                          [],
                                                                          [],
                                                                          "deref",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| eq_evals |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    M.read (| i |)
                                                                  |)
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::AddAssign",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "add_assign",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      eval_at_0
                                                                    |);
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        F,
                                                                        [],
                                                                        [ F ],
                                                                        "mul",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| eq_eval_at_0i |);
                                                                        M.call_closure (|
                                                                          F,
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            F,
                                                                            [],
                                                                            [ F ],
                                                                            "add",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              numer_at_r0i
                                                                            |);
                                                                            M.call_closure (|
                                                                              F,
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                F,
                                                                                [],
                                                                                [ F ],
                                                                                "mul",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| lambda |);
                                                                                M.read (|
                                                                                  denom_at_r0i
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::AddAssign",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "add_assign",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      eval_at_2
                                                                    |);
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        F,
                                                                        [],
                                                                        [ F ],
                                                                        "mul",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| eq_eval_at_0i |);
                                                                        M.call_closure (|
                                                                          F,
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            F,
                                                                            [],
                                                                            [ F ],
                                                                            "add",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              numer_at_r2i
                                                                            |);
                                                                            M.call_closure (|
                                                                              F,
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                F,
                                                                                [],
                                                                                [ F ],
                                                                                "mul",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| lambda |);
                                                                                M.read (|
                                                                                  denom_at_r2i
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |) in
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                Value.Tuple []
                                                              |)
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            M.alloc (|
              Ty.tuple [ F; F ],
              Value.Tuple [ M.read (| eval_at_0 |); M.read (| eval_at_2 |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_eval_logup_singles_sum :
      M.IsFunction.C
        "openvm_stark_backend::gkr::prover::eval_logup_singles_sum"
        eval_logup_singles_sum.
    Admitted.
    Global Typeclasses Opaque eval_logup_singles_sum.
    
    Module Impl_openvm_stark_backend_gkr_prover_GkrMultivariatePolyOracle_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle") [] [ F ].
      
      (*
          fn is_constant(&self) -> bool {
              self.arity() == 0
          }
      *)
      Definition is_constant (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "openvm_stark_backend::poly::multi::MultivariatePolyOracle",
                    Ty.apply
                      (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                      []
                      [ F ],
                    [],
                    [ F ],
                    "arity",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |);
                Value.Integer IntegerKind.Usize 0
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_constant :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "is_constant" (is_constant F).
      Admitted.
      Global Typeclasses Opaque is_constant.
      
      (*
          fn try_into_mask(self) -> Result<GkrMask<F>, NotConstantPolyError> {
              if !self.is_constant() {
                  return Err(NotConstantPolyError);
              }
      
              let columns = match self.input_layer {
                  Layer::GrandProduct(mle) => vec![mle.as_ref().try_into().unwrap()],
                  Layer::LogUpGeneric {
                      numerators,
                      denominators,
                  } => {
                      let numerators = numerators.as_ref().try_into().unwrap();
                      let denominators = denominators.as_ref().try_into().unwrap();
                      vec![numerators, denominators]
                  }
                  // Should never get called.
                  Layer::LogUpMultiplicities { .. } => unimplemented!(),
                  Layer::LogUpSingles { denominators } => {
                      let numerators = [F::ONE; 2];
                      let denominators = denominators.as_ref().try_into().unwrap();
                      vec![numerators, denominators]
                  }
              };
      
              Ok(GkrMask::new(columns))
          }
      *)
      Definition try_into_mask
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                  []
                  [ F ],
                self
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ];
                  Ty.path "openvm_stark_backend::gkr::prover::NotConstantPolyError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                          []
                                          [ F ],
                                        "is_constant",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::gkr::types::GkrMask")
                                        []
                                        [ F ];
                                      Ty.path
                                        "openvm_stark_backend::gkr::prover::NotConstantPolyError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "openvm_stark_backend::gkr::prover::NotConstantPolyError"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ columns :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle",
                        "input_layer"
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_stark_backend::gkr::types::Layer::GrandProduct",
                                0
                              |) in
                            let mle :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                  []
                                  [ F ],
                                γ0_0
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ F ]
                                  ],
                                "into_vec",
                                [],
                                [ Ty.path "alloc::alloc::Global" ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ F ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ])
                                    (Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ F ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]),
                                  [
                                    M.read (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [ F ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "new",
                                          [],
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ F ]
                                              ],
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [ F ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 2 ]
                                                          [ F ];
                                                        Ty.path "core::array::TryFromSliceError"
                                                      ],
                                                    "unwrap",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [ F ];
                                                          Ty.path "core::array::TryFromSliceError"
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::convert::TryInto",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [ F ]
                                                        ],
                                                        "try_into",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ F ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::convert::AsRef",
                                                                Ty.apply (Ty.path "slice") [] [ F ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ F ]
                                                                ],
                                                                "as_ref",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ F ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::poly::multi::Mle")
                                                                          []
                                                                          [ F ],
                                                                        [],
                                                                        [],
                                                                        "deref",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          mle
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::gkr::types::Layer::LogUpGeneric",
                                "numerators"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::gkr::types::Layer::LogUpGeneric",
                                "denominators"
                              |) in
                            let numerators :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                  []
                                  [ F ],
                                γ0_0
                              |) in
                            let denominators :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                  []
                                  [ F ],
                                γ0_1
                              |) in
                            M.read (|
                              let~ numerators :
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ F ];
                                        Ty.path "core::array::TryFromSliceError"
                                      ],
                                    "unwrap",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ F ];
                                          Ty.path "core::array::TryFromSliceError"
                                        ],
                                      M.get_trait_method (|
                                        "core::convert::TryInto",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ F ]
                                        ],
                                        "try_into",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                              M.get_trait_method (|
                                                "core::convert::AsRef",
                                                Ty.apply (Ty.path "slice") [] [ F ],
                                                [],
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                "as_ref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::poly::multi::Mle")
                                                          []
                                                          [ F ],
                                                        [],
                                                        [],
                                                        "deref",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, numerators |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              let~ denominators :
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ F ];
                                        Ty.path "core::array::TryFromSliceError"
                                      ],
                                    "unwrap",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ F ];
                                          Ty.path "core::array::TryFromSliceError"
                                        ],
                                      M.get_trait_method (|
                                        "core::convert::TryInto",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ F ]
                                        ],
                                        "try_into",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                              M.get_trait_method (|
                                                "core::convert::AsRef",
                                                Ty.apply (Ty.path "slice") [] [ F ],
                                                [],
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                "as_ref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::poly::multi::Mle")
                                                          []
                                                          [ F ],
                                                        [],
                                                        [],
                                                        "deref",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          denominators
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ F ]
                                      ],
                                    "into_vec",
                                    [],
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ])
                                        (Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]),
                                      [
                                        M.read (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 2 ]
                                                      [ F ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::boxed::Box")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 2 ]
                                                        [ F ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 2 ]
                                                      [ F ]
                                                  ],
                                                Value.Array
                                                  [
                                                    M.read (| numerators |);
                                                    M.read (| denominators |)
                                                  ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "openvm_stark_backend::gkr::types::Layer::LogUpMultiplicities"
                              |) in
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [ mk_str (| "not implemented" |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_stark_backend::gkr::types::Layer::LogUpSingles",
                                "denominators"
                              |) in
                            let denominators :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::poly::multi::Mle")
                                  []
                                  [ F ],
                                γ0_0
                              |) in
                            M.read (|
                              let~ numerators :
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ] :=
                                lib.repeat (|
                                  M.read (|
                                    get_constant (| "p3_field::field::FieldAlgebra::ONE", F |)
                                  |),
                                  Value.Integer IntegerKind.Usize 2
                                |) in
                              let~ denominators :
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ F ];
                                        Ty.path "core::array::TryFromSliceError"
                                      ],
                                    "unwrap",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ F ];
                                          Ty.path "core::array::TryFromSliceError"
                                        ],
                                      M.get_trait_method (|
                                        "core::convert::TryInto",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ F ]
                                        ],
                                        "try_into",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                              M.get_trait_method (|
                                                "core::convert::AsRef",
                                                Ty.apply (Ty.path "slice") [] [ F ],
                                                [],
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                "as_ref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::poly::multi::Mle")
                                                          []
                                                          [ F ],
                                                        [],
                                                        [],
                                                        "deref",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          denominators
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ F ]
                                      ],
                                    "into_vec",
                                    [],
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ])
                                        (Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]),
                                      [
                                        M.read (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 2 ]
                                                      [ F ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::boxed::Box")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 2 ]
                                                        [ F ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 2 ]
                                                      [ F ]
                                                  ],
                                                Value.Array
                                                  [
                                                    M.read (| numerators |);
                                                    M.read (| denominators |)
                                                  ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ];
                        Ty.path "openvm_stark_backend::gkr::prover::NotConstantPolyError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ];
                        Ty.path "openvm_stark_backend::gkr::prover::NotConstantPolyError"
                      ]
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| columns |) ]
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_try_into_mask :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "try_into_mask" (try_into_mask F).
      Admitted.
      Global Typeclasses Opaque try_into_mask.
    End Impl_openvm_stark_backend_gkr_prover_GkrMultivariatePolyOracle_F.
    
    (* StructTuple
      {
        name := "NotConstantPolyError";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_stark_backend_gkr_prover_NotConstantPolyError.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::gkr::prover::NotConstantPolyError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::gkr::prover::NotConstantPolyError" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "NotConstantPolyError" |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_stark_backend_gkr_prover_NotConstantPolyError.
    
    Module Impl_core_error_Error_for_openvm_stark_backend_gkr_prover_NotConstantPolyError.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::gkr::prover::NotConstantPolyError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::error::Error"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_error_Error_for_openvm_stark_backend_gkr_prover_NotConstantPolyError.
    
    Module Impl_core_fmt_Display_for_openvm_stark_backend_gkr_prover_NotConstantPolyError.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::gkr::prover::NotConstantPolyError".
      
      (* Error *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; __formatter ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::gkr::prover::NotConstantPolyError" ],
                self
              |) in
            let __formatter :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                __formatter
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::gkr::prover::NotConstantPolyError"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "polynomial is not constant" |) |)
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_openvm_stark_backend_gkr_prover_NotConstantPolyError.
    
    (*
    pub fn prove_batch<F: Field>(
        challenger: &mut impl FieldChallenger<F>,
        input_layer_by_instance: Vec<Layer<F>>,
    ) -> (GkrBatchProof<F>, GkrArtifact<F>) {
        let n_instances = input_layer_by_instance.len();
        let n_layers_by_instance = input_layer_by_instance
            .iter()
            .map(|l| l.n_variables())
            .collect_vec();
        let n_layers = *n_layers_by_instance.iter().max().unwrap();
    
        // Evaluate all instance circuits and collect the layer values.
        let mut layers_by_instance = input_layer_by_instance
            .into_iter()
            .map(|input_layer| gen_layers(input_layer).into_iter().rev())
            .collect_vec();
    
        let mut output_claims_by_instance = vec![None; n_instances];
        let mut layer_masks_by_instance = (0..n_instances).map(|_| Vec::new()).collect_vec();
        let mut sumcheck_proofs = Vec::new();
    
        let mut ood_point = Vec::new();
        let mut claims_to_verify_by_instance = vec![None; n_instances];
    
        for layer in 0..n_layers {
            let n_remaining_layers = n_layers - layer;
    
            // Check all the instances for output layers.
            for (instance, layers) in layers_by_instance.iter_mut().enumerate() {
                if n_layers_by_instance[instance] == n_remaining_layers {
                    let output_layer = layers.next().unwrap();
                    let output_layer_values = output_layer.try_into_output_layer_values().unwrap();
                    claims_to_verify_by_instance[instance] = Some(output_layer_values.clone());
                    output_claims_by_instance[instance] = Some(output_layer_values);
                }
            }
    
            // Seed the channel with layer claims.
            for claims_to_verify in claims_to_verify_by_instance.iter().flatten() {
                challenger.observe_slice(claims_to_verify);
            }
    
            let eq_evals = HypercubeEqEvals::eval(&ood_point);
            let sumcheck_alpha = challenger.sample();
            let instance_lambda = challenger.sample();
    
            let mut sumcheck_oracles = Vec::new();
            let mut sumcheck_claims = Vec::new();
            let mut sumcheck_instances = Vec::new();
    
            // Create the multivariate polynomial oracles used with sumcheck.
            for (instance, claims_to_verify) in claims_to_verify_by_instance.iter().enumerate() {
                if let Some(claims_to_verify) = claims_to_verify {
                    let layer = layers_by_instance[instance].next().unwrap();
    
                    sumcheck_oracles.push(GkrMultivariatePolyOracle {
                        eq_evals: &eq_evals,
                        input_layer: layer,
                        eq_fixed_var_correction: F::ONE,
                        lambda: instance_lambda,
                    });
                    sumcheck_claims.push(random_linear_combination(claims_to_verify, instance_lambda));
                    sumcheck_instances.push(instance);
                }
            }
    
            let (
                sumcheck_proof,
                SumcheckArtifacts {
                    evaluation_point: sumcheck_ood_point,
                    constant_poly_oracles,
                    ..
                },
            ) = sumcheck::prove_batch(
                sumcheck_claims,
                sumcheck_oracles,
                sumcheck_alpha,
                challenger,
            );
    
            sumcheck_proofs.push(sumcheck_proof);
    
            let masks = constant_poly_oracles
                .into_iter()
                .map(|oracle| oracle.try_into_mask().unwrap())
                .collect_vec();
    
            // Seed the channel with the layer masks.
            for (&instance, mask) in zip(&sumcheck_instances, &masks) {
                for column in mask.columns() {
                    challenger.observe_slice(column);
                }
                layer_masks_by_instance[instance].push(mask.clone());
            }
    
            let challenge = challenger.sample();
            ood_point = sumcheck_ood_point;
            ood_point.push(challenge);
    
            // Set the claims to prove in the layer above.
            for (instance, mask) in zip(sumcheck_instances, masks) {
                claims_to_verify_by_instance[instance] = Some(mask.reduce_at_point(challenge));
            }
        }
    
        let output_claims_by_instance = output_claims_by_instance
            .into_iter()
            .map(Option::unwrap)
            .collect();
    
        let claims_to_verify_by_instance = claims_to_verify_by_instance
            .into_iter()
            .map(Option::unwrap)
            .collect();
    
        let proof = GkrBatchProof {
            sumcheck_proofs,
            layer_masks_by_instance,
            output_claims_by_instance,
        };
    
        let artifact = GkrArtifact {
            ood_point,
            claims_to_verify_by_instance,
            n_variables_by_instance: n_layers_by_instance,
        };
    
        (proof, artifact)
    }
    *)
    Definition prove_batch (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F; impl_FieldChallenger_F_ ], [ challenger; input_layer_by_instance ] =>
        ltac:(M.monadic
          (let challenger :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ impl_FieldChallenger_F_ ], challenger |) in
          let input_layer_by_instance :=
            M.alloc (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                  Ty.path "alloc::alloc::Global"
                ],
              input_layer_by_instance
            |) in
          M.read (|
            let~ n_instances : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "len",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, input_layer_by_instance |) ]
              |) in
            let~ n_layers_by_instance :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ]
                            ]
                        ]
                        (Ty.path "usize")
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.path "usize";
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ]
                            ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, input_layer_by_instance |) ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path "usize",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                          []
                                          [ F ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let l :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::gkr::types::Layer")
                                                  []
                                                  [ F ]
                                              ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                              []
                                              [ F ],
                                            "n_variables",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| l |) |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ n_layers : Ty.path "usize" :=
              M.read (|
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                      "unwrap",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "max",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, n_layers_by_instance |) ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |) in
            let~ layers_by_instance :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::rev::Rev")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::rev::Rev")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ]
                        (Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ])
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ]
                          (Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ];
                        Ty.function
                          [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ]
                          (Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| input_layer_by_instance |) ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                            []
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                      []
                                      [ F ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let input_layer :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                              []
                                              [ F ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::rev::Rev")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::gkr::types::Layer")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::gkr::types::Layer")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "rev",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::gkr::types::Layer")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::gkr::types::Layer")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "into_iter",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::gkr::types::Layer")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_function (|
                                                    "openvm_stark_backend::gkr::prover::gen_layers",
                                                    [],
                                                    [ F ]
                                                  |),
                                                  [ M.read (| input_layer |) ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ output_claims_by_instance :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_function (|
                  "alloc::vec::from_elem",
                  [],
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ]
                |),
                [
                  Value.StructTuple
                    "core::option::Option::None"
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                    [];
                  M.read (| n_instances |)
                ]
              |) in
            let~ layer_masks_by_instance :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.function
                        [ Ty.path "usize" ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ])
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.path "usize" ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::gkr::types::GkrMask")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrMask") [] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [ Ty.path "usize" ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::gkr::types::GkrMask")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      Value.mkStructRecord
                        "core::ops::range::Range"
                        []
                        [ Ty.path "usize" ]
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_", M.read (| n_instances |))
                        ];
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::gkr::types::GkrMask")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::gkr::types::GkrMask")
                                                []
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::gkr::types::GkrMask")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            [],
                                            []
                                          |),
                                          []
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ sumcheck_proofs :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "openvm_stark_backend::sumcheck::SumcheckProof") [] [ F ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "openvm_stark_backend::sumcheck::SumcheckProof") [] [ F ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "openvm_stark_backend::sumcheck::SumcheckProof") [] [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "new",
                  [],
                  []
                |),
                []
              |) in
            let~ ood_point :
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] :=
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  "new",
                  [],
                  []
                |),
                []
              |) in
            let~ claims_to_verify_by_instance :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_function (|
                  "alloc::vec::from_elem",
                  [],
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ]
                |),
                [
                  Value.StructTuple
                    "core::option::Option::None"
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                    [];
                  M.read (| n_instances |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [
                                ("start", Value.Integer IntegerKind.Usize 0);
                                ("end_", M.read (| n_layers |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let layer := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ n_remaining_layers : Ty.path "usize" :=
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [ M.read (| n_layers |); M.read (| layer |) ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::rev::Rev")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::gkr::types::Layer")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::rev::Rev")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::into_iter::IntoIter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::gkr::types::Layer")
                                                                              []
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::rev::Rev")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::into_iter::IntoIter")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::gkr::types::Layer")
                                                                                []
                                                                                [ F ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::rev::Rev")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::into_iter::IntoIter")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::gkr::types::Layer")
                                                                                  []
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::rev::Rev")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::into_iter::IntoIter")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::gkr::types::Layer")
                                                                                []
                                                                                [ F ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "enumerate",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::rev::Rev")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::into_iter::IntoIter")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::gkr::types::Layer")
                                                                                  []
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::rev::Rev")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::gkr::types::Layer")
                                                                                    []
                                                                                    [ F ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      "iter_mut",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::rev::Rev")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::into_iter::IntoIter")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_stark_backend::gkr::types::Layer")
                                                                                              []
                                                                                              [ F ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::DerefMut",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::rev::Rev")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::into_iter::IntoIter")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::gkr::types::Layer")
                                                                                            []
                                                                                            [ F ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "deref_mut",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                layers_by_instance
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::rev::Rev")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::gkr::types::Layer")
                                                                                    []
                                                                                    [ F ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                M.loop (|
                                                                  Ty.tuple [],
                                                                  ltac:(M.monadic
                                                                    (let~ _ : Ty.tuple [] :=
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.apply
                                                                                    (Ty.path "&mut")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::rev::Rev")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::into_iter::IntoIter")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::gkr::types::Layer")
                                                                                                []
                                                                                                [ F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::rev::Rev")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::into_iter::IntoIter")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "openvm_stark_backend::gkr::types::Layer")
                                                                                                  []
                                                                                                  [
                                                                                                    F
                                                                                                  ];
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::IterMut")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::rev::Rev")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::into_iter::IntoIter")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::gkr::types::Layer")
                                                                                                []
                                                                                                [ F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "next",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    iter
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.is_struct_tuple (|
                                                                                  γ,
                                                                                  "core::option::Option::None"
                                                                                |) in
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let γ1_0 :=
                                                                                M.SubPointer.get_tuple_field (|
                                                                                  γ0_0,
                                                                                  0
                                                                                |) in
                                                                              let γ1_1 :=
                                                                                M.SubPointer.get_tuple_field (|
                                                                                  γ0_0,
                                                                                  1
                                                                                |) in
                                                                              let instance :=
                                                                                M.copy (|
                                                                                  Ty.path "usize",
                                                                                  γ1_0
                                                                                |) in
                                                                              let layers :=
                                                                                M.copy (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&mut")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::rev::Rev")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::into_iter::IntoIter")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::gkr::types::Layer")
                                                                                                []
                                                                                                [ F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ]
                                                                                    ],
                                                                                  γ1_1
                                                                                |) in
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ :=
                                                                                        M.use
                                                                                          (M.alloc (|
                                                                                            Ty.path
                                                                                              "bool",
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              BinOp.eq,
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.deref (|
                                                                                                    M.call_closure (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ],
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::index::Index",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize";
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ],
                                                                                                        "index",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          n_layers_by_instance
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          instance
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  n_remaining_layers
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)) in
                                                                                      let _ :=
                                                                                        is_constant_or_break_match (|
                                                                                          M.read (|
                                                                                            γ
                                                                                          |),
                                                                                          Value.Bool
                                                                                            true
                                                                                        |) in
                                                                                      M.read (|
                                                                                        let~
                                                                                              output_layer :
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_stark_backend::gkr::types::Layer")
                                                                                              []
                                                                                              [ F
                                                                                              ] :=
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_stark_backend::gkr::types::Layer")
                                                                                              []
                                                                                              [ F ],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::option::Option")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::gkr::types::Layer")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ],
                                                                                              "unwrap",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "openvm_stark_backend::gkr::types::Layer")
                                                                                                      []
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::adapters::rev::Rev")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::into_iter::IntoIter")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "openvm_stark_backend::gkr::types::Layer")
                                                                                                            []
                                                                                                            [
                                                                                                              F
                                                                                                            ];
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ]
                                                                                                    ],
                                                                                                  [],
                                                                                                  [],
                                                                                                  "next",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.MutRef,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        layers
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |) in
                                                                                        let~
                                                                                              output_layer_values :
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                F;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ] :=
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                F;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      F;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "openvm_stark_backend::gkr::types::NotOutputLayerError"
                                                                                                ],
                                                                                              "unwrap",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      []
                                                                                                      [
                                                                                                        F;
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "openvm_stark_backend::gkr::types::NotOutputLayerError"
                                                                                                  ],
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::gkr::types::Layer")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                  "try_into_output_layer_values",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    output_layer
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |) in
                                                                                        let~ _ :
                                                                                            Ty.tuple
                                                                                              [] :=
                                                                                          M.write (|
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&mut")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::option::Option")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            F;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::IndexMut",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::option::Option")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              F;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index_mut",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.MutRef,
                                                                                                    claims_to_verify_by_instance
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    instance
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |),
                                                                                            Value.StructTuple
                                                                                              "core::option::Option::Some"
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      F;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  M.get_trait_method (|
                                                                                                    "core::clone::Clone",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      []
                                                                                                      [
                                                                                                        F;
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ],
                                                                                                    [],
                                                                                                    [],
                                                                                                    "clone",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      output_layer_values
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |) in
                                                                                        let~ _ :
                                                                                            Ty.tuple
                                                                                              [] :=
                                                                                          M.write (|
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&mut")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::option::Option")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            F;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::IndexMut",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::option::Option")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              F;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index_mut",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.MutRef,
                                                                                                    output_claims_by_instance
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    instance
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |),
                                                                                            Value.StructTuple
                                                                                              "core::option::Option::Some"
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                              [
                                                                                                M.read (|
                                                                                                  output_layer_values
                                                                                                |)
                                                                                              ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (Value.Tuple
                                                                                        []))
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)))
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |))
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::flatten::Flatten")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::flatten::Flatten")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::flatten::Flatten")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::flatten::Flatten")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "flatten",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  F;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      "iter",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            F;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          F;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "deref",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                claims_to_verify_by_instance
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::flatten::Flatten")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  F;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                M.loop (|
                                                                  Ty.tuple [],
                                                                  ltac:(M.monadic
                                                                    (let~ _ : Ty.tuple [] :=
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      F;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        F;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::flatten::Flatten")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              F;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "next",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    iter
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.is_struct_tuple (|
                                                                                  γ,
                                                                                  "core::option::Option::None"
                                                                                |) in
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let
                                                                                    claims_to_verify :=
                                                                                M.copy (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          F;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ],
                                                                                  γ0_0
                                                                                |) in
                                                                              M.read (|
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  M.call_closure (|
                                                                                    Ty.tuple [],
                                                                                    M.get_trait_method (|
                                                                                      "p3_challenger::CanObserve",
                                                                                      impl_FieldChallenger_F_,
                                                                                      [],
                                                                                      [ F ],
                                                                                      "observe_slice",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            challenger
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "slice")
                                                                                                  []
                                                                                                  [
                                                                                                    F
                                                                                                  ]
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::deref::Deref",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              [],
                                                                                              "deref",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    claims_to_verify
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)))
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |))
                                                |) in
                                              let~ eq_evals :
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                                                    []
                                                    [ F ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                                                    []
                                                    [ F ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::gkr::prover::HypercubeEqEvals")
                                                      []
                                                      [ F ],
                                                    "eval",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ F; Ty.path "alloc::alloc::Global" ],
                                                            [],
                                                            [],
                                                            "deref",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  ood_point
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              let~ sumcheck_alpha : F :=
                                                M.call_closure (|
                                                  F,
                                                  M.get_trait_method (|
                                                    "p3_challenger::CanSample",
                                                    impl_FieldChallenger_F_,
                                                    [],
                                                    [ F ],
                                                    "sample",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| challenger |) |)
                                                    |)
                                                  ]
                                                |) in
                                              let~ instance_lambda : F :=
                                                M.call_closure (|
                                                  F,
                                                  M.get_trait_method (|
                                                    "p3_challenger::CanSample",
                                                    impl_FieldChallenger_F_,
                                                    [],
                                                    [ F ],
                                                    "sample",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| challenger |) |)
                                                    |)
                                                  ]
                                                |) in
                                              let~ sumcheck_oracles :
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                          []
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  []
                                                |) in
                                              let~ sumcheck_claims :
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ],
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  []
                                                |) in
                                              let~ sumcheck_instances :
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  []
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "enumerate",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  F;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      "iter",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            F;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          F;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "deref",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                claims_to_verify_by_instance
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  F;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                M.loop (|
                                                                  Ty.tuple [],
                                                                  ltac:(M.monadic
                                                                    (let~ _ : Ty.tuple [] :=
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              F;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::option::Option")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                F;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              F;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "next",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    iter
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.is_struct_tuple (|
                                                                                  γ,
                                                                                  "core::option::Option::None"
                                                                                |) in
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let γ1_0 :=
                                                                                M.SubPointer.get_tuple_field (|
                                                                                  γ0_0,
                                                                                  0
                                                                                |) in
                                                                              let γ1_1 :=
                                                                                M.SubPointer.get_tuple_field (|
                                                                                  γ0_0,
                                                                                  1
                                                                                |) in
                                                                              let instance :=
                                                                                M.copy (|
                                                                                  Ty.path "usize",
                                                                                  γ1_0
                                                                                |) in
                                                                              let
                                                                                    claims_to_verify :=
                                                                                M.copy (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              F;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ]
                                                                                    ],
                                                                                  γ1_1
                                                                                |) in
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ :=
                                                                                        claims_to_verify in
                                                                                      let γ :=
                                                                                        M.read (|
                                                                                          γ
                                                                                        |) in
                                                                                      let γ1_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      let
                                                                                            claims_to_verify :=
                                                                                        M.alloc (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ],
                                                                                          γ1_0
                                                                                        |) in
                                                                                      M.read (|
                                                                                        let~ layer :
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_stark_backend::gkr::types::Layer")
                                                                                              []
                                                                                              [ F
                                                                                              ] :=
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_stark_backend::gkr::types::Layer")
                                                                                              []
                                                                                              [ F ],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::option::Option")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::gkr::types::Layer")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ],
                                                                                              "unwrap",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "openvm_stark_backend::gkr::types::Layer")
                                                                                                      []
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::adapters::rev::Rev")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::into_iter::IntoIter")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "openvm_stark_backend::gkr::types::Layer")
                                                                                                            []
                                                                                                            [
                                                                                                              F
                                                                                                            ];
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ]
                                                                                                    ],
                                                                                                  [],
                                                                                                  [],
                                                                                                  "next",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.MutRef,
                                                                                                    M.deref (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&mut")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::iter::adapters::rev::Rev")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::into_iter::IntoIter")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "openvm_stark_backend::gkr::types::Layer")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ];
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ],
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::index::IndexMut",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::iter::adapters::rev::Rev")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::vec::into_iter::IntoIter")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "openvm_stark_backend::gkr::types::Layer")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ];
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ]
                                                                                                                ];
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          [],
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize"
                                                                                                          ],
                                                                                                          "index_mut",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            layers_by_instance
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            instance
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |) in
                                                                                        let~ _ :
                                                                                            Ty.tuple
                                                                                              [] :=
                                                                                          M.call_closure (|
                                                                                            Ty.tuple
                                                                                              [],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              "push",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.MutRef,
                                                                                                sumcheck_oracles
                                                                                              |);
                                                                                              Value.mkStructRecord
                                                                                                "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle"
                                                                                                []
                                                                                                [ F
                                                                                                ]
                                                                                                [
                                                                                                  ("eq_evals",
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          eq_evals
                                                                                                        |)
                                                                                                      |)
                                                                                                    |));
                                                                                                  ("input_layer",
                                                                                                    M.read (|
                                                                                                      layer
                                                                                                    |));
                                                                                                  ("eq_fixed_var_correction",
                                                                                                    M.read (|
                                                                                                      get_constant (|
                                                                                                        "p3_field::field::FieldAlgebra::ONE",
                                                                                                        F
                                                                                                      |)
                                                                                                    |));
                                                                                                  ("lambda",
                                                                                                    M.read (|
                                                                                                      instance_lambda
                                                                                                    |))
                                                                                                ]
                                                                                            ]
                                                                                          |) in
                                                                                        let~ _ :
                                                                                            Ty.tuple
                                                                                              [] :=
                                                                                          M.call_closure (|
                                                                                            Ty.tuple
                                                                                              [],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              "push",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.MutRef,
                                                                                                sumcheck_claims
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                F,
                                                                                                M.get_function (|
                                                                                                  "openvm_stark_backend::poly::uni::random_linear_combination",
                                                                                                  [],
                                                                                                  [
                                                                                                    F
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "slice")
                                                                                                              []
                                                                                                              [
                                                                                                                F
                                                                                                              ]
                                                                                                          ],
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::deref::Deref",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              F;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          [],
                                                                                                          [],
                                                                                                          "deref",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                claims_to_verify
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    instance_lambda
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |) in
                                                                                        let~ _ :
                                                                                            Ty.tuple
                                                                                              [] :=
                                                                                          M.call_closure (|
                                                                                            Ty.tuple
                                                                                              [],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              "push",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.MutRef,
                                                                                                sumcheck_instances
                                                                                              |);
                                                                                              M.read (|
                                                                                                instance
                                                                                              |)
                                                                                            ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (Value.Tuple
                                                                                        []))
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)))
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |))
                                                |) in
                                              M.alloc (|
                                                Ty.tuple [],
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::sumcheck::SumcheckProof")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::sumcheck::SumcheckArtifacts")
                                                          []
                                                          [
                                                            F;
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                              []
                                                              [ F ]
                                                          ]
                                                      ],
                                                    M.call_closure (|
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::sumcheck::SumcheckProof")
                                                            []
                                                            [ F ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::sumcheck::SumcheckArtifacts")
                                                            []
                                                            [
                                                              F;
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                []
                                                                [ F ]
                                                            ]
                                                        ],
                                                      M.get_function (|
                                                        "openvm_stark_backend::sumcheck::prove_batch",
                                                        [],
                                                        [
                                                          F;
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                            []
                                                            [ F ];
                                                          impl_FieldChallenger_F_
                                                        ]
                                                      |),
                                                      [
                                                        M.read (| sumcheck_claims |);
                                                        M.read (| sumcheck_oracles |);
                                                        M.read (| sumcheck_alpha |);
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (| M.read (| challenger |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let sumcheck_proof :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::sumcheck::SumcheckProof")
                                                              []
                                                              [ F ],
                                                            γ0_0
                                                          |) in
                                                        let γ1_0 :=
                                                          M.SubPointer.get_struct_record_field (|
                                                            γ0_1,
                                                            "openvm_stark_backend::sumcheck::SumcheckArtifacts",
                                                            "evaluation_point"
                                                          |) in
                                                        let γ1_1 :=
                                                          M.SubPointer.get_struct_record_field (|
                                                            γ0_1,
                                                            "openvm_stark_backend::sumcheck::SumcheckArtifacts",
                                                            "constant_poly_oracles"
                                                          |) in
                                                        let sumcheck_ood_point :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ F; Ty.path "alloc::alloc::Global" ],
                                                            γ1_0
                                                          |) in
                                                        let constant_poly_oracles :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                  []
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            γ1_1
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::sumcheck::SumcheckProof")
                                                                      []
                                                                      [ F ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "push",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  sumcheck_proofs
                                                                |);
                                                                M.read (| sumcheck_proof |)
                                                              ]
                                                            |) in
                                                          let~ masks :
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::gkr::types::GkrMask")
                                                                    []
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ] :=
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::gkr::types::GkrMask")
                                                                    []
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              M.get_trait_method (|
                                                                "itertools::Itertools",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::map::Map")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::vec::into_iter::IntoIter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                          []
                                                                          [ F ]
                                                                      ]
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::gkr::types::GkrMask")
                                                                        []
                                                                        [ F ])
                                                                  ],
                                                                [],
                                                                [],
                                                                "collect_vec",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                            []
                                                                            [ F ]
                                                                        ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::gkr::types::GkrMask")
                                                                          []
                                                                          [ F ])
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::vec::into_iter::IntoIter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "map",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::gkr::types::GkrMask")
                                                                        []
                                                                        [ F ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                            []
                                                                            [ F ]
                                                                        ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::gkr::types::GkrMask")
                                                                          []
                                                                          [ F ])
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                              []
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (|
                                                                          constant_poly_oracles
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            ltac:(M.monadic
                                                                              (M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::gkr::types::GkrMask")
                                                                                  []
                                                                                  [ F ],
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                                    []
                                                                                    [ F ],
                                                                                  α0
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let oracle :=
                                                                                        M.copy (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                                            []
                                                                                            [ F ],
                                                                                          γ
                                                                                        |) in
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "openvm_stark_backend::gkr::types::GkrMask")
                                                                                          []
                                                                                          [ F ],
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                []
                                                                                                [ F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "openvm_stark_backend::gkr::prover::NotConstantPolyError"
                                                                                            ],
                                                                                          "unwrap",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::result::Result")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                  []
                                                                                                  [
                                                                                                    F
                                                                                                  ];
                                                                                                Ty.path
                                                                                                  "openvm_stark_backend::gkr::prover::NotConstantPolyError"
                                                                                              ],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::gkr::prover::GkrMultivariatePolyOracle")
                                                                                                []
                                                                                                [ F
                                                                                                ],
                                                                                              "try_into_mask",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                oracle
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)))
                                                                                ]
                                                                              |)))
                                                                          | _ =>
                                                                            M.impossible
                                                                              "wrong number of arguments"
                                                                          end))
                                                                  ]
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.read (|
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.tuple [],
                                                                  M.match_operator (|
                                                                    Ty.tuple [],
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::zip::Zip")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [ Ty.path "usize" ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::gkr::types::GkrMask")
                                                                                []
                                                                                [ F ]
                                                                            ]
                                                                        ],
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [ Ty.path "usize" ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::gkr::types::GkrMask")
                                                                                  []
                                                                                  [ F ]
                                                                              ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::collect::IntoIterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::zip::Zip")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                []
                                                                                [ Ty.path "usize" ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::gkr::types::GkrMask")
                                                                                    []
                                                                                    [ F ]
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "into_iter",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::zip::Zip")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::gkr::types::GkrMask")
                                                                                      []
                                                                                      [ F ]
                                                                                  ]
                                                                              ],
                                                                            M.get_function (|
                                                                              "core::iter::adapters::zip::zip",
                                                                              [],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "openvm_stark_backend::gkr::types::GkrMask")
                                                                                          []
                                                                                          [ F ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                sumcheck_instances
                                                                              |);
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                masks
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let iter :=
                                                                            M.copy (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::zip::Zip")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::gkr::types::GkrMask")
                                                                                        []
                                                                                        [ F ]
                                                                                    ]
                                                                                ],
                                                                              γ
                                                                            |) in
                                                                          M.read (|
                                                                            M.loop (|
                                                                              Ty.tuple [],
                                                                              ltac:(M.monadic
                                                                                (let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  M.match_operator (|
                                                                                    Ty.tuple [],
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ],
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::option::Option")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ];
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                      []
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ],
                                                                                        M.get_trait_method (|
                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::zip::Zip")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::slice::iter::Iter")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::slice::iter::Iter")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ]
                                                                                            ],
                                                                                          [],
                                                                                          [],
                                                                                          "next",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            M.deref (|
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.MutRef,
                                                                                                iter
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let _ :=
                                                                                            M.is_struct_tuple (|
                                                                                              γ,
                                                                                              "core::option::Option::None"
                                                                                            |) in
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.break (||)
                                                                                            |)
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                              γ,
                                                                                              "core::option::Option::Some",
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ1_0 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_0,
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ1_1 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_0,
                                                                                              1
                                                                                            |) in
                                                                                          let
                                                                                                γ1_0 :=
                                                                                            M.read (|
                                                                                              γ1_0
                                                                                            |) in
                                                                                          let
                                                                                                instance :=
                                                                                            M.copy (|
                                                                                              Ty.path
                                                                                                "usize",
                                                                                              γ1_0
                                                                                            |) in
                                                                                          let
                                                                                                mask :=
                                                                                            M.copy (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ],
                                                                                              γ1_1
                                                                                            |) in
                                                                                          M.read (|
                                                                                            let~ _ :
                                                                                                Ty.tuple
                                                                                                  [] :=
                                                                                              M.read (|
                                                                                                M.use
                                                                                                  (M.alloc (|
                                                                                                    Ty.tuple
                                                                                                      [],
                                                                                                    M.match_operator (|
                                                                                                      Ty.tuple
                                                                                                        [],
                                                                                                      M.alloc (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::Iter")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "array")
                                                                                                              [
                                                                                                                Value.Integer
                                                                                                                  IntegerKind.Usize
                                                                                                                  2
                                                                                                              ]
                                                                                                              [
                                                                                                                F
                                                                                                              ]
                                                                                                          ],
                                                                                                        M.call_closure (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::Iter")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "array")
                                                                                                                [
                                                                                                                  Value.Integer
                                                                                                                    IntegerKind.Usize
                                                                                                                    2
                                                                                                                ]
                                                                                                                [
                                                                                                                  F
                                                                                                                ]
                                                                                                            ],
                                                                                                          M.get_trait_method (|
                                                                                                            "core::iter::traits::collect::IntoIterator",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "array")
                                                                                                                      [
                                                                                                                        Value.Integer
                                                                                                                          IntegerKind.Usize
                                                                                                                          2
                                                                                                                      ]
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ],
                                                                                                            [],
                                                                                                            [],
                                                                                                            "into_iter",
                                                                                                            [],
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "slice")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "array")
                                                                                                                        [
                                                                                                                          Value.Integer
                                                                                                                            IntegerKind.Usize
                                                                                                                            2
                                                                                                                        ]
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ],
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ],
                                                                                                                "columns",
                                                                                                                [],
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  M.deref (|
                                                                                                                    M.read (|
                                                                                                                      mask
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (let
                                                                                                                  iter :=
                                                                                                              M.copy (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::slice::iter::Iter")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "array")
                                                                                                                      [
                                                                                                                        Value.Integer
                                                                                                                          IntegerKind.Usize
                                                                                                                          2
                                                                                                                      ]
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                γ
                                                                                                              |) in
                                                                                                            M.read (|
                                                                                                              M.loop (|
                                                                                                                Ty.tuple
                                                                                                                  [],
                                                                                                                ltac:(M.monadic
                                                                                                                  (let~
                                                                                                                        _ :
                                                                                                                      Ty.tuple
                                                                                                                        [] :=
                                                                                                                    M.match_operator (|
                                                                                                                      Ty.tuple
                                                                                                                        [],
                                                                                                                      M.alloc (|
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::option::Option")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "array")
                                                                                                                                  [
                                                                                                                                    Value.Integer
                                                                                                                                      IntegerKind.Usize
                                                                                                                                      2
                                                                                                                                  ]
                                                                                                                                  [
                                                                                                                                    F
                                                                                                                                  ]
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::option::Option")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "array")
                                                                                                                                    [
                                                                                                                                      Value.Integer
                                                                                                                                        IntegerKind.Usize
                                                                                                                                        2
                                                                                                                                    ]
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                            ],
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::slice::iter::Iter")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "array")
                                                                                                                                  [
                                                                                                                                    Value.Integer
                                                                                                                                      IntegerKind.Usize
                                                                                                                                      2
                                                                                                                                  ]
                                                                                                                                  [
                                                                                                                                    F
                                                                                                                                  ]
                                                                                                                              ],
                                                                                                                            [],
                                                                                                                            [],
                                                                                                                            "next",
                                                                                                                            [],
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.MutRef,
                                                                                                                              M.deref (|
                                                                                                                                M.borrow (|
                                                                                                                                  Pointer.Kind.MutRef,
                                                                                                                                  iter
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        fun
                                                                                                                            γ =>
                                                                                                                          ltac:(M.monadic
                                                                                                                            (let
                                                                                                                                  _ :=
                                                                                                                              M.is_struct_tuple (|
                                                                                                                                γ,
                                                                                                                                "core::option::Option::None"
                                                                                                                              |) in
                                                                                                                            M.never_to_any (|
                                                                                                                              M.read (|
                                                                                                                                M.break (||)
                                                                                                                              |)
                                                                                                                            |)));
                                                                                                                        fun
                                                                                                                            γ =>
                                                                                                                          ltac:(M.monadic
                                                                                                                            (let
                                                                                                                                  γ0_0 :=
                                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                                γ,
                                                                                                                                "core::option::Option::Some",
                                                                                                                                0
                                                                                                                              |) in
                                                                                                                            let
                                                                                                                                  column :=
                                                                                                                              M.copy (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "&")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "array")
                                                                                                                                      [
                                                                                                                                        Value.Integer
                                                                                                                                          IntegerKind.Usize
                                                                                                                                          2
                                                                                                                                      ]
                                                                                                                                      [
                                                                                                                                        F
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                γ0_0
                                                                                                                              |) in
                                                                                                                            M.read (|
                                                                                                                              let~
                                                                                                                                    _ :
                                                                                                                                  Ty.tuple
                                                                                                                                    [] :=
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.tuple
                                                                                                                                    [],
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "p3_challenger::CanObserve",
                                                                                                                                    impl_FieldChallenger_F_,
                                                                                                                                    [],
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ],
                                                                                                                                    "observe_slice",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.MutRef,
                                                                                                                                      M.deref (|
                                                                                                                                        M.read (|
                                                                                                                                          challenger
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |);
                                                                                                                                    M.call_closure (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "slice")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              F
                                                                                                                                            ]
                                                                                                                                        ],
                                                                                                                                      M.pointer_coercion
                                                                                                                                        M.PointerCoercion.Unsize
                                                                                                                                        (Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "array")
                                                                                                                                              [
                                                                                                                                                Value.Integer
                                                                                                                                                  IntegerKind.Usize
                                                                                                                                                  2
                                                                                                                                              ]
                                                                                                                                              [
                                                                                                                                                F
                                                                                                                                              ]
                                                                                                                                          ])
                                                                                                                                        (Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "slice")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                F
                                                                                                                                              ]
                                                                                                                                          ]),
                                                                                                                                      [
                                                                                                                                        M.borrow (|
                                                                                                                                          Pointer.Kind.Ref,
                                                                                                                                          M.deref (|
                                                                                                                                            M.read (|
                                                                                                                                              column
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |) in
                                                                                                                              M.alloc (|
                                                                                                                                Ty.tuple
                                                                                                                                  [],
                                                                                                                                Value.Tuple
                                                                                                                                  []
                                                                                                                              |)
                                                                                                                            |)))
                                                                                                                      ]
                                                                                                                    |) in
                                                                                                                  M.alloc (|
                                                                                                                    Ty.tuple
                                                                                                                      [],
                                                                                                                    Value.Tuple
                                                                                                                      []
                                                                                                                  |)))
                                                                                                              |)
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  |))
                                                                                              |) in
                                                                                            let~ _ :
                                                                                                Ty.tuple
                                                                                                  [] :=
                                                                                              M.call_closure (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                        []
                                                                                                        [
                                                                                                          F
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  "push",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.MutRef,
                                                                                                    M.deref (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&mut")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ],
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::index::IndexMut",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      F
                                                                                                                    ];
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ];
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          [],
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize"
                                                                                                          ],
                                                                                                          "index_mut",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            layer_masks_by_instance
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            instance
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                      []
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::clone::Clone",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                        []
                                                                                                        [
                                                                                                          F
                                                                                                        ],
                                                                                                      [],
                                                                                                      [],
                                                                                                      "clone",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.read (|
                                                                                                            mask
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)))
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                |))
                                                            |) in
                                                          let~ challenge : F :=
                                                            M.call_closure (|
                                                              F,
                                                              M.get_trait_method (|
                                                                "p3_challenger::CanSample",
                                                                impl_FieldChallenger_F_,
                                                                [],
                                                                [ F ],
                                                                "sample",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (|
                                                                    M.read (| challenger |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              ood_point,
                                                              M.read (| sumcheck_ood_point |)
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "push",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  ood_point
                                                                |);
                                                                M.read (| challenge |)
                                                              ]
                                                            |) in
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.tuple [],
                                                              M.match_operator (|
                                                                Ty.tuple [],
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::gkr::types::GkrMask")
                                                                            []
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::zip::Zip")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::into_iter::IntoIter")
                                                                          []
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::into_iter::IntoIter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::gkr::types::GkrMask")
                                                                              []
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::collect::IntoIterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::zip::Zip")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::into_iter::IntoIter")
                                                                            []
                                                                            [
                                                                              Ty.path "usize";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::into_iter::IntoIter")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::gkr::types::GkrMask")
                                                                                []
                                                                                [ F ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "into_iter",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::into_iter::IntoIter")
                                                                              []
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::into_iter::IntoIter")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::gkr::types::GkrMask")
                                                                                  []
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        M.get_function (|
                                                                          "core::iter::adapters::zip::zip",
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::gkr::types::GkrMask")
                                                                                  []
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            sumcheck_instances
                                                                          |);
                                                                          M.read (| masks |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let iter :=
                                                                        M.copy (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::zip::Zip")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                []
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::gkr::types::GkrMask")
                                                                                    []
                                                                                    [ F ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ],
                                                                          γ
                                                                        |) in
                                                                      M.read (|
                                                                        M.loop (|
                                                                          Ty.tuple [],
                                                                          ltac:(M.monadic
                                                                            (let~ _ : Ty.tuple [] :=
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::gkr::types::GkrMask")
                                                                                            []
                                                                                            [ F ]
                                                                                        ]
                                                                                    ],
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_stark_backend::gkr::types::GkrMask")
                                                                                              []
                                                                                              [ F ]
                                                                                          ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::zip::Zip")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::into_iter::IntoIter")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::into_iter::IntoIter")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                []
                                                                                                [ F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.never_to_any (|
                                                                                        M.read (|
                                                                                          M.break (||)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      let γ1_0 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ0_0,
                                                                                          0
                                                                                        |) in
                                                                                      let γ1_1 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ0_0,
                                                                                          1
                                                                                        |) in
                                                                                      let
                                                                                            instance :=
                                                                                        M.copy (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          γ1_0
                                                                                        |) in
                                                                                      let mask :=
                                                                                        M.copy (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::gkr::types::GkrMask")
                                                                                            []
                                                                                            [ F ],
                                                                                          γ1_1
                                                                                        |) in
                                                                                      M.read (|
                                                                                        let~ _ :
                                                                                            Ty.tuple
                                                                                              [] :=
                                                                                          M.write (|
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&mut")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::option::Option")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            F;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::IndexMut",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::option::Option")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              F;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index_mut",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.MutRef,
                                                                                                    claims_to_verify_by_instance
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    instance
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |),
                                                                                            Value.StructTuple
                                                                                              "core::option::Option::Some"
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      F;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "openvm_stark_backend::gkr::types::GkrMask")
                                                                                                      []
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    "reduce_at_point",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      mask
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      challenge
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.tuple [],
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)
                                                                      |)))
                                                                ]
                                                              |)
                                                            |))
                                                        |)))
                                                  ]
                                                |)
                                              |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ output_claims_by_instance :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| output_claims_by_instance |) ]
                      |);
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        "unwrap",
                        [],
                        []
                      |)
                    ]
                  |)
                ]
              |) in
            let~ claims_to_verify_by_instance :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| claims_to_verify_by_instance |) ]
                      |);
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        "unwrap",
                        [],
                        []
                      |)
                    ]
                  |)
                ]
              |) in
            let~ proof :
                Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrBatchProof") [] [ F ] :=
              Value.mkStructRecord
                "openvm_stark_backend::gkr::types::GkrBatchProof"
                []
                [ F ]
                [
                  ("sumcheck_proofs", M.read (| sumcheck_proofs |));
                  ("layer_masks_by_instance", M.read (| layer_masks_by_instance |));
                  ("output_claims_by_instance", M.read (| output_claims_by_instance |))
                ] in
            let~ artifact :
                Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrArtifact") [] [ F ] :=
              Value.mkStructRecord
                "openvm_stark_backend::gkr::types::GkrArtifact"
                []
                [ F ]
                [
                  ("ood_point", M.read (| ood_point |));
                  ("claims_to_verify_by_instance", M.read (| claims_to_verify_by_instance |));
                  ("n_variables_by_instance", M.read (| n_layers_by_instance |))
                ] in
            M.alloc (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrBatchProof") [] [ F ];
                  Ty.apply (Ty.path "openvm_stark_backend::gkr::types::GkrArtifact") [] [ F ]
                ],
              Value.Tuple [ M.read (| proof |); M.read (| artifact |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_prove_batch :
      M.IsFunction.C "openvm_stark_backend::gkr::prover::prove_batch" prove_batch.
    Admitted.
    Global Typeclasses Opaque prove_batch.
    
    (*
    fn gen_layers<F: Field>(input_layer: Layer<F>) -> Vec<Layer<F>> {
        let n_variables = input_layer.n_variables();
        let layers = successors(Some(input_layer), |layer| layer.next_layer()).collect_vec();
        assert_eq!(layers.len(), n_variables + 1);
        layers
    }
    *)
    Definition gen_layers (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ input_layer ] =>
        ltac:(M.monadic
          (let input_layer :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ],
              input_layer
            |) in
          M.read (|
            let~ n_variables : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ],
                  "n_variables",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, input_layer |) ]
              |) in
            let~ layers :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::sources::successors::Successors")
                    []
                    [
                      Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ])
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::sources::successors::Successors")
                      []
                      [
                        Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ]
                            ])
                      ],
                    M.get_function (|
                      "core::iter::sources::successors::successors",
                      [],
                      [
                        Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ]
                            ])
                      ]
                    |),
                    [
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [ Ty.apply (Ty.path "openvm_stark_backend::gkr::types::Layer") [] [ F ] ]
                        [ M.read (| input_layer |) ];
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                        []
                                        [ F ]
                                    ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                          []
                                          [ F ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let layer :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::gkr::types::Layer")
                                                  []
                                                  [ F ]
                                              ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                                []
                                                [ F ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                              []
                                              [ F ],
                                            "next_layer",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| layer |) |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                    ],
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.path "usize",
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::gkr::types::Layer")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, layers |) ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.path "usize",
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ M.read (| n_variables |); Value.Integer IntegerKind.Usize 1 ]
                          |)
                        |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val :=
                        M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                      let right_val :=
                        M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (|
                                M.read (|
                                  let~ kind : Ty.path "core::panicking::AssertKind" :=
                                    Value.StructTuple "core::panicking::AssertKind::Eq" [] [] [] in
                                  M.alloc (|
                                    Ty.path "never",
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (|
                                        "core::panicking::assert_failed",
                                        [],
                                        [ Ty.path "usize"; Ty.path "usize" ]
                                      |),
                                      [
                                        M.read (| kind |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_val |) |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_val |) |)
                                            |)
                                          |)
                                        |);
                                        Value.StructTuple
                                          "core::option::Option::None"
                                          []
                                          [ Ty.path "core::fmt::Arguments" ]
                                          []
                                      ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |)))
                ]
              |) in
            layers
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_gen_layers :
      M.IsFunction.C "openvm_stark_backend::gkr::prover::gen_layers" gen_layers.
    Admitted.
    Global Typeclasses Opaque gen_layers.
    
    (*
    pub fn correct_sum_as_poly_in_first_variable<F: Field>(
        f_at_0: F,
        f_at_2: F,
        claim: F,
        y: &[F],
        k: usize,
    ) -> UnivariatePolynomial<F> {
        assert_ne!(k, 0);
        let n = y.len();
        assert!(k <= n);
    
        // We evaluated `f(0)` and `f(2)` - the inputs.
        // We want to compute `r(t) = f(t) * eq(t, y[n - k]) / eq(0, y[:n - k + 1])`.
        let a_const = hypercube_eq(&vec![F::ZERO; n - k + 1], &y[..n - k + 1]).inverse();
    
        // Find the additional root of `r(t)`, by finding the root of `eq(t, y[n - k])`:
        //    0 = eq(t, y[n - k])
        //      = t * y[n - k] + (1 - t)(1 - y[n - k])
        //      = 1 - y[n - k] - t(1 - 2 * y[n - k])
        // => t = (1 - y[n - k]) / (1 - 2 * y[n - k])
        //      = b
        let b_const = (F::ONE - y[n - k]) / (F::ONE - y[n - k].double());
    
        // We get that `r(t) = f(t) * eq(t, y[n - k]) * a`.
        let r_at_0 = f_at_0 * hypercube_eq(&[F::ZERO], &[y[n - k]]) * a_const;
        let r_at_1 = claim - r_at_0;
        let r_at_2 = f_at_2 * hypercube_eq(&[F::TWO], &[y[n - k]]) * a_const;
    
        // Interpolate.
        UnivariatePolynomial::from_interpolation(&[
            (F::ZERO, r_at_0),
            (F::ONE, r_at_1),
            (F::TWO, r_at_2),
            (b_const, F::ZERO),
        ])
    }
    *)
    Definition correct_sum_as_poly_in_first_variable
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ F ], [ f_at_0; f_at_2; claim; y; k ] =>
        ltac:(M.monadic
          (let f_at_0 := M.alloc (| F, f_at_0 |) in
          let f_at_2 := M.alloc (| F, f_at_2 |) in
          let claim := M.alloc (| F, claim |) in
          let y :=
            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ], y |) in
          let k := M.alloc (| Ty.path "usize", k |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                    ],
                  Value.Tuple
                    [
                      M.borrow (| Pointer.Kind.Ref, k |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val :=
                        M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                      let right_val :=
                        M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [
                                        M.read (| M.deref (| M.read (| left_val |) |) |);
                                        M.read (| M.deref (| M.read (| right_val |) |) |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (|
                                M.read (|
                                  let~ kind : Ty.path "core::panicking::AssertKind" :=
                                    Value.StructTuple "core::panicking::AssertKind::Ne" [] [] [] in
                                  M.alloc (|
                                    Ty.path "never",
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (|
                                        "core::panicking::assert_failed",
                                        [],
                                        [ Ty.path "usize"; Ty.path "usize" ]
                                      |),
                                      [
                                        M.read (| kind |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_val |) |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_val |) |)
                                            |)
                                          |)
                                        |);
                                        Value.StructTuple
                                          "core::option::Option::None"
                                          []
                                          [ Ty.path "core::fmt::Arguments" ]
                                          []
                                      ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |)))
                ]
              |) in
            let~ n : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (| Ty.apply (Ty.path "slice") [] [ F ], "len", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            Ty.path "bool",
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [ M.read (| k |); M.read (| n |) ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic", [], [] |),
                          [ mk_str (| "assertion failed: k <= n" |) ]
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (Value.Tuple []))
                ]
              |) in
            let~ a_const : F :=
              M.call_closure (|
                F,
                M.get_trait_method (| "p3_field::field::Field", F, [], [], "inverse", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      F,
                      M.call_closure (|
                        F,
                        M.get_function (|
                          "openvm_stark_backend::poly::multi::hypercube_eq",
                          [],
                          [ F ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            M.get_function (| "alloc::vec::from_elem", [], [ F ] |),
                                            [
                                              M.read (|
                                                get_constant (|
                                                  "p3_field::field::FieldAlgebra::ZERO",
                                                  F
                                                |)
                                              |);
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.sub,
                                                    [ M.read (| n |); M.read (| k |) ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                    M.get_trait_method (|
                                      "core::ops::index::Index",
                                      Ty.apply (Ty.path "slice") [] [ F ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeTo")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                      "index",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |);
                                      Value.mkStructRecord
                                        "core::ops::range::RangeTo"
                                        []
                                        [ Ty.path "usize" ]
                                        [
                                          ("end_",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [ M.read (| n |); M.read (| k |) ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |))
                                        ]
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |) in
            let~ b_const : F :=
              M.call_closure (|
                F,
                M.get_trait_method (| "core::ops::arith::Div", F, [], [ F ], "div", [], [] |),
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::ops::arith::Sub", F, [], [ F ], "sub", [], [] |),
                    [
                      M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", F |) |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| y |) |),
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [ M.read (| n |); M.read (| k |) ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::ops::arith::Sub", F, [], [ F ], "sub", [], [] |),
                    [
                      M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", F |) |);
                      M.call_closure (|
                        F,
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          F,
                          [],
                          [],
                          "double",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| y |) |),
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ M.read (| n |); M.read (| k |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let~ r_at_0 : F :=
              M.call_closure (|
                F,
                M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
                    [
                      M.read (| f_at_0 |);
                      M.call_closure (|
                        F,
                        M.get_function (|
                          "openvm_stark_backend::poly::multi::hypercube_eq",
                          [],
                          [ F ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ F ]
                                ])
                              (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ F ],
                                      Value.Array
                                        [
                                          M.read (|
                                            get_constant (|
                                              "p3_field::field::FieldAlgebra::ZERO",
                                              F
                                            |)
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ F ]
                                ])
                              (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ F ],
                                      Value.Array
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| y |) |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.sub,
                                                [ M.read (| n |); M.read (| k |) ]
                                              |)
                                            |)
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.read (| a_const |)
                ]
              |) in
            let~ r_at_1 : F :=
              M.call_closure (|
                F,
                M.get_trait_method (| "core::ops::arith::Sub", F, [], [ F ], "sub", [], [] |),
                [ M.read (| claim |); M.read (| r_at_0 |) ]
              |) in
            let~ r_at_2 : F :=
              M.call_closure (|
                F,
                M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
                    [
                      M.read (| f_at_2 |);
                      M.call_closure (|
                        F,
                        M.get_function (|
                          "openvm_stark_backend::poly::multi::hypercube_eq",
                          [],
                          [ F ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ F ]
                                ])
                              (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ F ],
                                      Value.Array
                                        [
                                          M.read (|
                                            get_constant (|
                                              "p3_field::field::FieldAlgebra::TWO",
                                              F
                                            |)
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ F ]
                                ])
                              (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ F ],
                                      Value.Array
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| y |) |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.sub,
                                                [ M.read (| n |); M.read (| k |) ]
                                              |)
                                            |)
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.read (| a_const |)
                ]
              |) in
            M.alloc (|
              Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
              M.call_closure (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                    []
                    [ F ],
                  "from_interpolation",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.apply (Ty.path "slice") [] [ Ty.tuple [ F; F ] ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ Ty.tuple [ F; F ] ]
                        ])
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.tuple [ F; F ] ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ Ty.tuple [ F; F ] ],
                              Value.Array
                                [
                                  Value.Tuple
                                    [
                                      M.read (|
                                        get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |)
                                      |);
                                      M.read (| r_at_0 |)
                                    ];
                                  Value.Tuple
                                    [
                                      M.read (|
                                        get_constant (| "p3_field::field::FieldAlgebra::ONE", F |)
                                      |);
                                      M.read (| r_at_1 |)
                                    ];
                                  Value.Tuple
                                    [
                                      M.read (|
                                        get_constant (| "p3_field::field::FieldAlgebra::TWO", F |)
                                      |);
                                      M.read (| r_at_2 |)
                                    ];
                                  Value.Tuple
                                    [
                                      M.read (| b_const |);
                                      M.read (|
                                        get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |)
                                      |)
                                    ]
                                ]
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_correct_sum_as_poly_in_first_variable :
      M.IsFunction.C
        "openvm_stark_backend::gkr::prover::correct_sum_as_poly_in_first_variable"
        correct_sum_as_poly_in_first_variable.
    Admitted.
    Global Typeclasses Opaque correct_sum_as_poly_in_first_variable.
  End prover.
End gkr.
