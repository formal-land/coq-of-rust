(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module interaction.
  Module fri_log_up.
    (* StructRecord
      {
        name := "FriLogUpPhase";
        const_params := [];
        ty_params := [ "F"; "Challenge"; "Challenger" ];
        fields :=
          [
            ("log_up_params", Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters");
            ("extra_capacity_bits", Ty.path "usize");
            ("_marker",
              Ty.apply
                (Ty.path "core::marker::PhantomData")
                []
                [ Ty.tuple [ F; Challenge; Challenger ] ])
          ];
      } *)
    
    Module Impl_openvm_stark_backend_interaction_fri_log_up_FriLogUpPhase_F_Challenge_Challenger.
      Definition Self (F Challenge Challenger : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
          []
          [ F; Challenge; Challenger ].
      
      (*
          pub fn new(log_up_params: LogUpSecurityParameters, extra_capacity_bits: usize) -> Self {
              Self {
                  log_up_params,
                  extra_capacity_bits,
                  _marker: PhantomData,
              }
          }
      *)
      Definition new
          (F Challenge Challenger : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F Challenge Challenger in
        match ε, τ, α with
        | [], [], [ log_up_params; extra_capacity_bits ] =>
          ltac:(M.monadic
            (let log_up_params :=
              M.alloc (|
                Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters",
                log_up_params
              |) in
            let extra_capacity_bits := M.alloc (| Ty.path "usize", extra_capacity_bits |) in
            Value.mkStructRecord
              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase"
              []
              [ F; Challenge; Challenger ]
              [
                ("log_up_params", M.read (| log_up_params |));
                ("extra_capacity_bits", M.read (| extra_capacity_bits |));
                ("_marker",
                  Value.StructTuple
                    "core::marker::PhantomData"
                    []
                    [ Ty.tuple [ F; Challenge; Challenger ] ]
                    [])
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F Challenge Challenger : Ty.t),
        M.IsAssociatedFunction.C (Self F Challenge Challenger) "new" (new F Challenge Challenger).
      Admitted.
      Global Typeclasses Opaque new.
      (*
          fn generate_after_challenge_traces_per_air(
              challenges: &[Challenge; STARK_LU_NUM_CHALLENGES],
              constraints_per_air: &[&SymbolicConstraints<F>],
              params_per_air: &[&FriLogUpProvingKey],
              trace_view_per_air: Vec<PairTraceView<F>>,
              extra_capacity_bits: usize,
          ) -> Vec<Option<RowMajorMatrix<Challenge>>> {
              parizip!(constraints_per_air, trace_view_per_air, params_per_air)
                  .map(|(constraints, trace_view, params)| {
                      Self::generate_after_challenge_trace(
                          &constraints.interactions,
                          trace_view,
                          challenges,
                          &params.interaction_partitions,
                          extra_capacity_bits,
                      )
                  })
                  .collect::<Vec<_>>()
          }
      *)
      Definition generate_after_challenge_traces_per_air
          (F Challenge Challenger : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F Challenge Challenger in
        match ε, τ, α with
        | [],
            [],
            [
              challenges;
              constraints_per_air;
              params_per_air;
              trace_view_per_air;
              extra_capacity_bits
            ] =>
          ltac:(M.monadic
            (let challenges :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_stark_backend_interaction_fri_log_up_generate_after_challenge_traces_per_air_discriminant"
                          |))
                      ]
                      [ Challenge ]
                  ],
                challenges
              |) in
            let constraints_per_air :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                              []
                              [ F ]
                          ]
                      ]
                  ],
                constraints_per_air
              |) in
            let params_per_air :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                          ]
                      ]
                  ],
                params_per_air
              |) in
            let trace_view_per_air :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::PairView")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        F
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                trace_view_per_air
              |) in
            let extra_capacity_bits := M.alloc (| Ty.path "usize", extra_capacity_bits |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Challenge;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Challenge; Ty.path "alloc::alloc::Global" ]
                        ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "rayon::iter::ParallelIterator",
                Ty.apply
                  (Ty.path "rayon::iter::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "rayon::iter::multizip::MultiZip")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "rayon::slice::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                      []
                                      [ F ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "rayon::vec::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::prover::types::PairView")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    F
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "rayon::slice::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                  ]
                              ]
                          ]
                      ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                      []
                                      [ F ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::PairView")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        F;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                F
                              ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                  ]
                              ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Challenge;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                            ]
                        ])
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Challenge;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                            ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "rayon::iter::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "rayon::iter::multizip::MultiZip")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "rayon::slice::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [ F ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "rayon::vec::IntoIter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::prover::types::PairView")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      F
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "rayon::slice::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                    ]
                                ]
                            ]
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [ F ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::PairView")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  F
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                    ]
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Challenge;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ]
                              ]
                          ])
                    ],
                  M.get_trait_method (|
                    "rayon::iter::ParallelIterator",
                    Ty.apply
                      (Ty.path "rayon::iter::multizip::MultiZip")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "rayon::slice::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                      []
                                      [ F ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "rayon::vec::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::prover::types::PairView")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    F
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "rayon::slice::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                  ]
                              ]
                          ]
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [ F ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::PairView")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  F
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                    ]
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Challenge;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]);
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Challenge;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                            ]
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "rayon::iter::multizip::MultiZip")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "rayon::slice::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [ F ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "rayon::vec::IntoIter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::prover::types::PairView")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      F
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "rayon::slice::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                    ]
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "rayon::iter::IntoParallelIterator",
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                          []
                                          [ F ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::prover::types::PairView")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    F
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                      ]
                                  ]
                              ]
                          ],
                        [],
                        [],
                        "into_par_iter",
                        [],
                        []
                      |),
                      [
                        Value.Tuple
                          [
                            M.read (| constraints_per_air |);
                            M.read (| trace_view_per_air |);
                            M.read (| params_per_air |)
                          ]
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Challenge;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ],
                                M.alloc (|
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                []
                                                [ F ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::prover::types::PairView")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          F
                                        ];
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.path
                                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                            ]
                                        ]
                                    ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                      let constraints :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                    []
                                                    [ F ]
                                                ]
                                            ],
                                          γ0_0
                                        |) in
                                      let trace_view :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::PairView")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              F
                                            ],
                                          γ0_1
                                        |) in
                                      let params :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                                                ]
                                            ],
                                          γ0_2
                                        |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Challenge;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Challenge; Ty.path "alloc::alloc::Global" ]
                                              ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                            []
                                            [ F; Challenge; Challenger ],
                                          "generate_after_challenge_trace",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::interaction::Interaction")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                              []
                                                              [ F ]
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::interaction::Interaction")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (|
                                                            M.read (|
                                                              M.deref (| M.read (| constraints |) |)
                                                            |)
                                                          |),
                                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                                          "interactions"
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.read (| trace_view |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| challenges |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "usize";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.path "usize";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (|
                                                            M.read (|
                                                              M.deref (| M.read (| params |) |)
                                                            |)
                                                          |),
                                                          "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                                          "interaction_partitions"
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.read (| extra_capacity_bits |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_generate_after_challenge_traces_per_air :
        forall (F Challenge Challenger : Ty.t),
        M.IsAssociatedFunction.C
          (Self F Challenge Challenger)
          "generate_after_challenge_traces_per_air"
          (generate_after_challenge_traces_per_air F Challenge Challenger).
      Admitted.
      Global Typeclasses Opaque generate_after_challenge_traces_per_air.
      
      (*
          fn extract_cumulative_sums(
              perm_traces: &[Option<RowMajorMatrix<Challenge>>],
          ) -> Vec<Option<Challenge>> {
              perm_traces
                  .iter()
                  .map(|perm_trace| {
                      perm_trace.as_ref().map(|perm_trace| {
                          *perm_trace
                              .row_slice(perm_trace.height() - 1)
                              .last()
                              .unwrap()
                      })
                  })
                  .collect()
          }
      *)
      Definition extract_cumulative_sums
          (F Challenge Challenger : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F Challenge Challenger in
        match ε, τ, α with
        | [], [], [ perm_traces ] =>
          ltac:(M.monadic
            (let perm_traces :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Challenge;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                      ]
                  ],
                perm_traces
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Challenge;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                      ];
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Challenge;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ]
                          ]
                      ]
                      (Ty.apply (Ty.path "core::option::Option") [] [ Challenge ])
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Challenge;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ]
                                ]
                            ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Challenge;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ]
                            ]
                        ]
                        (Ty.apply (Ty.path "core::option::Option") [] [ Challenge ])
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Challenge;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Challenge;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ]
                            ]
                        ]
                        (Ty.apply (Ty.path "core::option::Option") [] [ Challenge ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Challenge;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ]
                                ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Challenge;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ]
                          ],
                        "iter",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| perm_traces |) |) |) ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Challenge ],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Challenge;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ]
                                    ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let perm_trace :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Challenge;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Challenge; Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                            ],
                                          γ
                                        |) in
                                      M.call_closure (|
                                        Ty.apply (Ty.path "core::option::Option") [] [ Challenge ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Challenge;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Challenge; Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                            ],
                                          "map",
                                          [],
                                          [
                                            Challenge;
                                            Ty.function
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Challenge;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Challenge;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              Challenge
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Challenge;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Challenge;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Challenge;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Challenge; Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ],
                                              "as_ref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| perm_trace |) |)
                                              |)
                                            ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Challenge,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_matrix::dense::DenseMatrix")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ],
                                                        α0
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let perm_trace :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_matrix::dense::DenseMatrix")
                                                                      []
                                                                      [
                                                                        Challenge;
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Challenge;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ],
                                                                γ
                                                              |) in
                                                            M.read (|
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Challenge ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Challenge ]
                                                                      ],
                                                                    "unwrap",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Challenge ]
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Challenge ],
                                                                        "last",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Challenge ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::Deref",
                                                                                Ty.associated_unknown,
                                                                                [],
                                                                                [],
                                                                                "deref",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.alloc (|
                                                                                    Ty.associated_unknown,
                                                                                    M.call_closure (|
                                                                                      Ty.associated_unknown,
                                                                                      M.get_trait_method (|
                                                                                        "p3_matrix::Matrix",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_matrix::dense::DenseMatrix")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ],
                                                                                        [],
                                                                                        [ Challenge
                                                                                        ],
                                                                                        "row_slice",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              perm_trace
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          BinOp.Wrap.sub,
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "usize",
                                                                                              M.get_trait_method (|
                                                                                                "p3_matrix::Matrix",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "p3_matrix::dense::DenseMatrix")
                                                                                                  []
                                                                                                  [
                                                                                                    Challenge;
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      []
                                                                                                      [
                                                                                                        Challenge;
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ]
                                                                                                  ],
                                                                                                [],
                                                                                                [
                                                                                                  Challenge
                                                                                                ],
                                                                                                "height",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      perm_trace
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_extract_cumulative_sums :
        forall (F Challenge Challenger : Ty.t),
        M.IsAssociatedFunction.C
          (Self F Challenge Challenger)
          "extract_cumulative_sums"
          (extract_cumulative_sums F Challenge Challenger).
      Admitted.
      Global Typeclasses Opaque extract_cumulative_sums.
      
      (*
          pub fn generate_after_challenge_trace(
              all_interactions: &[SymbolicInteraction<F>],
              trace_view: PairTraceView<F>,
              permutation_randomness: &[Challenge; STARK_LU_NUM_CHALLENGES],
              interaction_partitions: &[Vec<usize>],
              extra_capacity_bits: usize,
          ) -> Option<RowMajorMatrix<Challenge>>
          where
              F: Field,
              Challenge: ExtensionField<F>,
          {
              if all_interactions.is_empty() {
                  return None;
              }
              let &[alpha, beta] = permutation_randomness;
      
              let betas = generate_betas(beta, all_interactions);
      
              // Compute the reciprocal columns
              //
              // For every row we do the following
              // We first compute the reciprocals: r_1, r_2, ..., r_n, where
              // r_i = \frac{1}{\alpha^i + \sum_j \beta^j * f_{i, j}}, where
              // f_{i, j} is the jth main trace column for the ith interaction
              //
              // We then bundle every interaction_chunk_size interactions together
              // to get the value perm_i = \sum_{i \in bundle} r_i * m_i, where m_i
              // is the signed count for the interaction.
              //
              // Finally, the last column, \phi, of every row is the running sum of
              // all the previous perm values
              //
              // Row: | perm_1 | perm_2 | perm_3 | ... | perm_s | phi |, where s
              // is the number of bundles
              let num_interactions = all_interactions.len();
              let height = trace_view.partitioned_main[0].height();
      
              // Note: we could precompute this and include in the proving key, but this should be
              // a fast scan and only done once per AIR and not per row, so it is more ergonomic to compute
              // on the fly. If we introduce a more advanced chunking algorithm, then we will need to
              // cache the chunking information in the proving key.
              let perm_width = interaction_partitions.len() + 1;
              // We allocate extra_capacity_bits now as it will be needed by the coset_lde later in pcs.commit
              let perm_trace_len = height * perm_width;
              let mut perm_values = Challenge::zero_vec(perm_trace_len << extra_capacity_bits);
              perm_values.truncate(perm_trace_len);
              debug_assert!(
                  trace_view
                      .partitioned_main
                      .iter()
                      .all(|m| m.height() == height),
                  "All main trace parts must have same height"
              );
      
              // To optimize memory and parallelism, we split the trace rows into chunks
              // based on the number of cpu threads available, and then do all
              // computations necessary for that chunk within a single thread.
              #[cfg(feature = "parallel")]
              let num_threads = rayon::current_num_threads();
              #[cfg(not(feature = "parallel"))]
              let num_threads = 1;
      
              let preprocessed = trace_view.preprocessed.as_ref().map(|m| m.as_view());
              let partitioned_main = trace_view
                  .partitioned_main
                  .iter()
                  .map(|m| m.as_view())
                  .collect_vec();
              let evaluator = |local_index: usize| Evaluator {
                  preprocessed: &preprocessed,
                  partitioned_main: &partitioned_main,
                  public_values: &trace_view.public_values,
                  height,
                  local_index,
              };
              let height_per_thread = height.div_ceil(num_threads);
              perm_values
                  .par_chunks_mut(height_per_thread * perm_width)
                  .enumerate()
                  .for_each(|(thread_idx, perm_values)| {
                      // perm_values is now local_height x perm_width row-major matrix
                      let num_rows = perm_values.len() / perm_width;
                      // the interaction chunking requires more memory because we must
                      // allocate separate memory for the denominators and reciprocals
                      let mut denoms = Challenge::zero_vec(num_rows * num_interactions);
                      let row_offset = thread_idx * height_per_thread;
                      // compute the denominators to be inverted:
                      for (n, denom_row) in denoms.chunks_exact_mut(num_interactions).enumerate() {
                          let evaluator = evaluator(row_offset + n);
                          for (denom, interaction) in denom_row.iter_mut().zip(all_interactions.iter()) {
                              debug_assert!(interaction.message.len() <= betas.len());
                              let b = F::from_canonical_u32(interaction.bus_index as u32 + 1);
                              let mut fields = interaction.message.iter();
                              *denom = alpha
                                  + evaluator
                                      .eval_expr(fields.next().expect("fields should not be empty"));
                              for (expr, &beta) in fields.zip(betas.iter().skip(1)) {
                                  *denom += beta * evaluator.eval_expr(expr);
                              }
                              *denom += betas[interaction.message.len()] * b;
                          }
                      }
      
                      // Zero should be vanishingly unlikely if alpha, beta are properly pseudo-randomized
                      // The logup reciprocals should never be zero, so trace generation should panic if
                      // trying to divide by zero.
                      let reciprocals = p3_field::batch_multiplicative_inverse(&denoms);
                      drop(denoms);
                      // For loop over rows in same thread:
                      // This block should already be in a single thread, but rayon is able
                      // to do more magic sometimes
                      perm_values
                          .par_chunks_exact_mut(perm_width)
                          .zip(reciprocals.par_chunks_exact(num_interactions))
                          .enumerate()
                          .for_each(|(n, (perm_row, reciprocals))| {
                              debug_assert_eq!(perm_row.len(), perm_width);
                              debug_assert_eq!(reciprocals.len(), num_interactions);
      
                              let evaluator = evaluator(row_offset + n);
                              let mut row_sum = Challenge::ZERO;
                              for (part, perm_val) in zip(interaction_partitions, perm_row.iter_mut()) {
                                  for &interaction_idx in part {
                                      let interaction = &all_interactions[interaction_idx];
                                      let interaction_val = reciprocals[interaction_idx]
                                          * evaluator.eval_expr(&interaction.count);
                                      *perm_val += interaction_val;
                                  }
                                  row_sum += *perm_val;
                              }
      
                              perm_row[perm_width - 1] = row_sum;
                          });
                  });
              // We can drop preprocessed and main trace now that we have created perm trace
              drop(trace_view);
      
              // At this point, the trace matrix is complete except that the last column
              // has the row sum but not the partial sum
              tracing::trace_span!("compute logup partial sums").in_scope(|| {
                  let mut phi = Challenge::ZERO;
                  for perm_chunk in perm_values.chunks_exact_mut(perm_width) {
                      phi += *perm_chunk.last().unwrap();
                      *perm_chunk.last_mut().unwrap() = phi;
                  }
              });
      
              Some(RowMajorMatrix::new(perm_values, perm_width))
          }
      *)
      Definition generate_after_challenge_trace
          (F Challenge Challenger : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F Challenge Challenger in
        match ε, τ, α with
        | [],
            [],
            [
              all_interactions;
              trace_view;
              permutation_randomness;
              interaction_partitions;
              extra_capacity_bits
            ] =>
          ltac:(M.monadic
            (let all_interactions :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::Interaction")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ]
                      ]
                  ],
                all_interactions
              |) in
            let trace_view :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::prover::types::PairView")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    F
                  ],
                trace_view
              |) in
            let permutation_randomness :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_stark_backend_interaction_fri_log_up_generate_after_challenge_trace_discriminant"
                          |))
                      ]
                      [ Challenge ]
                  ],
                permutation_randomness
              |) in
            let interaction_partitions :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ]
                  ],
                interaction_partitions
              |) in
            let extra_capacity_bits := M.alloc (| Ty.path "usize", extra_capacity_bits |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Challenge;
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Challenge; Ty.path "alloc::alloc::Global" ]
                    ]
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::Interaction")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ]
                                            ]
                                        ],
                                      "is_empty",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| all_interactions |) |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::option::Option::None"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Challenge;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                    []
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Challenge;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Challenge; Ty.path "alloc::alloc::Global" ]
                          ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Challenge;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                            ]
                        ],
                      permutation_randomness,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                            let γ1_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                            let alpha := M.copy (| Challenge, γ1_0 |) in
                            let beta := M.copy (| Challenge, γ1_1 |) in
                            M.read (|
                              let~ betas :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ],
                                  M.get_function (|
                                    "openvm_stark_backend::interaction::utils::generate_betas",
                                    [],
                                    [
                                      Challenge;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                        []
                                        [ F ]
                                    ]
                                  |),
                                  [
                                    M.read (| beta |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| all_interactions |) |)
                                    |)
                                  ]
                                |) in
                              let~ num_interactions : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::interaction::Interaction")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ]
                                          ]
                                      ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| all_interactions |) |)
                                    |)
                                  ]
                                |) in
                              let~ height : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_trait_method (|
                                    "p3_matrix::Matrix",
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        F;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    [],
                                    [ F ],
                                    "height",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    F;
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_matrix::dense::DenseMatrix")
                                                            []
                                                            [
                                                              F;
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ F; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_matrix::dense::DenseMatrix")
                                                              []
                                                              [
                                                                F;
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [ Ty.path "usize" ],
                                                    "index",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        trace_view,
                                                        "openvm_stark_backend::prover::types::PairView",
                                                        "partitioned_main"
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.Usize 0
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |) in
                              let~ perm_width : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| interaction_partitions |) |)
                                        |)
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |) in
                              let~ perm_trace_len : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [ M.read (| height |); M.read (| perm_width |) ]
                                |) in
                              let~ perm_values :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ],
                                  M.get_trait_method (|
                                    "p3_field::field::FieldAlgebra",
                                    Challenge,
                                    [],
                                    [],
                                    "zero_vec",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.shl,
                                      [
                                        M.read (| perm_trace_len |);
                                        M.read (| extra_capacity_bits |)
                                      ]
                                    |)
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ],
                                    "truncate",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.MutRef, perm_values |);
                                    M.read (| perm_trace_len |)
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_matrix::dense::DenseMatrix")
                                                                          []
                                                                          [
                                                                            F;
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [],
                                                                "all",
                                                                [],
                                                                [
                                                                  Ty.function
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::sync::Arc")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_matrix::dense::DenseMatrix")
                                                                                []
                                                                                [
                                                                                  F;
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      F;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ]
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.path "bool")
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_matrix::dense::DenseMatrix")
                                                                              []
                                                                              [
                                                                                F;
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    F;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ],
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::sync::Arc")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_matrix::dense::DenseMatrix")
                                                                                []
                                                                                [
                                                                                  F;
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      F;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ]
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_matrix::dense::DenseMatrix")
                                                                                  []
                                                                                  [
                                                                                    F;
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        F;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        "iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::sync::Arc")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "p3_matrix::dense::DenseMatrix")
                                                                                            []
                                                                                            [
                                                                                              F;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::Deref",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::sync::Arc")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_matrix::dense::DenseMatrix")
                                                                                          []
                                                                                          [
                                                                                            F;
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                F;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "deref",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    trace_view,
                                                                                    "openvm_stark_backend::prover::types::PairView",
                                                                                    "partitioned_main"
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.closure
                                                                  (fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [ α0 ] =>
                                                                        ltac:(M.monadic
                                                                          (M.match_operator (|
                                                                            Ty.path "bool",
                                                                            M.alloc (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "p3_matrix::dense::DenseMatrix")
                                                                                        []
                                                                                        [
                                                                                          F;
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              F;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ]
                                                                                ],
                                                                              α0
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let m :=
                                                                                    M.copy (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::sync::Arc")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "p3_matrix::dense::DenseMatrix")
                                                                                                []
                                                                                                [
                                                                                                  F;
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      F;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ],
                                                                                      γ
                                                                                    |) in
                                                                                  M.call_closure (|
                                                                                    Ty.path "bool",
                                                                                    BinOp.eq,
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        M.get_trait_method (|
                                                                                          "p3_matrix::Matrix",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "p3_matrix::dense::DenseMatrix")
                                                                                            []
                                                                                            [
                                                                                              F;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ],
                                                                                          [],
                                                                                          [ F ],
                                                                                          "height",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "p3_matrix::dense::DenseMatrix")
                                                                                                      []
                                                                                                      [
                                                                                                        F;
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            F;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::deref::Deref",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::sync::Arc")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "p3_matrix::dense::DenseMatrix")
                                                                                                        []
                                                                                                        [
                                                                                                          F;
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              F;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [],
                                                                                                  "deref",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        m
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.read (|
                                                                                        height
                                                                                      |)
                                                                                    ]
                                                                                  |)))
                                                                            ]
                                                                          |)))
                                                                      | _ =>
                                                                        M.impossible
                                                                          "wrong number of arguments"
                                                                      end))
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "All main trace parts must have same height"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ num_threads : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (| "rayon_core::current_num_threads", [], [] |),
                                  []
                                |) in
                              let~ preprocessed :
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                        ]
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    F;
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ],
                                    "map",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                          ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    F;
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        "as_ref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            trace_view,
                                            "openvm_stark_backend::prover::types::PairView",
                                            "preprocessed"
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    F;
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                  ],
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_matrix::dense::DenseMatrix")
                                                            []
                                                            [
                                                              F;
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ F; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  α0
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let m :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          γ
                                                        |) in
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                                          []
                                                          [
                                                            F;
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_matrix::dense::DenseMatrix")
                                                            []
                                                            [
                                                              F;
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ F; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          "as_view",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_matrix::dense::DenseMatrix")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_matrix::dense::DenseMatrix")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| m |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |) in
                              let~ partitioned_main :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "itertools::Itertools",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    F;
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ F; Ty.path "alloc::alloc::Global" ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                            ])
                                      ],
                                    [],
                                    [],
                                    "collect_vec",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::map::Map")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ];
                                          Ty.function
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          F;
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ F; Ty.path "alloc::alloc::Global" ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                              ])
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    F;
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        [],
                                        [],
                                        "map",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                            ];
                                          Ty.function
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          F;
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ F; Ty.path "alloc::alloc::Global" ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                              ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ F; Ty.path "alloc::alloc::Global" ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            "iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_matrix::dense::DenseMatrix")
                                                                []
                                                                [
                                                                  F;
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_matrix::dense::DenseMatrix")
                                                              []
                                                              [
                                                                F;
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        trace_view,
                                                        "openvm_stark_backend::prover::types::PairView",
                                                        "partitioned_main"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                      ],
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_matrix::dense::DenseMatrix")
                                                                []
                                                                [
                                                                  F;
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ],
                                                      α0
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let m :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_matrix::dense::DenseMatrix")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              γ
                                                            |) in
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_matrix::dense::DenseMatrix")
                                                              []
                                                              [
                                                                F;
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ F ]
                                                                  ]
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_matrix::dense::DenseMatrix")
                                                                []
                                                                [
                                                                  F;
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              "as_view",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_matrix::dense::DenseMatrix")
                                                                          []
                                                                          [
                                                                            F;
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_matrix::dense::DenseMatrix")
                                                                            []
                                                                            [
                                                                              F;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  F;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (| M.read (| m |) |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)
                                  ]
                                |) in
                              let~ evaluator :
                                  Ty.function
                                    [ Ty.path "usize" ]
                                    (Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::interaction::trace::Evaluator")
                                      []
                                      [ F ]) :=
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::trace::Evaluator")
                                              []
                                              [ F ],
                                            M.alloc (| Ty.path "usize", α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let local_index :=
                                                    M.copy (| Ty.path "usize", γ |) in
                                                  Value.mkStructRecord
                                                    "openvm_stark_backend::interaction::trace::Evaluator"
                                                    []
                                                    [ F ]
                                                    [
                                                      ("preprocessed",
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              preprocessed
                                                            |)
                                                          |)
                                                        |));
                                                      ("partitioned_main",
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_matrix::dense::DenseMatrix")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_matrix::dense::DenseMatrix")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ F ]
                                                                          ]
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                [],
                                                                "deref",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      partitioned_main
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |));
                                                      ("public_values",
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ F ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                [],
                                                                "deref",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        trace_view,
                                                                        "openvm_stark_backend::prover::types::PairView",
                                                                        "public_values"
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |));
                                                      ("height", M.read (| height |));
                                                      ("local_index", M.read (| local_index |))
                                                    ]))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end)) in
                              let~ height_per_thread : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.path "usize",
                                    "div_ceil",
                                    [],
                                    []
                                  |),
                                  [ M.read (| height |); M.read (| num_threads |) ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_trait_method (|
                                    "rayon::iter::ParallelIterator",
                                    Ty.apply
                                      (Ty.path "rayon::iter::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "rayon::slice::chunks::ChunksMut")
                                          []
                                          [ Challenge ]
                                      ],
                                    [],
                                    [],
                                    "for_each",
                                    [],
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Challenge ] ]
                                            ]
                                        ]
                                        (Ty.tuple [])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "rayon::iter::enumerate::Enumerate")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "rayon::slice::chunks::ChunksMut")
                                            []
                                            [ Challenge ]
                                        ],
                                      M.get_trait_method (|
                                        "rayon::iter::IndexedParallelIterator",
                                        Ty.apply
                                          (Ty.path "rayon::slice::chunks::ChunksMut")
                                          []
                                          [ Challenge ],
                                        [],
                                        [],
                                        "enumerate",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "rayon::slice::chunks::ChunksMut")
                                            []
                                            [ Challenge ],
                                          M.get_trait_method (|
                                            "rayon::slice::ParallelSliceMut",
                                            Ty.apply (Ty.path "slice") [] [ Challenge ],
                                            [],
                                            [ Challenge ],
                                            "par_chunks_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Challenge ] ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Challenge; Ty.path "alloc::alloc::Global" ],
                                                    [],
                                                    [],
                                                    "deref_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.MutRef, perm_values |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.mul,
                                              [
                                                M.read (| height_per_thread |);
                                                M.read (| perm_width |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Challenge ]
                                                        ]
                                                    ],
                                                  α0
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let thread_idx :=
                                                        M.copy (| Ty.path "usize", γ0_0 |) in
                                                      let perm_values :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Challenge ]
                                                            ],
                                                          γ0_1
                                                        |) in
                                                      M.read (|
                                                        let~ num_rows : Ty.path "usize" :=
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.div,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Challenge ],
                                                                  "len",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| perm_values |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (| perm_width |)
                                                            ]
                                                          |) in
                                                        let~ denoms :
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ] :=
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              Challenge,
                                                              [],
                                                              [],
                                                              "zero_vec",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.mul,
                                                                [
                                                                  M.read (| num_rows |);
                                                                  M.read (| num_interactions |)
                                                                ]
                                                              |)
                                                            ]
                                                          |) in
                                                        let~ row_offset : Ty.path "usize" :=
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.mul,
                                                            [
                                                              M.read (| thread_idx |);
                                                              M.read (| height_per_thread |)
                                                            ]
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.tuple [],
                                                                M.match_operator (|
                                                                  Ty.tuple [],
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::ChunksExactMut")
                                                                          []
                                                                          [ Challenge ]
                                                                      ],
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::ChunksExactMut")
                                                                            []
                                                                            [ Challenge ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::ChunksExactMut")
                                                                              []
                                                                              [ Challenge ]
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::ChunksExactMut")
                                                                                []
                                                                                [ Challenge ]
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::ChunksExactMut")
                                                                              []
                                                                              [ Challenge ],
                                                                            [],
                                                                            [],
                                                                            "enumerate",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::ChunksExactMut")
                                                                                []
                                                                                [ Challenge ],
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Challenge ],
                                                                                "chunks_exact_mut",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::DerefMut",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        [],
                                                                                        "deref_mut",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          denoms
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.read (|
                                                                                  num_interactions
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::ChunksExactMut")
                                                                                  []
                                                                                  [ Challenge ]
                                                                              ],
                                                                            γ
                                                                          |) in
                                                                        M.read (|
                                                                          M.loop (|
                                                                            Ty.tuple [],
                                                                            ltac:(M.monadic
                                                                              (let~ _ :
                                                                                  Ty.tuple [] :=
                                                                                M.match_operator (|
                                                                                  Ty.tuple [],
                                                                                  M.alloc (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&mut")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "slice")
                                                                                                  []
                                                                                                  [
                                                                                                    Challenge
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                      ],
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&mut")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "slice")
                                                                                                    []
                                                                                                    [
                                                                                                      Challenge
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::ChunksExactMut")
                                                                                              []
                                                                                              [
                                                                                                Challenge
                                                                                              ]
                                                                                          ],
                                                                                        [],
                                                                                        [],
                                                                                        "next",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              iter
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let _ :=
                                                                                          M.is_struct_tuple (|
                                                                                            γ,
                                                                                            "core::option::Option::None"
                                                                                          |) in
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::option::Option::Some",
                                                                                            0
                                                                                          |) in
                                                                                        let γ1_0 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ0_0,
                                                                                            0
                                                                                          |) in
                                                                                        let γ1_1 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ0_0,
                                                                                            1
                                                                                          |) in
                                                                                        let n :=
                                                                                          M.copy (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            γ1_0
                                                                                          |) in
                                                                                        let
                                                                                              denom_row :=
                                                                                          M.copy (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&mut")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "slice")
                                                                                                  []
                                                                                                  [
                                                                                                    Challenge
                                                                                                  ]
                                                                                              ],
                                                                                            γ1_1
                                                                                          |) in
                                                                                        M.read (|
                                                                                          let~
                                                                                                evaluator :
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::interaction::trace::Evaluator")
                                                                                                []
                                                                                                [ F
                                                                                                ] :=
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::interaction::trace::Evaluator")
                                                                                                []
                                                                                                [ F
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::function::Fn",
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::interaction::trace::Evaluator")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ]),
                                                                                                [],
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ]
                                                                                                ],
                                                                                                "call",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  evaluator
                                                                                                |);
                                                                                                Value.Tuple
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      BinOp.Wrap.add,
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          row_offset
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          n
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                              ]
                                                                                            |) in
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              M.match_operator (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                M.alloc (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::adapters::zip::Zip")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::IterMut")
                                                                                                        []
                                                                                                        [
                                                                                                          Challenge
                                                                                                        ];
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::Iter")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "openvm_stark_backend::interaction::Interaction")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                []
                                                                                                                [
                                                                                                                  F
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ],
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::iter::adapters::zip::Zip")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::IterMut")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::Iter")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "openvm_stark_backend::interaction::Interaction")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ]
                                                                                                      ],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::iter::adapters::zip::Zip")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::IterMut")
                                                                                                            []
                                                                                                            [
                                                                                                              Challenge
                                                                                                            ];
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::Iter")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      F
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ]
                                                                                                        ],
                                                                                                      [],
                                                                                                      [],
                                                                                                      "into_iter",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::iter::adapters::zip::Zip")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::IterMut")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge
                                                                                                              ];
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::Iter")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "openvm_stark_backend::interaction::Interaction")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ],
                                                                                                        M.get_trait_method (|
                                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::IterMut")
                                                                                                            []
                                                                                                            [
                                                                                                              Challenge
                                                                                                            ],
                                                                                                          [],
                                                                                                          [],
                                                                                                          "zip",
                                                                                                          [],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::Iter")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "openvm_stark_backend::interaction::Interaction")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ]
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::IterMut")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge
                                                                                                              ],
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "slice")
                                                                                                                []
                                                                                                                [
                                                                                                                  Challenge
                                                                                                                ],
                                                                                                              "iter_mut",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.MutRef,
                                                                                                                M.deref (|
                                                                                                                  M.read (|
                                                                                                                    denom_row
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |);
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::Iter")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "openvm_stark_backend::interaction::Interaction")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ],
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "slice")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "openvm_stark_backend::interaction::Interaction")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ],
                                                                                                              "iter",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.read (|
                                                                                                                    all_interactions
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            iter :=
                                                                                                        M.copy (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::iter::adapters::zip::Zip")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::slice::iter::IterMut")
                                                                                                                []
                                                                                                                [
                                                                                                                  Challenge
                                                                                                                ];
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::slice::iter::Iter")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "openvm_stark_backend::interaction::Interaction")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ],
                                                                                                          γ
                                                                                                        |) in
                                                                                                      M.read (|
                                                                                                        M.loop (|
                                                                                                          Ty.tuple
                                                                                                            [],
                                                                                                          ltac:(M.monadic
                                                                                                            (let~
                                                                                                                  _ :
                                                                                                                Ty.tuple
                                                                                                                  [] :=
                                                                                                              M.match_operator (|
                                                                                                                Ty.tuple
                                                                                                                  [],
                                                                                                                M.alloc (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "core::option::Option")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.tuple
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&mut")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Challenge
                                                                                                                            ];
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::option::Option")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.tuple
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&mut")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Challenge
                                                                                                                              ];
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "openvm_stark_backend::interaction::Interaction")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        F
                                                                                                                                      ]
                                                                                                                                  ]
                                                                                                                              ]
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "core::iter::adapters::zip::Zip")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::slice::iter::IterMut")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Challenge
                                                                                                                            ];
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::slice::iter::Iter")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      [],
                                                                                                                      [],
                                                                                                                      "next",
                                                                                                                      [],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.MutRef,
                                                                                                                        M.deref (|
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.MutRef,
                                                                                                                            iter
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |),
                                                                                                                [
                                                                                                                  fun
                                                                                                                      γ =>
                                                                                                                    ltac:(M.monadic
                                                                                                                      (let
                                                                                                                            _ :=
                                                                                                                        M.is_struct_tuple (|
                                                                                                                          γ,
                                                                                                                          "core::option::Option::None"
                                                                                                                        |) in
                                                                                                                      M.never_to_any (|
                                                                                                                        M.read (|
                                                                                                                          M.break (||)
                                                                                                                        |)
                                                                                                                      |)));
                                                                                                                  fun
                                                                                                                      γ =>
                                                                                                                    ltac:(M.monadic
                                                                                                                      (let
                                                                                                                            γ0_0 :=
                                                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                                                          γ,
                                                                                                                          "core::option::Option::Some",
                                                                                                                          0
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            γ1_0 :=
                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                          γ0_0,
                                                                                                                          0
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            γ1_1 :=
                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                          γ0_0,
                                                                                                                          1
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            denom :=
                                                                                                                        M.copy (|
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&mut")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Challenge
                                                                                                                            ],
                                                                                                                          γ1_0
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            interaction :=
                                                                                                                        M.copy (|
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                            ],
                                                                                                                          γ1_1
                                                                                                                        |) in
                                                                                                                      M.read (|
                                                                                                                        let~
                                                                                                                              _ :
                                                                                                                            Ty.tuple
                                                                                                                              [] :=
                                                                                                                          M.match_operator (|
                                                                                                                            Ty.tuple
                                                                                                                              [],
                                                                                                                            M.alloc (|
                                                                                                                              Ty.tuple
                                                                                                                                [],
                                                                                                                              Value.Tuple
                                                                                                                                []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (let
                                                                                                                                        γ :=
                                                                                                                                    M.use
                                                                                                                                      (M.alloc (|
                                                                                                                                        Ty.path
                                                                                                                                          "bool",
                                                                                                                                        Value.Bool
                                                                                                                                          true
                                                                                                                                      |)) in
                                                                                                                                  let
                                                                                                                                        _ :=
                                                                                                                                    is_constant_or_break_match (|
                                                                                                                                      M.read (|
                                                                                                                                        γ
                                                                                                                                      |),
                                                                                                                                      Value.Bool
                                                                                                                                        true
                                                                                                                                    |) in
                                                                                                                                  M.read (|
                                                                                                                                    let~
                                                                                                                                          _ :
                                                                                                                                        Ty.tuple
                                                                                                                                          [] :=
                                                                                                                                      M.match_operator (|
                                                                                                                                        Ty.tuple
                                                                                                                                          [],
                                                                                                                                        M.alloc (|
                                                                                                                                          Ty.tuple
                                                                                                                                            [],
                                                                                                                                          Value.Tuple
                                                                                                                                            []
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let
                                                                                                                                                    γ :=
                                                                                                                                                M.use
                                                                                                                                                  (M.alloc (|
                                                                                                                                                    Ty.path
                                                                                                                                                      "bool",
                                                                                                                                                    UnOp.not (|
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        Ty.path
                                                                                                                                                          "bool",
                                                                                                                                                        BinOp.le,
                                                                                                                                                        [
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            Ty.path
                                                                                                                                                              "usize",
                                                                                                                                                            M.get_associated_function (|
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                                    []
                                                                                                                                                                    [
                                                                                                                                                                      F
                                                                                                                                                                    ];
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                ],
                                                                                                                                                              "len",
                                                                                                                                                              [],
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.borrow (|
                                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                                  M.deref (|
                                                                                                                                                                    M.read (|
                                                                                                                                                                      interaction
                                                                                                                                                                    |)
                                                                                                                                                                  |),
                                                                                                                                                                  "openvm_stark_backend::interaction::Interaction",
                                                                                                                                                                  "message"
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |);
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            Ty.path
                                                                                                                                                              "usize",
                                                                                                                                                            M.get_associated_function (|
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Challenge;
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                ],
                                                                                                                                                              "len",
                                                                                                                                                              [],
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.borrow (|
                                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                                betas
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  |)) in
                                                                                                                                              let
                                                                                                                                                    _ :=
                                                                                                                                                is_constant_or_break_match (|
                                                                                                                                                  M.read (|
                                                                                                                                                    γ
                                                                                                                                                  |),
                                                                                                                                                  Value.Bool
                                                                                                                                                    true
                                                                                                                                                |) in
                                                                                                                                              M.never_to_any (|
                                                                                                                                                M.call_closure (|
                                                                                                                                                  Ty.path
                                                                                                                                                    "never",
                                                                                                                                                  M.get_function (|
                                                                                                                                                    "core::panicking::panic",
                                                                                                                                                    [],
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    mk_str (|
                                                                                                                                                      "assertion failed: interaction.message.len() <= betas.len()"
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |)));
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (Value.Tuple
                                                                                                                                                []))
                                                                                                                                        ]
                                                                                                                                      |) in
                                                                                                                                    M.alloc (|
                                                                                                                                      Ty.tuple
                                                                                                                                        [],
                                                                                                                                      Value.Tuple
                                                                                                                                        []
                                                                                                                                    |)
                                                                                                                                  |)));
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (Value.Tuple
                                                                                                                                    []))
                                                                                                                            ]
                                                                                                                          |) in
                                                                                                                        let~
                                                                                                                              b :
                                                                                                                            F :=
                                                                                                                          M.call_closure (|
                                                                                                                            F,
                                                                                                                            M.get_trait_method (|
                                                                                                                              "p3_field::field::FieldAlgebra",
                                                                                                                              F,
                                                                                                                              [],
                                                                                                                              [],
                                                                                                                              "from_canonical_u32",
                                                                                                                              [],
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.call_closure (|
                                                                                                                                Ty.path
                                                                                                                                  "u32",
                                                                                                                                BinOp.Wrap.add,
                                                                                                                                [
                                                                                                                                  M.cast
                                                                                                                                    (Ty.path
                                                                                                                                      "u32")
                                                                                                                                    (M.read (|
                                                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                                                        M.deref (|
                                                                                                                                          M.read (|
                                                                                                                                            interaction
                                                                                                                                          |)
                                                                                                                                        |),
                                                                                                                                        "openvm_stark_backend::interaction::Interaction",
                                                                                                                                        "bus_index"
                                                                                                                                      |)
                                                                                                                                    |));
                                                                                                                                  Value.Integer
                                                                                                                                    IntegerKind.U32
                                                                                                                                    1
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |) in
                                                                                                                        let~
                                                                                                                              fields :
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::slice::iter::Iter")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    F
                                                                                                                                  ]
                                                                                                                              ] :=
                                                                                                                          M.call_closure (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::slice::iter::Iter")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    F
                                                                                                                                  ]
                                                                                                                              ],
                                                                                                                            M.get_associated_function (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "slice")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ]
                                                                                                                                ],
                                                                                                                              "iter",
                                                                                                                              [],
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.deref (|
                                                                                                                                  M.call_closure (|
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "&")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "slice")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                F
                                                                                                                                              ]
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                    M.get_trait_method (|
                                                                                                                                      "core::ops::deref::Deref",
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "alloc::vec::Vec")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              F
                                                                                                                                            ];
                                                                                                                                          Ty.path
                                                                                                                                            "alloc::alloc::Global"
                                                                                                                                        ],
                                                                                                                                      [],
                                                                                                                                      [],
                                                                                                                                      "deref",
                                                                                                                                      [],
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.borrow (|
                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                                          M.deref (|
                                                                                                                                            M.read (|
                                                                                                                                              interaction
                                                                                                                                            |)
                                                                                                                                          |),
                                                                                                                                          "openvm_stark_backend::interaction::Interaction",
                                                                                                                                          "message"
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |) in
                                                                                                                        let~
                                                                                                                              _ :
                                                                                                                            Ty.tuple
                                                                                                                              [] :=
                                                                                                                          M.write (|
                                                                                                                            M.deref (|
                                                                                                                              M.read (|
                                                                                                                                denom
                                                                                                                              |)
                                                                                                                            |),
                                                                                                                            M.call_closure (|
                                                                                                                              Challenge,
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::arith::Add",
                                                                                                                                Challenge,
                                                                                                                                [],
                                                                                                                                [
                                                                                                                                  F
                                                                                                                                ],
                                                                                                                                "add",
                                                                                                                                [],
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.read (|
                                                                                                                                  alpha
                                                                                                                                |);
                                                                                                                                M.call_closure (|
                                                                                                                                  F,
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "openvm_stark_backend::interaction::trace::Evaluator")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        F
                                                                                                                                      ],
                                                                                                                                    [],
                                                                                                                                    [
                                                                                                                                      F;
                                                                                                                                      F
                                                                                                                                    ],
                                                                                                                                    "eval_expr",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      evaluator
                                                                                                                                    |);
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      M.deref (|
                                                                                                                                        M.call_closure (|
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "&")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  F
                                                                                                                                                ]
                                                                                                                                            ],
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::option::Option")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "&")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        F
                                                                                                                                                      ]
                                                                                                                                                  ]
                                                                                                                                              ],
                                                                                                                                            "expect",
                                                                                                                                            [],
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.call_closure (|
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::option::Option")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "&")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                        []
                                                                                                                                                        [
                                                                                                                                                          F
                                                                                                                                                        ]
                                                                                                                                                    ]
                                                                                                                                                ],
                                                                                                                                              M.get_trait_method (|
                                                                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        F
                                                                                                                                                      ]
                                                                                                                                                  ],
                                                                                                                                                [],
                                                                                                                                                [],
                                                                                                                                                "next",
                                                                                                                                                [],
                                                                                                                                                []
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                M.borrow (|
                                                                                                                                                  Pointer.Kind.MutRef,
                                                                                                                                                  fields
                                                                                                                                                |)
                                                                                                                                              ]
                                                                                                                                            |);
                                                                                                                                            M.borrow (|
                                                                                                                                              Pointer.Kind.Ref,
                                                                                                                                              M.deref (|
                                                                                                                                                mk_str (|
                                                                                                                                                  "fields should not be empty"
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |) in
                                                                                                                        let~
                                                                                                                              _ :
                                                                                                                            Ty.tuple
                                                                                                                              [] :=
                                                                                                                          M.read (|
                                                                                                                            M.use
                                                                                                                              (M.alloc (|
                                                                                                                                Ty.tuple
                                                                                                                                  [],
                                                                                                                                M.match_operator (|
                                                                                                                                  Ty.tuple
                                                                                                                                    [],
                                                                                                                                  M.alloc (|
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::iter::adapters::zip::Zip")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                F
                                                                                                                                              ]
                                                                                                                                          ];
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::iter::adapters::skip::Skip")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Challenge
                                                                                                                                              ]
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                    M.call_closure (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "core::iter::adapters::zip::Zip")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "core::slice::iter::Iter")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  F
                                                                                                                                                ]
                                                                                                                                            ];
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "core::iter::adapters::skip::Skip")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Challenge
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                        ],
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::iter::traits::collect::IntoIterator",
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::iter::adapters::zip::Zip")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    F
                                                                                                                                                  ]
                                                                                                                                              ];
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::iter::adapters::skip::Skip")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Challenge
                                                                                                                                                  ]
                                                                                                                                              ]
                                                                                                                                          ],
                                                                                                                                        [],
                                                                                                                                        [],
                                                                                                                                        "into_iter",
                                                                                                                                        [],
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "core::iter::adapters::zip::Zip")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      F
                                                                                                                                                    ]
                                                                                                                                                ];
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::iter::adapters::skip::Skip")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Challenge
                                                                                                                                                    ]
                                                                                                                                                ]
                                                                                                                                            ],
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    F
                                                                                                                                                  ]
                                                                                                                                              ],
                                                                                                                                            [],
                                                                                                                                            [],
                                                                                                                                            "zip",
                                                                                                                                            [],
                                                                                                                                            [
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::iter::adapters::skip::Skip")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Challenge
                                                                                                                                                    ]
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.read (|
                                                                                                                                              fields
                                                                                                                                            |);
                                                                                                                                            M.call_closure (|
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::iter::adapters::skip::Skip")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Challenge
                                                                                                                                                    ]
                                                                                                                                                ],
                                                                                                                                              M.get_trait_method (|
                                                                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Challenge
                                                                                                                                                  ],
                                                                                                                                                [],
                                                                                                                                                [],
                                                                                                                                                "skip",
                                                                                                                                                [],
                                                                                                                                                []
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                M.call_closure (|
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Challenge
                                                                                                                                                    ],
                                                                                                                                                  M.get_associated_function (|
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "slice")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        Challenge
                                                                                                                                                      ],
                                                                                                                                                    "iter",
                                                                                                                                                    [],
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.borrow (|
                                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                                      M.deref (|
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "&")
                                                                                                                                                            []
                                                                                                                                                            [
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "slice")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Challenge
                                                                                                                                                                ]
                                                                                                                                                            ],
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::ops::deref::Deref",
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "alloc::vec::Vec")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Challenge;
                                                                                                                                                                Ty.path
                                                                                                                                                                  "alloc::alloc::Global"
                                                                                                                                                              ],
                                                                                                                                                            [],
                                                                                                                                                            [],
                                                                                                                                                            "deref",
                                                                                                                                                            [],
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.borrow (|
                                                                                                                                                              Pointer.Kind.Ref,
                                                                                                                                                              betas
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |)
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |);
                                                                                                                                                Value.Integer
                                                                                                                                                  IntegerKind.Usize
                                                                                                                                                  1
                                                                                                                                              ]
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              iter :=
                                                                                                                                          M.copy (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::iter::adapters::zip::Zip")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        F
                                                                                                                                                      ]
                                                                                                                                                  ];
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::iter::adapters::skip::Skip")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::slice::iter::Iter")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        Challenge
                                                                                                                                                      ]
                                                                                                                                                  ]
                                                                                                                                              ],
                                                                                                                                            γ
                                                                                                                                          |) in
                                                                                                                                        M.read (|
                                                                                                                                          M.loop (|
                                                                                                                                            Ty.tuple
                                                                                                                                              [],
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let~
                                                                                                                                                    _ :
                                                                                                                                                  Ty.tuple
                                                                                                                                                    [] :=
                                                                                                                                                M.match_operator (|
                                                                                                                                                  Ty.tuple
                                                                                                                                                    [],
                                                                                                                                                  M.alloc (|
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::option::Option")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        Ty.tuple
                                                                                                                                                          [
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "&")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                                  []
                                                                                                                                                                  [
                                                                                                                                                                    F
                                                                                                                                                                  ]
                                                                                                                                                              ];
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "&")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Challenge
                                                                                                                                                              ]
                                                                                                                                                          ]
                                                                                                                                                      ],
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "core::option::Option")
                                                                                                                                                        []
                                                                                                                                                        [
                                                                                                                                                          Ty.tuple
                                                                                                                                                            [
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "&")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                                    []
                                                                                                                                                                    [
                                                                                                                                                                      F
                                                                                                                                                                    ]
                                                                                                                                                                ];
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "&")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Challenge
                                                                                                                                                                ]
                                                                                                                                                            ]
                                                                                                                                                        ],
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                                                                                        Ty.apply
                                                                                                                                                          (Ty.path
                                                                                                                                                            "core::iter::adapters::zip::Zip")
                                                                                                                                                          []
                                                                                                                                                          [
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                                  []
                                                                                                                                                                  [
                                                                                                                                                                    F
                                                                                                                                                                  ]
                                                                                                                                                              ];
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "core::iter::adapters::skip::Skip")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                                                  []
                                                                                                                                                                  [
                                                                                                                                                                    Challenge
                                                                                                                                                                  ]
                                                                                                                                                              ]
                                                                                                                                                          ],
                                                                                                                                                        [],
                                                                                                                                                        [],
                                                                                                                                                        "next",
                                                                                                                                                        [],
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.borrow (|
                                                                                                                                                          Pointer.Kind.MutRef,
                                                                                                                                                          M.deref (|
                                                                                                                                                            M.borrow (|
                                                                                                                                                              Pointer.Kind.MutRef,
                                                                                                                                                              iter
                                                                                                                                                            |)
                                                                                                                                                          |)
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    fun
                                                                                                                                                        γ =>
                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                        (let
                                                                                                                                                              _ :=
                                                                                                                                                          M.is_struct_tuple (|
                                                                                                                                                            γ,
                                                                                                                                                            "core::option::Option::None"
                                                                                                                                                          |) in
                                                                                                                                                        M.never_to_any (|
                                                                                                                                                          M.read (|
                                                                                                                                                            M.break (||)
                                                                                                                                                          |)
                                                                                                                                                        |)));
                                                                                                                                                    fun
                                                                                                                                                        γ =>
                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                        (let
                                                                                                                                                              γ0_0 :=
                                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                            γ,
                                                                                                                                                            "core::option::Option::Some",
                                                                                                                                                            0
                                                                                                                                                          |) in
                                                                                                                                                        let
                                                                                                                                                              γ1_0 :=
                                                                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                                                                            γ0_0,
                                                                                                                                                            0
                                                                                                                                                          |) in
                                                                                                                                                        let
                                                                                                                                                              γ1_1 :=
                                                                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                                                                            γ0_0,
                                                                                                                                                            1
                                                                                                                                                          |) in
                                                                                                                                                        let
                                                                                                                                                              expr :=
                                                                                                                                                          M.copy (|
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "&")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                                  []
                                                                                                                                                                  [
                                                                                                                                                                    F
                                                                                                                                                                  ]
                                                                                                                                                              ],
                                                                                                                                                            γ1_0
                                                                                                                                                          |) in
                                                                                                                                                        let
                                                                                                                                                              γ1_1 :=
                                                                                                                                                          M.read (|
                                                                                                                                                            γ1_1
                                                                                                                                                          |) in
                                                                                                                                                        let
                                                                                                                                                              beta :=
                                                                                                                                                          M.copy (|
                                                                                                                                                            Challenge,
                                                                                                                                                            γ1_1
                                                                                                                                                          |) in
                                                                                                                                                        M.read (|
                                                                                                                                                          let~
                                                                                                                                                                _ :
                                                                                                                                                              Ty.tuple
                                                                                                                                                                [] :=
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              Ty.tuple
                                                                                                                                                                [],
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "core::ops::arith::AddAssign",
                                                                                                                                                                Challenge,
                                                                                                                                                                [],
                                                                                                                                                                [
                                                                                                                                                                  Challenge
                                                                                                                                                                ],
                                                                                                                                                                "add_assign",
                                                                                                                                                                [],
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.borrow (|
                                                                                                                                                                  Pointer.Kind.MutRef,
                                                                                                                                                                  M.deref (|
                                                                                                                                                                    M.read (|
                                                                                                                                                                      denom
                                                                                                                                                                    |)
                                                                                                                                                                  |)
                                                                                                                                                                |);
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  Challenge,
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::ops::arith::Mul",
                                                                                                                                                                    Challenge,
                                                                                                                                                                    [],
                                                                                                                                                                    [
                                                                                                                                                                      F
                                                                                                                                                                    ],
                                                                                                                                                                    "mul",
                                                                                                                                                                    [],
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.read (|
                                                                                                                                                                      beta
                                                                                                                                                                    |);
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      F,
                                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "openvm_stark_backend::interaction::trace::Evaluator")
                                                                                                                                                                          []
                                                                                                                                                                          [
                                                                                                                                                                            F
                                                                                                                                                                          ],
                                                                                                                                                                        [],
                                                                                                                                                                        [
                                                                                                                                                                          F;
                                                                                                                                                                          F
                                                                                                                                                                        ],
                                                                                                                                                                        "eval_expr",
                                                                                                                                                                        [],
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        M.borrow (|
                                                                                                                                                                          Pointer.Kind.Ref,
                                                                                                                                                                          evaluator
                                                                                                                                                                        |);
                                                                                                                                                                        M.borrow (|
                                                                                                                                                                          Pointer.Kind.Ref,
                                                                                                                                                                          M.deref (|
                                                                                                                                                                            M.read (|
                                                                                                                                                                              expr
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        |)
                                                                                                                                                                      ]
                                                                                                                                                                    |)
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |) in
                                                                                                                                                          M.alloc (|
                                                                                                                                                            Ty.tuple
                                                                                                                                                              [],
                                                                                                                                                            Value.Tuple
                                                                                                                                                              []
                                                                                                                                                          |)
                                                                                                                                                        |)))
                                                                                                                                                  ]
                                                                                                                                                |) in
                                                                                                                                              M.alloc (|
                                                                                                                                                Ty.tuple
                                                                                                                                                  [],
                                                                                                                                                Value.Tuple
                                                                                                                                                  []
                                                                                                                                              |)))
                                                                                                                                          |)
                                                                                                                                        |)))
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |))
                                                                                                                          |) in
                                                                                                                        let~
                                                                                                                              _ :
                                                                                                                            Ty.tuple
                                                                                                                              [] :=
                                                                                                                          M.call_closure (|
                                                                                                                            Ty.tuple
                                                                                                                              [],
                                                                                                                            M.get_trait_method (|
                                                                                                                              "core::ops::arith::AddAssign",
                                                                                                                              Challenge,
                                                                                                                              [],
                                                                                                                              [
                                                                                                                                Challenge
                                                                                                                              ],
                                                                                                                              "add_assign",
                                                                                                                              [],
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.MutRef,
                                                                                                                                M.deref (|
                                                                                                                                  M.read (|
                                                                                                                                    denom
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |);
                                                                                                                              M.call_closure (|
                                                                                                                                Challenge,
                                                                                                                                M.get_trait_method (|
                                                                                                                                  "core::ops::arith::Mul",
                                                                                                                                  Challenge,
                                                                                                                                  [],
                                                                                                                                  [
                                                                                                                                    F
                                                                                                                                  ],
                                                                                                                                  "mul",
                                                                                                                                  [],
                                                                                                                                  []
                                                                                                                                |),
                                                                                                                                [
                                                                                                                                  M.read (|
                                                                                                                                    M.deref (|
                                                                                                                                      M.call_closure (|
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Challenge
                                                                                                                                          ],
                                                                                                                                        M.get_trait_method (|
                                                                                                                                          "core::ops::index::Index",
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "alloc::vec::Vec")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Challenge;
                                                                                                                                              Ty.path
                                                                                                                                                "alloc::alloc::Global"
                                                                                                                                            ],
                                                                                                                                          [],
                                                                                                                                          [
                                                                                                                                            Ty.path
                                                                                                                                              "usize"
                                                                                                                                          ],
                                                                                                                                          "index",
                                                                                                                                          [],
                                                                                                                                          []
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          M.borrow (|
                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                            betas
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "usize",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      F
                                                                                                                                                    ];
                                                                                                                                                  Ty.path
                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                ],
                                                                                                                                              "len",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                  M.deref (|
                                                                                                                                                    M.read (|
                                                                                                                                                      interaction
                                                                                                                                                    |)
                                                                                                                                                  |),
                                                                                                                                                  "openvm_stark_backend::interaction::Interaction",
                                                                                                                                                  "message"
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  |);
                                                                                                                                  M.read (|
                                                                                                                                    b
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |) in
                                                                                                                        M.alloc (|
                                                                                                                          Ty.tuple
                                                                                                                            [],
                                                                                                                          Value.Tuple
                                                                                                                            []
                                                                                                                        |)
                                                                                                                      |)))
                                                                                                                ]
                                                                                                              |) in
                                                                                                            M.alloc (|
                                                                                                              Ty.tuple
                                                                                                                [],
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |)))
                                                                                                        |)
                                                                                                      |)))
                                                                                                ]
                                                                                              |)
                                                                                            |))
                                                                                        |)))
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Ty.tuple [],
                                                                                Value.Tuple []
                                                                              |)))
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |)
                                                              |))
                                                          |) in
                                                        let~ reciprocals :
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ] :=
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_function (|
                                                              "p3_field::batch_inverse::batch_multiplicative_inverse",
                                                              [],
                                                              [ Challenge ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Challenge ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Challenge;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            denoms
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_function (|
                                                              "core::mem::drop",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                            |),
                                                            [ M.read (| denoms |) ]
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_trait_method (|
                                                              "rayon::iter::ParallelIterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "rayon::iter::enumerate::Enumerate")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "rayon::iter::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "rayon::slice::chunks::ChunksExactMut")
                                                                        []
                                                                        [ Challenge ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "rayon::slice::chunks::ChunksExact")
                                                                        []
                                                                        [ Challenge ]
                                                                    ]
                                                                ],
                                                              [],
                                                              [],
                                                              "for_each",
                                                              [],
                                                              [
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Challenge ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Challenge ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.tuple [])
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "rayon::iter::enumerate::Enumerate")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "rayon::iter::zip::Zip")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "rayon::slice::chunks::ChunksExactMut")
                                                                          []
                                                                          [ Challenge ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "rayon::slice::chunks::ChunksExact")
                                                                          []
                                                                          [ Challenge ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "rayon::iter::IndexedParallelIterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "rayon::iter::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "rayon::slice::chunks::ChunksExactMut")
                                                                        []
                                                                        [ Challenge ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "rayon::slice::chunks::ChunksExact")
                                                                        []
                                                                        [ Challenge ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "enumerate",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "rayon::iter::zip::Zip")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "rayon::slice::chunks::ChunksExactMut")
                                                                          []
                                                                          [ Challenge ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "rayon::slice::chunks::ChunksExact")
                                                                          []
                                                                          [ Challenge ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "rayon::iter::IndexedParallelIterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "rayon::slice::chunks::ChunksExactMut")
                                                                        []
                                                                        [ Challenge ],
                                                                      [],
                                                                      [],
                                                                      "zip",
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "rayon::slice::chunks::ChunksExact")
                                                                          []
                                                                          [ Challenge ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "rayon::slice::chunks::ChunksExactMut")
                                                                          []
                                                                          [ Challenge ],
                                                                        M.get_trait_method (|
                                                                          "rayon::slice::ParallelSliceMut",
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ Challenge ],
                                                                          [],
                                                                          [ Challenge ],
                                                                          "par_chunks_exact_mut",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.read (|
                                                                                perm_values
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.read (| perm_width |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "rayon::slice::chunks::ChunksExact")
                                                                          []
                                                                          [ Challenge ],
                                                                        M.get_trait_method (|
                                                                          "rayon::slice::ParallelSlice",
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ Challenge ],
                                                                          [],
                                                                          [ Challenge ],
                                                                          "par_chunks_exact",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      []
                                                                                      [ Challenge ]
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "core::ops::deref::Deref",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Challenge;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  [],
                                                                                  "deref",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    reciprocals
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            num_interactions
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.tuple [],
                                                                          M.alloc (|
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            α0
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ,
                                                                                    0
                                                                                  |) in
                                                                                let γ0_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ,
                                                                                    1
                                                                                  |) in
                                                                                let n :=
                                                                                  M.copy (|
                                                                                    Ty.path "usize",
                                                                                    γ0_0
                                                                                  |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_1,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_1,
                                                                                    1
                                                                                  |) in
                                                                                let perm_row :=
                                                                                  M.copy (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                      ],
                                                                                    γ1_0
                                                                                  |) in
                                                                                let reciprocals :=
                                                                                  M.copy (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                      ],
                                                                                    γ1_1
                                                                                  |) in
                                                                                M.read (|
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.match_operator (|
                                                                                      Ty.tuple [],
                                                                                      M.alloc (|
                                                                                        Ty.tuple [],
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  Ty.path
                                                                                                    "bool",
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.read (|
                                                                                              let~
                                                                                                    _ :
                                                                                                  Ty.tuple
                                                                                                    [] :=
                                                                                                M.match_operator (|
                                                                                                  Ty.tuple
                                                                                                    [],
                                                                                                  M.alloc (|
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize"
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize"
                                                                                                          ]
                                                                                                      ],
                                                                                                    Value.Tuple
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.alloc (|
                                                                                                            Ty.path
                                                                                                              "usize",
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "usize",
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Challenge
                                                                                                                  ],
                                                                                                                "len",
                                                                                                                [],
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  M.deref (|
                                                                                                                    M.read (|
                                                                                                                      perm_row
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          perm_width
                                                                                                        |)
                                                                                                      ]
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (let
                                                                                                              γ0_0 :=
                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                            γ,
                                                                                                            0
                                                                                                          |) in
                                                                                                        let
                                                                                                              γ0_1 :=
                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                            γ,
                                                                                                            1
                                                                                                          |) in
                                                                                                        let
                                                                                                              left_val :=
                                                                                                          M.copy (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ],
                                                                                                            γ0_0
                                                                                                          |) in
                                                                                                        let
                                                                                                              right_val :=
                                                                                                          M.copy (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ],
                                                                                                            γ0_1
                                                                                                          |) in
                                                                                                        M.match_operator (|
                                                                                                          Ty.tuple
                                                                                                            [],
                                                                                                          M.alloc (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            Value.Tuple
                                                                                                              []
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      γ :=
                                                                                                                  M.use
                                                                                                                    (M.alloc (|
                                                                                                                      Ty.path
                                                                                                                        "bool",
                                                                                                                      UnOp.not (|
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.path
                                                                                                                            "bool",
                                                                                                                          BinOp.eq,
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              M.deref (|
                                                                                                                                M.read (|
                                                                                                                                  left_val
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              M.deref (|
                                                                                                                                M.read (|
                                                                                                                                  right_val
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)) in
                                                                                                                let
                                                                                                                      _ :=
                                                                                                                  is_constant_or_break_match (|
                                                                                                                    M.read (|
                                                                                                                      γ
                                                                                                                    |),
                                                                                                                    Value.Bool
                                                                                                                      true
                                                                                                                  |) in
                                                                                                                M.never_to_any (|
                                                                                                                  M.read (|
                                                                                                                    let~
                                                                                                                          kind :
                                                                                                                        Ty.path
                                                                                                                          "core::panicking::AssertKind" :=
                                                                                                                      Value.StructTuple
                                                                                                                        "core::panicking::AssertKind::Eq"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        [] in
                                                                                                                    M.alloc (|
                                                                                                                      Ty.path
                                                                                                                        "never",
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.path
                                                                                                                          "never",
                                                                                                                        M.get_function (|
                                                                                                                          "core::panicking::assert_failed",
                                                                                                                          [],
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "usize";
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          ]
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            kind
                                                                                                                          |);
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.deref (|
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.deref (|
                                                                                                                                  M.read (|
                                                                                                                                    left_val
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |);
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.deref (|
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.deref (|
                                                                                                                                  M.read (|
                                                                                                                                    right_val
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |);
                                                                                                                          Value.StructTuple
                                                                                                                            "core::option::Option::None"
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "core::fmt::Arguments"
                                                                                                                            ]
                                                                                                                            []
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)));
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (Value.Tuple
                                                                                                                  []))
                                                                                                          ]
                                                                                                        |)))
                                                                                                  ]
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (Value.Tuple
                                                                                              []))
                                                                                      ]
                                                                                    |) in
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.match_operator (|
                                                                                      Ty.tuple [],
                                                                                      M.alloc (|
                                                                                        Ty.tuple [],
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  Ty.path
                                                                                                    "bool",
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.read (|
                                                                                              let~
                                                                                                    _ :
                                                                                                  Ty.tuple
                                                                                                    [] :=
                                                                                                M.match_operator (|
                                                                                                  Ty.tuple
                                                                                                    [],
                                                                                                  M.alloc (|
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize"
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize"
                                                                                                          ]
                                                                                                      ],
                                                                                                    Value.Tuple
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.alloc (|
                                                                                                            Ty.path
                                                                                                              "usize",
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "usize",
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Challenge
                                                                                                                  ],
                                                                                                                "len",
                                                                                                                [],
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  M.deref (|
                                                                                                                    M.read (|
                                                                                                                      reciprocals
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          num_interactions
                                                                                                        |)
                                                                                                      ]
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (let
                                                                                                              γ0_0 :=
                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                            γ,
                                                                                                            0
                                                                                                          |) in
                                                                                                        let
                                                                                                              γ0_1 :=
                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                            γ,
                                                                                                            1
                                                                                                          |) in
                                                                                                        let
                                                                                                              left_val :=
                                                                                                          M.copy (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ],
                                                                                                            γ0_0
                                                                                                          |) in
                                                                                                        let
                                                                                                              right_val :=
                                                                                                          M.copy (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ],
                                                                                                            γ0_1
                                                                                                          |) in
                                                                                                        M.match_operator (|
                                                                                                          Ty.tuple
                                                                                                            [],
                                                                                                          M.alloc (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            Value.Tuple
                                                                                                              []
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      γ :=
                                                                                                                  M.use
                                                                                                                    (M.alloc (|
                                                                                                                      Ty.path
                                                                                                                        "bool",
                                                                                                                      UnOp.not (|
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.path
                                                                                                                            "bool",
                                                                                                                          BinOp.eq,
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              M.deref (|
                                                                                                                                M.read (|
                                                                                                                                  left_val
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              M.deref (|
                                                                                                                                M.read (|
                                                                                                                                  right_val
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)) in
                                                                                                                let
                                                                                                                      _ :=
                                                                                                                  is_constant_or_break_match (|
                                                                                                                    M.read (|
                                                                                                                      γ
                                                                                                                    |),
                                                                                                                    Value.Bool
                                                                                                                      true
                                                                                                                  |) in
                                                                                                                M.never_to_any (|
                                                                                                                  M.read (|
                                                                                                                    let~
                                                                                                                          kind :
                                                                                                                        Ty.path
                                                                                                                          "core::panicking::AssertKind" :=
                                                                                                                      Value.StructTuple
                                                                                                                        "core::panicking::AssertKind::Eq"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        [] in
                                                                                                                    M.alloc (|
                                                                                                                      Ty.path
                                                                                                                        "never",
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.path
                                                                                                                          "never",
                                                                                                                        M.get_function (|
                                                                                                                          "core::panicking::assert_failed",
                                                                                                                          [],
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "usize";
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          ]
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            kind
                                                                                                                          |);
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.deref (|
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.deref (|
                                                                                                                                  M.read (|
                                                                                                                                    left_val
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |);
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.deref (|
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.deref (|
                                                                                                                                  M.read (|
                                                                                                                                    right_val
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |);
                                                                                                                          Value.StructTuple
                                                                                                                            "core::option::Option::None"
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "core::fmt::Arguments"
                                                                                                                            ]
                                                                                                                            []
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)));
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (Value.Tuple
                                                                                                                  []))
                                                                                                          ]
                                                                                                        |)))
                                                                                                  ]
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (Value.Tuple
                                                                                              []))
                                                                                      ]
                                                                                    |) in
                                                                                  let~ evaluator :
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::interaction::trace::Evaluator")
                                                                                        []
                                                                                        [ F ] :=
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::interaction::trace::Evaluator")
                                                                                        []
                                                                                        [ F ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::function::Fn",
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::interaction::trace::Evaluator")
                                                                                            []
                                                                                            [ F ]),
                                                                                        [],
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ]
                                                                                        ],
                                                                                        "call",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          evaluator
                                                                                        |);
                                                                                        Value.Tuple
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "usize",
                                                                                              BinOp.Wrap.add,
                                                                                              [
                                                                                                M.read (|
                                                                                                  row_offset
                                                                                                |);
                                                                                                M.read (|
                                                                                                  n
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                      ]
                                                                                    |) in
                                                                                  let~ row_sum :
                                                                                      Challenge :=
                                                                                    M.read (|
                                                                                      get_constant (|
                                                                                        "p3_field::field::FieldAlgebra::ZERO",
                                                                                        Challenge
                                                                                      |)
                                                                                    |) in
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          M.match_operator (|
                                                                                            Ty.tuple
                                                                                              [],
                                                                                            M.alloc (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::iter::adapters::zip::Zip")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ]
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::IterMut")
                                                                                                    []
                                                                                                    [
                                                                                                      Challenge
                                                                                                    ]
                                                                                                ],
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::iter::adapters::zip::Zip")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::Iter")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize";
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      []
                                                                                                      [
                                                                                                        Challenge
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::collect::IntoIterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::adapters::zip::Zip")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::Iter")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "usize";
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::IterMut")
                                                                                                        []
                                                                                                        [
                                                                                                          Challenge
                                                                                                        ]
                                                                                                    ],
                                                                                                  [],
                                                                                                  [],
                                                                                                  "into_iter",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::iter::adapters::zip::Zip")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::Iter")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize";
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::IterMut")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge
                                                                                                          ]
                                                                                                      ],
                                                                                                    M.get_function (|
                                                                                                      "core::iter::adapters::zip::zip",
                                                                                                      [],
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "slice")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::Vec")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "usize";
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::IterMut")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge
                                                                                                          ]
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        interaction_partitions
                                                                                                      |);
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::IterMut")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge
                                                                                                          ],
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "slice")
                                                                                                            []
                                                                                                            [
                                                                                                              Challenge
                                                                                                            ],
                                                                                                          "iter_mut",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                perm_row
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        iter :=
                                                                                                    M.copy (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::iter::adapters::zip::Zip")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::Iter")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ]
                                                                                                            ];
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::IterMut")
                                                                                                            []
                                                                                                            [
                                                                                                              Challenge
                                                                                                            ]
                                                                                                        ],
                                                                                                      γ
                                                                                                    |) in
                                                                                                  M.read (|
                                                                                                    M.loop (|
                                                                                                      Ty.tuple
                                                                                                        [],
                                                                                                      ltac:(M.monadic
                                                                                                        (let~
                                                                                                              _ :
                                                                                                            Ty.tuple
                                                                                                              [] :=
                                                                                                          M.match_operator (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            M.alloc (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::option::Option")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.tuple
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "usize";
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ]
                                                                                                                        ];
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&mut")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Challenge
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ],
                                                                                                              M.call_closure (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::option::Option")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.tuple
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "alloc::vec::Vec")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "usize";
                                                                                                                                Ty.path
                                                                                                                                  "alloc::alloc::Global"
                                                                                                                              ]
                                                                                                                          ];
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&mut")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Challenge
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "core::iter::adapters::zip::Zip")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "core::slice::iter::Iter")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "usize";
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ]
                                                                                                                        ];
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "core::slice::iter::IterMut")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Challenge
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                  [],
                                                                                                                  [],
                                                                                                                  "next",
                                                                                                                  [],
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.MutRef,
                                                                                                                    M.deref (|
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.MutRef,
                                                                                                                        iter
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        _ :=
                                                                                                                    M.is_struct_tuple (|
                                                                                                                      γ,
                                                                                                                      "core::option::Option::None"
                                                                                                                    |) in
                                                                                                                  M.never_to_any (|
                                                                                                                    M.read (|
                                                                                                                      M.break (||)
                                                                                                                    |)
                                                                                                                  |)));
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        γ0_0 :=
                                                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                                                      γ,
                                                                                                                      "core::option::Option::Some",
                                                                                                                      0
                                                                                                                    |) in
                                                                                                                  let
                                                                                                                        γ1_0 :=
                                                                                                                    M.SubPointer.get_tuple_field (|
                                                                                                                      γ0_0,
                                                                                                                      0
                                                                                                                    |) in
                                                                                                                  let
                                                                                                                        γ1_1 :=
                                                                                                                    M.SubPointer.get_tuple_field (|
                                                                                                                      γ0_0,
                                                                                                                      1
                                                                                                                    |) in
                                                                                                                  let
                                                                                                                        part :=
                                                                                                                    M.copy (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "usize";
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      γ1_0
                                                                                                                    |) in
                                                                                                                  let
                                                                                                                        perm_val :=
                                                                                                                    M.copy (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&mut")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Challenge
                                                                                                                        ],
                                                                                                                      γ1_1
                                                                                                                    |) in
                                                                                                                  M.read (|
                                                                                                                    let~
                                                                                                                          _ :
                                                                                                                        Ty.tuple
                                                                                                                          [] :=
                                                                                                                      M.read (|
                                                                                                                        M.use
                                                                                                                          (M.alloc (|
                                                                                                                            Ty.tuple
                                                                                                                              [],
                                                                                                                            M.match_operator (|
                                                                                                                              Ty.tuple
                                                                                                                                [],
                                                                                                                              M.alloc (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "usize"
                                                                                                                                  ],
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize"
                                                                                                                                    ],
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::iter::traits::collect::IntoIterator",
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "&")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "alloc::vec::Vec")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.path
                                                                                                                                              "usize";
                                                                                                                                            Ty.path
                                                                                                                                              "alloc::alloc::Global"
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                    [],
                                                                                                                                    [],
                                                                                                                                    "into_iter",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      part
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    (let
                                                                                                                                          iter :=
                                                                                                                                      M.copy (|
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.path
                                                                                                                                              "usize"
                                                                                                                                          ],
                                                                                                                                        γ
                                                                                                                                      |) in
                                                                                                                                    M.read (|
                                                                                                                                      M.loop (|
                                                                                                                                        Ty.tuple
                                                                                                                                          [],
                                                                                                                                        ltac:(M.monadic
                                                                                                                                          (let~
                                                                                                                                                _ :
                                                                                                                                              Ty.tuple
                                                                                                                                                [] :=
                                                                                                                                            M.match_operator (|
                                                                                                                                              Ty.tuple
                                                                                                                                                [],
                                                                                                                                              M.alloc (|
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::option::Option")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "&")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        Ty.path
                                                                                                                                                          "usize"
                                                                                                                                                      ]
                                                                                                                                                  ],
                                                                                                                                                M.call_closure (|
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::option::Option")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "&")
                                                                                                                                                        []
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "usize"
                                                                                                                                                        ]
                                                                                                                                                    ],
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::slice::iter::Iter")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        Ty.path
                                                                                                                                                          "usize"
                                                                                                                                                      ],
                                                                                                                                                    [],
                                                                                                                                                    [],
                                                                                                                                                    "next",
                                                                                                                                                    [],
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.borrow (|
                                                                                                                                                      Pointer.Kind.MutRef,
                                                                                                                                                      M.deref (|
                                                                                                                                                        M.borrow (|
                                                                                                                                                          Pointer.Kind.MutRef,
                                                                                                                                                          iter
                                                                                                                                                        |)
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                fun
                                                                                                                                                    γ =>
                                                                                                                                                  ltac:(M.monadic
                                                                                                                                                    (let
                                                                                                                                                          _ :=
                                                                                                                                                      M.is_struct_tuple (|
                                                                                                                                                        γ,
                                                                                                                                                        "core::option::Option::None"
                                                                                                                                                      |) in
                                                                                                                                                    M.never_to_any (|
                                                                                                                                                      M.read (|
                                                                                                                                                        M.break (||)
                                                                                                                                                      |)
                                                                                                                                                    |)));
                                                                                                                                                fun
                                                                                                                                                    γ =>
                                                                                                                                                  ltac:(M.monadic
                                                                                                                                                    (let
                                                                                                                                                          γ0_0 :=
                                                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                        γ,
                                                                                                                                                        "core::option::Option::Some",
                                                                                                                                                        0
                                                                                                                                                      |) in
                                                                                                                                                    let
                                                                                                                                                          γ0_0 :=
                                                                                                                                                      M.read (|
                                                                                                                                                        γ0_0
                                                                                                                                                      |) in
                                                                                                                                                    let
                                                                                                                                                          interaction_idx :=
                                                                                                                                                      M.copy (|
                                                                                                                                                        Ty.path
                                                                                                                                                          "usize",
                                                                                                                                                        γ0_0
                                                                                                                                                      |) in
                                                                                                                                                    M.read (|
                                                                                                                                                      let~
                                                                                                                                                            interaction :
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "&")
                                                                                                                                                            []
                                                                                                                                                            [
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                                                                                                    []
                                                                                                                                                                    [
                                                                                                                                                                      F
                                                                                                                                                                    ]
                                                                                                                                                                ]
                                                                                                                                                            ] :=
                                                                                                                                                        M.borrow (|
                                                                                                                                                          Pointer.Kind.Ref,
                                                                                                                                                          M.SubPointer.get_array_field (|
                                                                                                                                                            M.deref (|
                                                                                                                                                              M.read (|
                                                                                                                                                                all_interactions
                                                                                                                                                              |)
                                                                                                                                                            |),
                                                                                                                                                            M.read (|
                                                                                                                                                              interaction_idx
                                                                                                                                                            |)
                                                                                                                                                          |)
                                                                                                                                                        |) in
                                                                                                                                                      let~
                                                                                                                                                            interaction_val :
                                                                                                                                                          Challenge :=
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          Challenge,
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::ops::arith::Mul",
                                                                                                                                                            Challenge,
                                                                                                                                                            [],
                                                                                                                                                            [
                                                                                                                                                              F
                                                                                                                                                            ],
                                                                                                                                                            "mul",
                                                                                                                                                            [],
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.read (|
                                                                                                                                                              M.SubPointer.get_array_field (|
                                                                                                                                                                M.deref (|
                                                                                                                                                                  M.read (|
                                                                                                                                                                    reciprocals
                                                                                                                                                                  |)
                                                                                                                                                                |),
                                                                                                                                                                M.read (|
                                                                                                                                                                  interaction_idx
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            |);
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              F,
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicEvaluator",
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "openvm_stark_backend::interaction::trace::Evaluator")
                                                                                                                                                                  []
                                                                                                                                                                  [
                                                                                                                                                                    F
                                                                                                                                                                  ],
                                                                                                                                                                [],
                                                                                                                                                                [
                                                                                                                                                                  F;
                                                                                                                                                                  F
                                                                                                                                                                ],
                                                                                                                                                                "eval_expr",
                                                                                                                                                                [],
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.borrow (|
                                                                                                                                                                  Pointer.Kind.Ref,
                                                                                                                                                                  evaluator
                                                                                                                                                                |);
                                                                                                                                                                M.borrow (|
                                                                                                                                                                  Pointer.Kind.Ref,
                                                                                                                                                                  M.deref (|
                                                                                                                                                                    M.borrow (|
                                                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                                                                                        M.deref (|
                                                                                                                                                                          M.read (|
                                                                                                                                                                            interaction
                                                                                                                                                                          |)
                                                                                                                                                                        |),
                                                                                                                                                                        "openvm_stark_backend::interaction::Interaction",
                                                                                                                                                                        "count"
                                                                                                                                                                      |)
                                                                                                                                                                    |)
                                                                                                                                                                  |)
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |) in
                                                                                                                                                      let~
                                                                                                                                                            _ :
                                                                                                                                                          Ty.tuple
                                                                                                                                                            [] :=
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          Ty.tuple
                                                                                                                                                            [],
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::ops::arith::AddAssign",
                                                                                                                                                            Challenge,
                                                                                                                                                            [],
                                                                                                                                                            [
                                                                                                                                                              Challenge
                                                                                                                                                            ],
                                                                                                                                                            "add_assign",
                                                                                                                                                            [],
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.borrow (|
                                                                                                                                                              Pointer.Kind.MutRef,
                                                                                                                                                              M.deref (|
                                                                                                                                                                M.read (|
                                                                                                                                                                  perm_val
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            |);
                                                                                                                                                            M.read (|
                                                                                                                                                              interaction_val
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |) in
                                                                                                                                                      M.alloc (|
                                                                                                                                                        Ty.tuple
                                                                                                                                                          [],
                                                                                                                                                        Value.Tuple
                                                                                                                                                          []
                                                                                                                                                      |)
                                                                                                                                                    |)))
                                                                                                                                              ]
                                                                                                                                            |) in
                                                                                                                                          M.alloc (|
                                                                                                                                            Ty.tuple
                                                                                                                                              [],
                                                                                                                                            Value.Tuple
                                                                                                                                              []
                                                                                                                                          |)))
                                                                                                                                      |)
                                                                                                                                    |)))
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |))
                                                                                                                      |) in
                                                                                                                    let~
                                                                                                                          _ :
                                                                                                                        Ty.tuple
                                                                                                                          [] :=
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.tuple
                                                                                                                          [],
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::ops::arith::AddAssign",
                                                                                                                          Challenge,
                                                                                                                          [],
                                                                                                                          [
                                                                                                                            Challenge
                                                                                                                          ],
                                                                                                                          "add_assign",
                                                                                                                          [],
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.MutRef,
                                                                                                                            row_sum
                                                                                                                          |);
                                                                                                                          M.read (|
                                                                                                                            M.deref (|
                                                                                                                              M.read (|
                                                                                                                                perm_val
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |) in
                                                                                                                    M.alloc (|
                                                                                                                      Ty.tuple
                                                                                                                        [],
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |)
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          Ty.tuple
                                                                                                            [],
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |)))
                                                                                                    |)
                                                                                                  |)))
                                                                                            ]
                                                                                          |)
                                                                                        |))
                                                                                    |) in
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.write (|
                                                                                      M.SubPointer.get_array_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            perm_row
                                                                                          |)
                                                                                        |),
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          BinOp.Wrap.sub,
                                                                                          [
                                                                                            M.read (|
                                                                                              perm_width
                                                                                            |);
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          ]
                                                                                        |)
                                                                                      |),
                                                                                      M.read (|
                                                                                        row_sum
                                                                                      |)
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Ty.tuple [],
                                                                                    Value.Tuple []
                                                                                  |)
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_function (|
                                    "core::mem::drop",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::prover::types::PairView")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          F
                                        ]
                                    ]
                                  |),
                                  [ M.read (| trace_view |) ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.path "tracing::span::Span",
                                    "in_scope",
                                    [],
                                    [ Ty.function [] (Ty.tuple []); Ty.tuple [] ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      let~ interest :
                                          Ty.path "tracing_core::subscriber::Interest" :=
                                        M.call_closure (|
                                          Ty.path "tracing_core::subscriber::Interest",
                                          M.get_associated_function (|
                                            Ty.path "tracing_core::subscriber::Interest",
                                            "never",
                                            [],
                                            []
                                          |),
                                          []
                                        |) in
                                      M.alloc (|
                                        Ty.path "tracing::span::Span",
                                        M.match_operator (|
                                          Ty.path "tracing::span::Span",
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      LogicalOp.and (|
                                                        LogicalOp.and (|
                                                          LogicalOp.and (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialOrd",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                [],
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter"
                                                                ],
                                                                "le",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  get_associated_constant (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Level",
                                                                    "TRACE",
                                                                    Ty.path
                                                                      "tracing_core::metadata::Level"
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  get_constant (|
                                                                    "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter"
                                                                  |)
                                                                |)
                                                              ]
                                                            |),
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_trait_method (|
                                                                  "core::cmp::PartialOrd",
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level",
                                                                  [],
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter"
                                                                  ],
                                                                  "le",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    get_associated_constant (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::Level",
                                                                      "TRACE",
                                                                      Ty.path
                                                                        "tracing_core::metadata::Level"
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::LevelFilter",
                                                                      M.call_closure (|
                                                                        Ty.path
                                                                          "tracing_core::metadata::LevelFilter",
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "tracing_core::metadata::LevelFilter",
                                                                          "current",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)))
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.read (|
                                                              let~ _ : Ty.tuple [] :=
                                                                M.write (|
                                                                  interest,
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::subscriber::Interest",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite",
                                                                      "interest",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            get_constant (|
                                                                              "openvm_stark_backend::interaction::fri_log_up::generate_after_challenge_trace::__CALLSITE",
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::callsite::DefaultCallsite"
                                                                                ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (|
                                                                Ty.path "bool",
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::subscriber::Interest",
                                                                      "is_never",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        interest
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)))
                                                        |),
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_function (|
                                                              "tracing::__macro_support::__is_enabled",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "tracing_core::callsite::Callsite",
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite",
                                                                      [],
                                                                      [],
                                                                      "metadata",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            get_constant (|
                                                                              "openvm_stark_backend::interaction::fri_log_up::generate_after_challenge_trace::__CALLSITE",
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::callsite::DefaultCallsite"
                                                                                ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.read (| interest |)
                                                            ]
                                                          |)))
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.read (|
                                                  let~ meta :
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ] :=
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "openvm_stark_backend::interaction::fri_log_up::generate_after_challenge_trace::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |) in
                                                  M.alloc (|
                                                    Ty.path "tracing::span::Span",
                                                    M.call_closure (|
                                                      Ty.path "tracing::span::Span",
                                                      M.get_associated_function (|
                                                        Ty.path "tracing::span::Span",
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| meta |) |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path
                                                                  "tracing_core::field::ValueSet",
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "tracing_core::field::ValueSet",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet",
                                                                    "value_set",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            0
                                                                        ]
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::field::Field"
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.dyn
                                                                                        [
                                                                                          ("tracing_core::field::Value::Trait",
                                                                                            [])
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::FieldSet"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "tracing_core::metadata::Metadata",
                                                                            "fields",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (| meta |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (|
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  0
                                                                              ]
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.dyn
                                                                                              [
                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                  [])
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            Value.Array []
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.read (|
                                                  let~ span : Ty.path "tracing::span::Span" :=
                                                    M.call_closure (|
                                                      Ty.path "tracing::span::Span",
                                                      M.get_function (|
                                                        "tracing::__macro_support::__disabled_span",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_stark_backend::interaction::fri_log_up::generate_after_challenge_trace::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] := Value.Tuple [] in
                                                  span
                                                |)))
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.read (|
                                                        let~ phi : Challenge :=
                                                          M.read (|
                                                            get_constant (|
                                                              "p3_field::field::FieldAlgebra::ZERO",
                                                              Challenge
                                                            |)
                                                          |) in
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.tuple [],
                                                            M.match_operator (|
                                                              Ty.tuple [],
                                                              M.alloc (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::ChunksExactMut")
                                                                  []
                                                                  [ Challenge ],
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::ChunksExactMut")
                                                                    []
                                                                    [ Challenge ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::collect::IntoIterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::ChunksExactMut")
                                                                      []
                                                                      [ Challenge ],
                                                                    [],
                                                                    [],
                                                                    "into_iter",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::ChunksExactMut")
                                                                        []
                                                                        [ Challenge ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Challenge ],
                                                                        "chunks_exact_mut",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Challenge ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::DerefMut",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "deref_mut",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  perm_values
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.read (| perm_width |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let iter :=
                                                                      M.copy (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::ChunksExactMut")
                                                                          []
                                                                          [ Challenge ],
                                                                        γ
                                                                      |) in
                                                                    M.read (|
                                                                      M.loop (|
                                                                        Ty.tuple [],
                                                                        ltac:(M.monadic
                                                                          (let~ _ : Ty.tuple [] :=
                                                                            M.match_operator (|
                                                                              Ty.tuple [],
                                                                              M.alloc (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                      ]
                                                                                  ],
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                        ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::ChunksExactMut")
                                                                                      []
                                                                                      [ Challenge ],
                                                                                    [],
                                                                                    [],
                                                                                    "next",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          iter
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let _ :=
                                                                                      M.is_struct_tuple (|
                                                                                        γ,
                                                                                        "core::option::Option::None"
                                                                                      |) in
                                                                                    M.never_to_any (|
                                                                                      M.read (|
                                                                                        M.break (||)
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                        γ,
                                                                                        "core::option::Option::Some",
                                                                                        0
                                                                                      |) in
                                                                                    let
                                                                                          perm_chunk :=
                                                                                      M.copy (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&mut")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "slice")
                                                                                              []
                                                                                              [
                                                                                                Challenge
                                                                                              ]
                                                                                          ],
                                                                                        γ0_0
                                                                                      |) in
                                                                                    M.read (|
                                                                                      let~ _ :
                                                                                          Ty.tuple
                                                                                            [] :=
                                                                                        M.call_closure (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::AddAssign",
                                                                                            Challenge,
                                                                                            [],
                                                                                            [
                                                                                              Challenge
                                                                                            ],
                                                                                            "add_assign",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              phi
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.deref (|
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Challenge
                                                                                                    ],
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::option::Option")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge
                                                                                                          ]
                                                                                                      ],
                                                                                                    "unwrap",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::option::Option")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Challenge
                                                                                                            ]
                                                                                                        ],
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "slice")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge
                                                                                                          ],
                                                                                                        "last",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.read (|
                                                                                                              perm_chunk
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |) in
                                                                                      let~ _ :
                                                                                          Ty.tuple
                                                                                            [] :=
                                                                                        M.write (|
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&mut")
                                                                                                []
                                                                                                [
                                                                                                  Challenge
                                                                                                ],
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&mut")
                                                                                                      []
                                                                                                      [
                                                                                                        Challenge
                                                                                                      ]
                                                                                                  ],
                                                                                                "unwrap",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::option::Option")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&mut")
                                                                                                        []
                                                                                                        [
                                                                                                          Challenge
                                                                                                        ]
                                                                                                    ],
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "slice")
                                                                                                      []
                                                                                                      [
                                                                                                        Challenge
                                                                                                      ],
                                                                                                    "last_mut",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.MutRef,
                                                                                                      M.deref (|
                                                                                                        M.read (|
                                                                                                          perm_chunk
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |),
                                                                                          M.read (|
                                                                                            phi
                                                                                          |)
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Ty.tuple [],
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)
                                                                                    |)))
                                                                              ]
                                                                            |) in
                                                                          M.alloc (|
                                                                            Ty.tuple [],
                                                                            Value.Tuple []
                                                                          |)))
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |)
                                                          |))
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Challenge;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ],
                                Value.StructTuple
                                  "core::option::Option::Some"
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Challenge;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ]
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Challenge;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Challenge;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Challenge; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        "new",
                                        [],
                                        []
                                      |),
                                      [ M.read (| perm_values |); M.read (| perm_width |) ]
                                    |)
                                  ]
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_generate_after_challenge_trace :
        forall (F Challenge Challenger : Ty.t),
        M.IsAssociatedFunction.C
          (Self F Challenge Challenger)
          "generate_after_challenge_trace"
          (generate_after_challenge_trace F Challenge Challenger).
      Admitted.
      Global Typeclasses Opaque generate_after_challenge_trace.
    End Impl_openvm_stark_backend_interaction_fri_log_up_FriLogUpPhase_F_Challenge_Challenger.
    
    (*
    Enum FriLogUpError
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "NonZeroCumulativeSum";
            item := StructTuple [];
          };
          {
            name := "MissingPartialProof";
            item := StructTuple [];
          };
          {
            name := "InvalidPowWitness";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_FriLogUpError_NonZeroCumulativeSum :
      M.IsDiscriminant
        "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::NonZeroCumulativeSum"
        0.
    Axiom IsDiscriminant_FriLogUpError_MissingPartialProof :
      M.IsDiscriminant
        "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::MissingPartialProof"
        1.
    Axiom IsDiscriminant_FriLogUpError_InvalidPowWitness :
      M.IsDiscriminant
        "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::InvalidPowWitness"
        2.
    
    Module Impl_core_error_Error_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpError.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::error::Error"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_error_Error_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpError.
    
    Module Impl_core_fmt_Display_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpError.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpError".
      
      (* Error *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; __formatter ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpError" ],
                self
              |) in
            let __formatter :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                __formatter
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::NonZeroCumulativeSum"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "non-zero cumulative sum" |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::MissingPartialProof"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "missing proof" |) |) |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::InvalidPowWitness"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "invalid proof of work witness" |) |)
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpError.
    
    Module Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpError.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpError" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.match_operator (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::NonZeroCumulativeSum"
                          |) in
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "NonZeroCumulativeSum" |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::MissingPartialProof"
                          |) in
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "MissingPartialProof" |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::InvalidPowWitness"
                          |) in
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "InvalidPowWitness" |) |)
                        |)))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpError.
    
    (* StructRecord
      {
        name := "FriLogUpPartialProof";
        const_params := [];
        ty_params := [ "Witness" ];
        fields := [ ("logup_pow_witness", Witness) ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_Witness_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpPartialProof_Witness.
      Definition Self (Witness : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
          []
          [ Witness ].
      
      (* Clone *)
      Definition clone (Witness : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self Witness in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                      []
                      [ Witness ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof"
              []
              [ Witness ]
              [
                ("logup_pow_witness",
                  M.call_closure (|
                    Witness,
                    M.get_trait_method (| "core::clone::Clone", Witness, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof",
                              "logup_pow_witness"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (Witness : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self Witness)
          (* Instance *) [ ("clone", InstanceField.Method (clone Witness)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_Witness_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpPartialProof_Witness.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_Witness_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpPartialProof_Witness.
        Definition Self (Witness : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
            []
            [ Witness ].
        
        (* Serialize *)
        Definition serialize
            (Witness : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self Witness in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                        []
                        [ Witness ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "FriLogUpPartialProof" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.cast (Ty.path "usize") (Value.Bool false);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Witness ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "logup_pow_witness" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof",
                                          "logup_pow_witness"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (Witness : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self Witness)
            (* Instance *) [ ("serialize", InstanceField.Method (serialize Witness)) ].
      End Impl_serde_ser_Serialize_where_serde_ser_Serialize_Witness_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpPartialProof_Witness.
      Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_Witness_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpPartialProof_Witness.
        Definition Self (Witness : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
            []
            [ Witness ].
        
        (* Deserialize *)
        Definition deserialize
            (Witness : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self Witness in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                      []
                      [ Witness ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_stark_backend::interaction::fri_log_up::_'1::deserialize::__Visitor")
                      []
                      [ Witness ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "FriLogUpPartialProof" |);
                  M.read (|
                    get_constant (|
                      "openvm_stark_backend::interaction::fri_log_up::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_stark_backend::interaction::fri_log_up::_'1::deserialize::__Visitor"
                    []
                    [ Witness ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                              []
                              [ Witness ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (Witness : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self Witness)
            (* Instance *) [ ("deserialize", InstanceField.Method (deserialize Witness)) ].
      End Impl_serde_de_Deserialize_where_serde_de_Deserialize_Witness_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpPartialProof_Witness.
      Module Impl_serde_ser_Serialize_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "FriLogUpProvingKey" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.cast (Ty.path "usize") (Value.Bool false);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "interaction_partitions" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                          "interaction_partitions"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
      Module Impl_serde_de_Deserialize_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.path
                      "openvm_stark_backend::interaction::fri_log_up::_'3::deserialize::__Visitor"
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "FriLogUpProvingKey" |);
                  M.read (|
                    get_constant (|
                      "openvm_stark_backend::interaction::fri_log_up::_'3::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_stark_backend::interaction::fri_log_up::_'3::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.path
                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
    End underscore.
    
    
    (* StructRecord
      {
        name := "FriLogUpProvingKey";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("interaction_partitions",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
              []
              []
              [
                ("interaction_partitions",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                              "interaction_partitions"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
    
    Module Impl_core_default_Default_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey".
      
      (* Default *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
              []
              []
              [
                ("interaction_partitions",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
    
    
    
    Module Impl_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey".
      
      (*
          pub fn interaction_partitions(self) -> Vec<Vec<usize>> {
              self.interaction_partitions
          }
      *)
      Definition interaction_partitions (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                self,
                "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                "interaction_partitions"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_interaction_partitions :
        M.IsAssociatedFunction.C Self "interaction_partitions" interaction_partitions.
      Admitted.
      Global Typeclasses Opaque interaction_partitions.
      
      (*
          pub fn num_chunks(&self) -> usize {
              self.interaction_partitions.len()
          }
      *)
      Definition num_chunks (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey" ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                "len",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                    "interaction_partitions"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_num_chunks :
        M.IsAssociatedFunction.C Self "num_chunks" num_chunks.
      Admitted.
      Global Typeclasses Opaque num_chunks.
    End Impl_openvm_stark_backend_interaction_fri_log_up_FriLogUpProvingKey.
    
    Module Impl_openvm_stark_backend_interaction_RapPhaseSeq_where_p3_field_field_Field_F_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_Challenge_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_challenger_grinding_challenger_GrindingChallenger_Challenger_F_Challenge_Challenger_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpPhase_F_Challenge_Challenger.
      Definition Self (F Challenge Challenger : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
          []
          [ F; Challenge; Challenger ].
      
      (*     type PartialProof = FriLogUpPartialProof<F>; *)
      Definition _PartialProof (F Challenge Challenger : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
          []
          [ F ].
      
      (*     type PartialProvingKey = FriLogUpProvingKey; *)
      Definition _PartialProvingKey (F Challenge Challenger : Ty.t) : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey".
      
      (*     type Error = FriLogUpError; *)
      Definition _Error (F Challenge Challenger : Ty.t) : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpError".
      
      (*     const ID: RapPhaseSeqKind = RapPhaseSeqKind::FriLogUp; *)
      (* Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" *)
      Definition value_ID
          (F Challenge Challenger : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F Challenge Challenger in
        ltac:(M.monadic
          (M.alloc (|
            Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind",
            Value.StructTuple
              "openvm_stark_backend::interaction::RapPhaseSeqKind::FriLogUp"
              []
              []
              []
          |))).
      
      (*
          fn log_up_security_params(&self) -> &LogUpSecurityParameters {
              &self.log_up_params
          }
      *)
      Definition log_up_security_params
          (F Challenge Challenger : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F Challenge Challenger in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                      []
                      [ F; Challenge; Challenger ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase",
                    "log_up_params"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_pk_per_air(
              &self,
              symbolic_constraints_per_air: &[SymbolicConstraints<F>],
              max_constraint_degree: usize,
          ) -> Vec<Self::PartialProvingKey> {
              symbolic_constraints_per_air
                  .iter()
                  .map(|constraints| {
                      find_interaction_chunks(&constraints.interactions, max_constraint_degree)
                  })
                  .collect()
          }
      *)
      Definition generate_pk_per_air
          (F Challenge Challenger : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F Challenge Challenger in
        match ε, τ, α with
        | [], [], [ self; symbolic_constraints_per_air; max_constraint_degree ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                      []
                      [ F; Challenge; Challenger ]
                  ],
                self
              |) in
            let symbolic_constraints_per_air :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                          []
                          [ F ]
                      ]
                  ],
                symbolic_constraints_per_air
              |) in
            let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey";
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                          []
                          [ F ]
                      ];
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                              []
                              [ F ]
                          ]
                      ]
                      (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey")
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey";
                      Ty.path "alloc::alloc::Global"
                    ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                            []
                            [ F ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                []
                                [ F ]
                            ]
                        ]
                        (Ty.path
                          "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey")
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                          []
                          [ F ]
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey";
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                []
                                [ F ]
                            ]
                        ]
                        (Ty.path
                          "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey")
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                            []
                            [ F ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                              []
                              [ F ]
                          ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| symbolic_constraints_per_air |) |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [ F ]
                                    ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let constraints :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                []
                                                [ F ]
                                            ],
                                          γ
                                        |) in
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                        M.get_function (|
                                          "openvm_stark_backend::interaction::fri_log_up::find_interaction_chunks",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::interaction::Interaction")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                              []
                                                              [ F ]
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::interaction::Interaction")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| constraints |) |),
                                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                                          "interactions"
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.read (| max_constraint_degree |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn partially_prove(
              &self,
              challenger: &mut Challenger,
              constraints_per_air: &[&SymbolicConstraints<F>],
              params_per_air: &[&FriLogUpProvingKey],
              trace_view_per_air: Vec<PairTraceView<F>>,
          ) -> Option<(Self::PartialProof, RapPhaseProverData<Challenge>)> {
              let has_any_interactions = constraints_per_air
                  .iter()
                  .any(|constraints| !constraints.interactions.is_empty());
      
              if !has_any_interactions {
                  return None;
              }
      
              // Proof of work phase to boost logup security.
              let logup_pow_witness = challenger.grind(self.log_up_params.log_up_pow_bits);
              let challenges: [Challenge; STARK_LU_NUM_CHALLENGES] =
                  array::from_fn(|_| challenger.sample_ext_element::<Challenge>());
      
              let after_challenge_trace_per_air = metrics_span("generate_perm_trace_time_ms", || {
                  Self::generate_after_challenge_traces_per_air(
                      &challenges,
                      constraints_per_air,
                      params_per_air,
                      trace_view_per_air,
                      self.extra_capacity_bits,
                  )
              });
              let cumulative_sum_per_air = Self::extract_cumulative_sums(&after_challenge_trace_per_air);
      
              // Challenger needs to observe what is exposed (cumulative_sums)
              for cumulative_sum in cumulative_sum_per_air.iter().flatten() {
                  challenger.observe_slice(cumulative_sum.as_base_slice());
              }
      
              let exposed_values_per_air = cumulative_sum_per_air
                  .iter()
                  .map(|csum| csum.map(|csum| vec![csum]))
                  .collect_vec();
      
              Some((
                  FriLogUpPartialProof { logup_pow_witness },
                  RapPhaseProverData {
                      challenges: challenges.to_vec(),
                      after_challenge_trace_per_air,
                      exposed_values_per_air,
                  },
              ))
          }
      *)
      Definition partially_prove
          (F Challenge Challenger : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F Challenge Challenger in
        match ε, τ, α with
        | [], [], [ self; challenger; constraints_per_air; params_per_air; trace_view_per_air ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                      []
                      [ F; Challenge; Challenger ]
                  ],
                self
              |) in
            let challenger :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Challenger ], challenger |) in
            let constraints_per_air :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                              []
                              [ F ]
                          ]
                      ]
                  ],
                constraints_per_air
              |) in
            let params_per_air :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                          ]
                      ]
                  ],
                params_per_air
              |) in
            let trace_view_per_air :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::PairView")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        F
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                trace_view_per_air
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.tuple
                    [
                      Ty.associated_in_trait
                        "openvm_stark_backend::interaction::RapPhaseSeq"
                        []
                        [ F; Challenge; Challenger ]
                        (Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                          []
                          [ F; Challenge; Challenger ])
                        "PartialProof";
                      Ty.apply
                        (Ty.path "openvm_stark_backend::interaction::RapPhaseProverData")
                        []
                        [ Challenge ]
                    ]
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ has_any_interactions : Ty.path "bool" :=
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                  []
                                  [ F ]
                              ]
                          ],
                        [],
                        [],
                        "any",
                        [],
                        [
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.path "bool")
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                      []
                                      [ F ]
                                  ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [ F ]
                                    ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| constraints_per_air |) |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.path "bool",
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                []
                                                [ F ]
                                            ]
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let constraints :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              γ
                                            |) in
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::interaction::Interaction")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "is_empty",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (|
                                                      M.read (|
                                                        M.deref (| M.read (| constraints |) |)
                                                      |)
                                                    |),
                                                    "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                                    "interactions"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  UnOp.not (| M.read (| has_any_interactions |) |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::option::Option::None"
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                                            []
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::RapPhaseProverData")
                                            []
                                            [ Challenge ]
                                        ]
                                    ]
                                    []
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ logup_pow_witness : F :=
                    M.call_closure (|
                      F,
                      M.get_trait_method (|
                        "p3_challenger::grinding_challenger::GrindingChallenger",
                        Challenger,
                        [],
                        [],
                        "grind",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| challenger |) |) |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase",
                              "log_up_params"
                            |),
                            "openvm_stark_backend::interaction::LogUpSecurityParameters",
                            "log_up_pow_bits"
                          |)
                        |)
                      ]
                    |) in
                  let~ challenges :
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Challenge ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Challenge ],
                      M.get_function (|
                        "core::array::from_fn",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        [ Challenge; Ty.function [ Ty.path "usize" ] Challenge ]
                      |),
                      [
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Challenge,
                                    M.alloc (| Ty.path "usize", α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Challenge,
                                            M.get_trait_method (|
                                              "p3_challenger::FieldChallenger",
                                              Challenger,
                                              [],
                                              [ F ],
                                              "sample_ext_element",
                                              [],
                                              [ Challenge ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| challenger |) |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |) in
                  let~ after_challenge_trace_per_air :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Challenge;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ]
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Challenge;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ]
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_function (|
                        "openvm_stark_backend::utils::metrics_span",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Challenge;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            []
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Challenge;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]);
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                      |),
                      [
                        mk_str (| "generate_perm_trace_time_ms" |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Challenge;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Challenge; Ty.path "alloc::alloc::Global" ]
                                              ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.alloc (| Ty.tuple [], α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Challenge;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Challenge;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                                []
                                                [ F; Challenge; Challenger ],
                                              "generate_after_challenge_traces_per_air",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.Ref, challenges |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| constraints_per_air |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| params_per_air |) |)
                                              |);
                                              M.read (| trace_view_per_air |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase",
                                                  "extra_capacity_bits"
                                                |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |) in
                  let~ cumulative_sum_per_air :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                          Ty.path "alloc::alloc::Global"
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                          []
                          [ F; Challenge; Challenger ],
                        "extract_cumulative_sums",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Challenge;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Challenge;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Challenge; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (| Pointer.Kind.Ref, after_challenge_trace_per_air |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::flatten::Flatten")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ]
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::Flatten")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::flatten::Flatten")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ]
                                        ]
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::Flatten")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Challenge ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ]
                                        ],
                                      [],
                                      [],
                                      "flatten",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Challenge ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Challenge ]
                                            ],
                                          "iter",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Challenge ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Challenge ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    cumulative_sum_per_air
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::flatten::Flatten")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Challenge ]
                                            ]
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.apply (Ty.path "&") [] [ Challenge ] ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.apply (Ty.path "&") [] [ Challenge ] ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::Flatten")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Challenge ]
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let cumulative_sum :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Challenge ],
                                                      γ0_0
                                                    |) in
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_trait_method (|
                                                          "p3_challenger::CanObserve",
                                                          Challenger,
                                                          [],
                                                          [ F ],
                                                          "observe_slice",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (| M.read (| challenger |) |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "p3_field::field::FieldExtensionAlgebra",
                                                                  Challenge,
                                                                  [],
                                                                  [ F ],
                                                                  "as_base_slice",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| cumulative_sum |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  let~ exposed_values_per_air :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "itertools::Itertools",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ]
                                ])
                          ],
                        [],
                        [],
                        "collect_vec",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ]
                                  ])
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ]
                                ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ]
                                  ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Challenge ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Challenge ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, cumulative_sum_per_air |) ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Challenge; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Challenge ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let csum :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Challenge ]
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Challenge; Ty.path "alloc::alloc::Global" ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Challenge ],
                                                  "map",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                    Ty.function
                                                      [ Challenge ]
                                                      (Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Challenge; Ty.path "alloc::alloc::Global"
                                                        ])
                                                  ]
                                                |),
                                                [
                                                  M.read (| M.deref (| M.read (| csum |) |) |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Challenge;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              M.alloc (| Challenge, α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let csum :=
                                                                      M.copy (| Challenge, γ |) in
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Challenge;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Challenge ],
                                                                        "into_vec",
                                                                        [],
                                                                        [
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::boxed::Box")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [ Challenge ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          M.pointer_coercion
                                                                            M.PointerCoercion.Unsize
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "alloc::boxed::Box")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      1
                                                                                  ]
                                                                                  [ Challenge ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ])
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "alloc::boxed::Box")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Challenge ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]),
                                                                          [
                                                                            M.read (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::boxed::Box")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "array")
                                                                                      [
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          1
                                                                                      ]
                                                                                      [ Challenge ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::boxed::Box")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1
                                                                                        ]
                                                                                        [ Challenge
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  "new",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.alloc (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "array")
                                                                                      [
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          1
                                                                                      ]
                                                                                      [ Challenge ],
                                                                                    Value.Array
                                                                                      [
                                                                                        M.read (|
                                                                                          csum
                                                                                        |)
                                                                                      ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::RapPhaseProverData")
                              []
                              [ Challenge ]
                          ]
                      ],
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "openvm_stark_backend::interaction::RapPhaseProverData")
                              []
                              [ Challenge ]
                          ]
                      ]
                      [
                        Value.Tuple
                          [
                            Value.mkStructRecord
                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof"
                              []
                              [ F ]
                              [ ("logup_pow_witness", M.read (| logup_pow_witness |)) ];
                            Value.mkStructRecord
                              "openvm_stark_backend::interaction::RapPhaseProverData"
                              []
                              [ Challenge ]
                              [
                                ("challenges",
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Challenge ],
                                      "to_vec",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Challenge ] ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [ Challenge ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Challenge ] ]),
                                        [ M.borrow (| Pointer.Kind.Ref, challenges |) ]
                                      |)
                                    ]
                                  |));
                                ("after_challenge_trace_per_air",
                                  M.read (| after_challenge_trace_per_air |));
                                ("exposed_values_per_air", M.read (| exposed_values_per_air |))
                              ]
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn partially_verify<Commitment: Clone>(
              &self,
              challenger: &mut Challenger,
              partial_proof: Option<&Self::PartialProof>,
              exposed_values_per_phase_per_air: &[Vec<Vec<Challenge>>],
              commitment_per_phase: &[Commitment],
              _permutation_opened_values: &[Vec<Vec<Vec<Challenge>>>],
          ) -> (RapPhaseVerifierData<Challenge>, Result<(), Self::Error>)
          where
              Challenger: CanObserve<Commitment>,
          {
              if exposed_values_per_phase_per_air
                  .iter()
                  .all(|exposed_values_per_phase_per_air| exposed_values_per_phase_per_air.is_empty())
              {
                  return (RapPhaseVerifierData::default(), Ok(()));
              }
      
              let partial_proof = match partial_proof {
                  Some(proof) => proof,
                  None => {
                      return (
                          RapPhaseVerifierData::default(),
                          Err(FriLogUpError::MissingPartialProof),
                      );
                  }
              };
      
              if !challenger.check_witness(
                  self.log_up_params.log_up_pow_bits,
                  partial_proof.logup_pow_witness,
              ) {
                  return (
                      RapPhaseVerifierData::default(),
                      Err(FriLogUpError::InvalidPowWitness),
                  );
              }
      
              let challenges: [Challenge; STARK_LU_NUM_CHALLENGES] =
                  array::from_fn(|_| challenger.sample_ext_element::<Challenge>());
      
              for exposed_values_per_phase in exposed_values_per_phase_per_air.iter() {
                  if let Some(exposed_values) = exposed_values_per_phase.first() {
                      for exposed_value in exposed_values {
                          challenger.observe_slice(exposed_value.as_base_slice());
                      }
                  }
              }
      
              challenger.observe(commitment_per_phase[0].clone());
      
              let cumulative_sums = exposed_values_per_phase_per_air
                  .iter()
                  .map(|exposed_values_per_phase| {
                      assert!(
                          exposed_values_per_phase.len() <= 1,
                          "Verifier does not support more than 1 challenge phase"
                      );
                      exposed_values_per_phase.first().map(|exposed_values| {
                          assert_eq!(
                              exposed_values.len(),
                              1,
                              "Only exposed value should be cumulative sum"
                          );
                          exposed_values[0]
                      })
                  })
                  .collect_vec();
      
              // Check cumulative sum
              let sum: Challenge = cumulative_sums
                  .into_iter()
                  .map(|c| c.unwrap_or(Challenge::ZERO))
                  .sum();
      
              let result = if sum == Challenge::ZERO {
                  Ok(())
              } else {
                  Err(Self::Error::NonZeroCumulativeSum)
              };
              let verifier_data = RapPhaseVerifierData {
                  challenges_per_phase: vec![challenges.to_vec()],
              };
              (verifier_data, result)
          }
      *)
      Definition partially_verify
          (F Challenge Challenger : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F Challenge Challenger in
        match ε, τ, α with
        | [],
            [ Commitment ],
            [
              self;
              challenger;
              partial_proof;
              exposed_values_per_phase_per_air;
              commitment_per_phase;
              _permutation_opened_values
            ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                      []
                      [ F; Challenge; Challenger ]
                  ],
                self
              |) in
            let challenger :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Challenger ], challenger |) in
            let partial_proof :=
              M.alloc (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::interaction::RapPhaseSeq"
                          []
                          [ F; Challenge; Challenger ]
                          (Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [ F; Challenge; Challenger ])
                          "PartialProof"
                      ]
                  ],
                partial_proof
              |) in
            let exposed_values_per_phase_per_air :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Challenge; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                  ],
                exposed_values_per_phase_per_air
              |) in
            let commitment_per_phase :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Commitment ] ],
                commitment_per_phase
              |) in
            let _permutation_opened_values :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                  ],
                _permutation_opened_values
              |) in
            M.catch_return
              (Ty.tuple
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::interaction::RapPhaseVerifierData")
                    []
                    [ Challenge ];
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple [];
                      Ty.associated_in_trait
                        "openvm_stark_backend::interaction::RapPhaseSeq"
                        []
                        [ F; Challenge; Challenger ]
                        (Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                          []
                          [ F; Challenge; Challenger ])
                        "Error"
                    ]
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Challenge; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      [],
                                      [],
                                      "all",
                                      [],
                                      [
                                        Ty.function
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                          (Ty.path "bool")
                                      ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Challenge; Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              "iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.read (| exposed_values_per_phase_per_air |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.path "bool",
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    α0
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let exposed_values_per_phase_per_air :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Challenge;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            γ
                                                          |) in
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (|
                                                                  exposed_values_per_phase_per_air
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.Tuple
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::interaction::RapPhaseVerifierData")
                                          []
                                          [ Challenge ],
                                        M.get_trait_method (|
                                          "core::default::Default",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::RapPhaseVerifierData")
                                            []
                                            [ Challenge ],
                                          [],
                                          [],
                                          "default",
                                          [],
                                          []
                                        |),
                                        []
                                      |);
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_stark_backend::interaction::fri_log_up::FriLogUpError"
                                        ]
                                        [ Value.Tuple [] ]
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ partial_proof :
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                            []
                            [ F ]
                        ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                            []
                            [ F ]
                        ],
                      partial_proof,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let proof :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof")
                                      []
                                      [ F ]
                                  ],
                                γ0_0
                              |) in
                            M.read (| proof |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.Tuple
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::interaction::RapPhaseVerifierData")
                                          []
                                          [ Challenge ],
                                        M.get_trait_method (|
                                          "core::default::Default",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::RapPhaseVerifierData")
                                            []
                                            [ Challenge ],
                                          [],
                                          [],
                                          "default",
                                          [],
                                          []
                                        |),
                                        []
                                      |);
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_stark_backend::interaction::fri_log_up::FriLogUpError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::MissingPartialProof"
                                            []
                                            []
                                            []
                                        ]
                                    ]
                                |)
                              |)
                            |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "p3_challenger::grinding_challenger::GrindingChallenger",
                                        Challenger,
                                        [],
                                        [],
                                        "check_witness",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| challenger |) |)
                                        |);
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase",
                                              "log_up_params"
                                            |),
                                            "openvm_stark_backend::interaction::LogUpSecurityParameters",
                                            "log_up_pow_bits"
                                          |)
                                        |);
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| partial_proof |) |),
                                            "openvm_stark_backend::interaction::fri_log_up::FriLogUpPartialProof",
                                            "logup_pow_witness"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.Tuple
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::interaction::RapPhaseVerifierData")
                                          []
                                          [ Challenge ],
                                        M.get_trait_method (|
                                          "core::default::Default",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::RapPhaseVerifierData")
                                            []
                                            [ Challenge ],
                                          [],
                                          [],
                                          "default",
                                          [],
                                          []
                                        |),
                                        []
                                      |);
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_stark_backend::interaction::fri_log_up::FriLogUpError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::InvalidPowWitness"
                                            []
                                            []
                                            []
                                        ]
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ challenges :
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Challenge ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Challenge ],
                      M.get_function (|
                        "core::array::from_fn",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        [ Challenge; Ty.function [ Ty.path "usize" ] Challenge ]
                      |),
                      [
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Challenge,
                                    M.alloc (| Ty.path "usize", α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Challenge,
                                            M.get_trait_method (|
                                              "p3_challenger::FieldChallenger",
                                              Challenger,
                                              [],
                                              [ F ],
                                              "sample_ext_element",
                                              [],
                                              [ Challenge ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| challenger |) |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Challenge; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Challenge; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| exposed_values_per_phase_per_air |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Challenge; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Challenge;
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Challenge;
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let exposed_values_per_phase :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Challenge;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ],
                                                      γ0_0
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Challenge;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Challenge;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Challenge;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  "first",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "deref",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (|
                                                                                exposed_values_per_phase
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::option::Option::Some",
                                                              0
                                                            |) in
                                                          let exposed_values :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              γ0_0
                                                            |) in
                                                          M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.tuple [],
                                                                M.match_operator (|
                                                                  Ty.tuple [],
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ Challenge ],
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Challenge ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Challenge;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [ M.read (| exposed_values |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [ Challenge ],
                                                                            γ
                                                                          |) in
                                                                        M.read (|
                                                                          M.loop (|
                                                                            Ty.tuple [],
                                                                            ltac:(M.monadic
                                                                              (let~ _ :
                                                                                  Ty.tuple [] :=
                                                                                M.match_operator (|
                                                                                  Ty.tuple [],
                                                                                  M.alloc (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                      ],
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ],
                                                                                        [],
                                                                                        [],
                                                                                        "next",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              iter
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let _ :=
                                                                                          M.is_struct_tuple (|
                                                                                            γ,
                                                                                            "core::option::Option::None"
                                                                                          |) in
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::option::Option::Some",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              exposed_value :=
                                                                                          M.copy (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Challenge
                                                                                              ],
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.read (|
                                                                                          let~ _ :
                                                                                              Ty.tuple
                                                                                                [] :=
                                                                                            M.call_closure (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              M.get_trait_method (|
                                                                                                "p3_challenger::CanObserve",
                                                                                                Challenger,
                                                                                                [],
                                                                                                [ F
                                                                                                ],
                                                                                                "observe_slice",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      challenger
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.call_closure (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "slice")
                                                                                                            []
                                                                                                            [
                                                                                                              F
                                                                                                            ]
                                                                                                        ],
                                                                                                      M.get_trait_method (|
                                                                                                        "p3_field::field::FieldExtensionAlgebra",
                                                                                                        Challenge,
                                                                                                        [],
                                                                                                        [
                                                                                                          F
                                                                                                        ],
                                                                                                        "as_base_slice",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.read (|
                                                                                                              exposed_value
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Ty.tuple
                                                                                              [],
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)
                                                                                        |)))
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Ty.tuple [],
                                                                                Value.Tuple []
                                                                              |)))
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |)
                                                              |))
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "p3_challenger::CanObserve",
                        Challenger,
                        [],
                        [ Commitment ],
                        "observe",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| challenger |) |) |);
                        M.call_closure (|
                          Commitment,
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Commitment,
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_array_field (|
                                M.deref (| M.read (| commitment_per_phase |) |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ cumulative_sums :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                          Ty.path "alloc::alloc::Global"
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "itertools::Itertools",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "core::option::Option") [] [ Challenge ])
                          ],
                        [],
                        [],
                        "collect_vec",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ]
                                (Ty.apply (Ty.path "core::option::Option") [] [ Challenge ])
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ]
                                (Ty.apply (Ty.path "core::option::Option") [] [ Challenge ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| exposed_values_per_phase_per_air |) |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply (Ty.path "core::option::Option") [] [ Challenge ],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let exposed_values_per_phase :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Challenge;
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  γ
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "len",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (|
                                                                                exposed_values_per_phase
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.never_to_any (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::panic_fmt",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  M.get_associated_function (|
                                                                    Ty.path "core::fmt::Arguments",
                                                                    "new_const",
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (|
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  1
                                                                              ]
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "str" ]
                                                                              ],
                                                                            Value.Array
                                                                              [
                                                                                mk_str (|
                                                                                  "Verifier does not support more than 1 challenge phase"
                                                                                |)
                                                                              ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |) in
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Challenge ],
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Challenge ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Challenge;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ],
                                                      "map",
                                                      [],
                                                      [
                                                        Challenge;
                                                        Ty.function
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ]
                                                          Challenge
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Challenge;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          "first",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Challenge;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Challenge;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        exposed_values_per_phase
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              ltac:(M.monadic
                                                                (M.match_operator (|
                                                                  Challenge,
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Challenge;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ],
                                                                    α0
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let exposed_values :=
                                                                          M.copy (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ],
                                                                            γ
                                                                          |) in
                                                                        M.read (|
                                                                          let~ _ : Ty.tuple [] :=
                                                                            M.match_operator (|
                                                                              Ty.tuple [],
                                                                              M.alloc (|
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ]
                                                                                  ],
                                                                                Value.Tuple
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            "len",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.deref (|
                                                                                                M.read (|
                                                                                                  exposed_values
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          1
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        0
                                                                                      |) in
                                                                                    let γ0_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        1
                                                                                      |) in
                                                                                    let left_val :=
                                                                                      M.copy (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ],
                                                                                        γ0_0
                                                                                      |) in
                                                                                    let right_val :=
                                                                                      M.copy (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ],
                                                                                        γ0_1
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      Ty.tuple [],
                                                                                      M.alloc (|
                                                                                        Ty.tuple [],
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  Ty.path
                                                                                                    "bool",
                                                                                                  UnOp.not (|
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "bool",
                                                                                                      BinOp.eq,
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          M.deref (|
                                                                                                            M.read (|
                                                                                                              left_val
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          M.deref (|
                                                                                                            M.read (|
                                                                                                              right_val
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.never_to_any (|
                                                                                              M.read (|
                                                                                                let~
                                                                                                      kind :
                                                                                                    Ty.path
                                                                                                      "core::panicking::AssertKind" :=
                                                                                                  Value.StructTuple
                                                                                                    "core::panicking::AssertKind::Eq"
                                                                                                    []
                                                                                                    []
                                                                                                    [] in
                                                                                                M.alloc (|
                                                                                                  Ty.path
                                                                                                    "never",
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "never",
                                                                                                    M.get_function (|
                                                                                                      "core::panicking::assert_failed",
                                                                                                      [],
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "usize";
                                                                                                        Ty.path
                                                                                                          "usize"
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        kind
                                                                                                      |);
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                left_val
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      |);
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                right_val
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      |);
                                                                                                      Value.StructTuple
                                                                                                        "core::option::Option::Some"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::fmt::Arguments"
                                                                                                        ]
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            Ty.path
                                                                                                              "core::fmt::Arguments",
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.path
                                                                                                                "core::fmt::Arguments",
                                                                                                              "new_const",
                                                                                                              [
                                                                                                                Value.Integer
                                                                                                                  IntegerKind.Usize
                                                                                                                  1
                                                                                                              ],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.alloc (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "array")
                                                                                                                        [
                                                                                                                          Value.Integer
                                                                                                                            IntegerKind.Usize
                                                                                                                            1
                                                                                                                        ]
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "str"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      Value.Array
                                                                                                                        [
                                                                                                                          mk_str (|
                                                                                                                            "Only exposed value should be cumulative sum"
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                    ]
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (Value.Tuple
                                                                                              []))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |) in
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Challenge ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::index::Index",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                [ Ty.path "usize" ],
                                                                                "index",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      exposed_values
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  0
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |)))
                                                            | _ =>
                                                              M.impossible
                                                                "wrong number of arguments"
                                                            end))
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |) in
                  let~ sum : Challenge :=
                    M.call_closure (|
                      Challenge,
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.function
                              [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ]
                              Challenge
                          ],
                        [],
                        [],
                        "sum",
                        [],
                        [ Challenge ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.function
                                [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ]
                                Challenge
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Challenge;
                              Ty.function
                                [ Ty.apply (Ty.path "core::option::Option") [] [ Challenge ] ]
                                Challenge
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply (Ty.path "core::option::Option") [] [ Challenge ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.read (| cumulative_sums |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Challenge,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Challenge ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let c :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Challenge ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Challenge,
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Challenge ],
                                                  "unwrap_or",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| c |);
                                                  M.read (|
                                                    get_constant (|
                                                      "p3_field::field::FieldAlgebra::ZERO",
                                                      Challenge
                                                    |)
                                                  |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |) in
                  let~ result :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.tuple [];
                          Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpError"
                        ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.tuple [];
                          Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpError"
                        ],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Challenge,
                                      [],
                                      [ Challenge ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, sum |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Challenge
                                        |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            Value.StructTuple
                              "core::result::Result::Ok"
                              []
                              [
                                Ty.tuple [];
                                Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpError"
                              ]
                              [ Value.Tuple [] ]));
                        fun γ =>
                          ltac:(M.monadic
                            (Value.StructTuple
                              "core::result::Result::Err"
                              []
                              [
                                Ty.tuple [];
                                Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpError"
                              ]
                              [
                                Value.StructTuple
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpError::NonZeroCumulativeSum"
                                  []
                                  []
                                  []
                              ]))
                      ]
                    |) in
                  let~ verifier_data :
                      Ty.apply
                        (Ty.path "openvm_stark_backend::interaction::RapPhaseVerifierData")
                        []
                        [ Challenge ] :=
                    Value.mkStructRecord
                      "openvm_stark_backend::interaction::RapPhaseVerifierData"
                      []
                      [ Challenge ]
                      [
                        ("challenges_per_phase",
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ]
                                ],
                              "into_vec",
                              [],
                              [ Ty.path "alloc::alloc::Global" ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ])
                                  (Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]),
                                [
                                  M.read (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Challenge; Ty.path "alloc::alloc::Global" ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "new",
                                        [],
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Challenge; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          Value.Array
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Challenge; Ty.path "alloc::alloc::Global" ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Challenge ],
                                                  "to_vec",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ Challenge ]
                                                      ],
                                                    M.pointer_coercion
                                                      M.PointerCoercion.Unsize
                                                      (Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [ Challenge ]
                                                        ])
                                                      (Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Challenge ]
                                                        ]),
                                                    [ M.borrow (| Pointer.Kind.Ref, challenges |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      ]
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |))
                      ] in
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::RapPhaseVerifierData")
                          []
                          [ Challenge ];
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple [];
                            Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpError"
                          ]
                      ],
                    Value.Tuple [ M.read (| verifier_data |); M.read (| result |) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F Challenge Challenger : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::interaction::RapPhaseSeq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F; Challenge; Challenger ]
          (Self F Challenge Challenger)
          (* Instance *)
          [
            ("PartialProof", InstanceField.Ty (_PartialProof F Challenge Challenger));
            ("PartialProvingKey", InstanceField.Ty (_PartialProvingKey F Challenge Challenger));
            ("Error", InstanceField.Ty (_Error F Challenge Challenger));
            ("value_ID", InstanceField.Method (value_ID F Challenge Challenger));
            ("log_up_security_params",
              InstanceField.Method (log_up_security_params F Challenge Challenger));
            ("generate_pk_per_air",
              InstanceField.Method (generate_pk_per_air F Challenge Challenger));
            ("partially_prove", InstanceField.Method (partially_prove F Challenge Challenger));
            ("partially_verify", InstanceField.Method (partially_verify F Challenge Challenger))
          ].
    End Impl_openvm_stark_backend_interaction_RapPhaseSeq_where_p3_field_field_Field_F_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_Challenge_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_challenger_grinding_challenger_GrindingChallenger_Challenger_F_Challenge_Challenger_for_openvm_stark_backend_interaction_fri_log_up_FriLogUpPhase_F_Challenge_Challenger.
    
    Definition value_STARK_LU_NUM_CHALLENGES
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 2 |))).
    
    Global Instance Instance_IsConstant_value_STARK_LU_NUM_CHALLENGES :
      M.IsFunction.C
        "openvm_stark_backend::interaction::fri_log_up::STARK_LU_NUM_CHALLENGES"
        value_STARK_LU_NUM_CHALLENGES.
    Admitted.
    Global Typeclasses Opaque value_STARK_LU_NUM_CHALLENGES.
    
    Definition value_STARK_LU_NUM_EXPOSED_VALUES
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 1 |))).
    
    Global Instance Instance_IsConstant_value_STARK_LU_NUM_EXPOSED_VALUES :
      M.IsFunction.C
        "openvm_stark_backend::interaction::fri_log_up::STARK_LU_NUM_EXPOSED_VALUES"
        value_STARK_LU_NUM_EXPOSED_VALUES.
    Admitted.
    Global Typeclasses Opaque value_STARK_LU_NUM_EXPOSED_VALUES.
    
    
    (*
    pub fn eval_fri_log_up_phase<AB>(
        builder: &mut AB,
        symbolic_interactions: &[SymbolicInteraction<AB::F>],
        max_constraint_degree: usize,
    ) where
        AB: InteractionBuilder + PermutationAirBuilderWithExposedValues,
    {
        let exposed_values = builder.permutation_exposed_values();
        // There are interactions, add constraints for the virtual columns
        assert_eq!(
            exposed_values.len(),
            1,
            "Should have one exposed value for cumulative_sum"
        );
        let cumulative_sum = exposed_values[0];
    
        let rand_elems = builder.permutation_randomness();
    
        let perm = builder.permutation();
        let (perm_local, perm_next) = (perm.row_slice(0), perm.row_slice(1));
        let perm_local: &[AB::VarEF] = ( *perm_local).borrow();
        let perm_next: &[AB::VarEF] = ( *perm_next).borrow();
    
        let all_interactions = builder.all_interactions().to_vec();
        let FriLogUpProvingKey {
            interaction_partitions,
        } = find_interaction_chunks(symbolic_interactions, max_constraint_degree);
        let num_chunks = interaction_partitions.len();
        debug_assert_eq!(num_chunks + 1, perm_local.len());
    
        let phi_local = *perm_local.last().unwrap();
        let phi_next = *perm_next.last().unwrap();
    
        let alpha = rand_elems[0];
        let betas = generate_betas(rand_elems[1].into(), &all_interactions);
    
        let phi_lhs = phi_next.into() - phi_local.into();
        let mut phi_rhs = AB::ExprEF::ZERO;
        let mut phi_0 = AB::ExprEF::ZERO;
    
        for (chunk_idx, part) in interaction_partitions.iter().enumerate() {
            let denoms_per_chunk = part
                .iter()
                .map(|&interaction_idx| {
                    let interaction = &all_interactions[interaction_idx];
                    assert!(
                        !interaction.message.is_empty(),
                        "fields should not be empty"
                    );
                    let mut field_hash = AB::ExprEF::ZERO;
                    let b = AB::Expr::from_canonical_u32(interaction.bus_index as u32 + 1);
                    for (field, beta) in interaction.message.iter().chain([&b]).zip(&betas) {
                        field_hash += beta.clone() * field.clone();
                    }
                    field_hash + alpha.into()
                })
                .collect_vec();
    
            let mut row_lhs: AB::ExprEF = perm_local[chunk_idx].into();
            for denom in denoms_per_chunk.iter() {
                row_lhs *= denom.clone();
            }
    
            let mut row_rhs = AB::ExprEF::ZERO;
            for (i, &interaction_idx) in part.iter().enumerate() {
                let interaction = &all_interactions[interaction_idx];
                let mut term: AB::ExprEF = interaction.count.clone().into();
                for (j, denom) in denoms_per_chunk.iter().enumerate() {
                    if i != j {
                        term *= denom.clone();
                    }
                }
                row_rhs += term;
            }
    
            // Some analysis on the degrees of row_lhs and row_rhs:
            //
            // Let max_field_degree_i be the maximum degree of all fields in interaction i
            // for the AIR. Let count_degree_i to the degree of `count` in interaction i.
            //
            // By construction, the degree of row_lhs is bounded by 1 + sum_i(max_field_degree_i),
            // and the degree of row_rhs is bounded by max_i(count_degree_i + sum_{j!=i}(max_field_degree_j))
            builder.assert_eq_ext(row_lhs, row_rhs);
    
            phi_0 += perm_local[chunk_idx].into();
            phi_rhs += perm_next[chunk_idx].into();
        }
    
        // Running sum constraints
        builder.when_transition().assert_eq_ext(phi_lhs, phi_rhs);
        builder
            .when_first_row()
            .assert_eq_ext( *perm_local.last().unwrap(), phi_0);
        builder
            .when_last_row()
            .assert_eq_ext( *perm_local.last().unwrap(), cumulative_sum);
    }
    *)
    Definition eval_fri_log_up_phase (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ AB ], [ builder; symbolic_interactions; max_constraint_degree ] =>
        ltac:(M.monadic
          (let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
          let symbolic_interactions :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                        ]
                    ]
                ],
              symbolic_interactions
            |) in
          let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
          M.read (|
            let~ exposed_values :
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::ExtensionBuilder" [] [] AB "VarEF" ]
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::ExtensionBuilder" [] [] AB "VarEF" ]
                  ],
                M.get_trait_method (|
                  "openvm_stark_backend::rap::PermutationAirBuilderWithExposedValues",
                  AB,
                  [],
                  [],
                  "permutation_exposed_values",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                    ],
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.path "usize",
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_air::air::ExtensionBuilder"
                                    []
                                    []
                                    AB
                                    "VarEF"
                                ],
                              "len",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.read (| exposed_values |) |)
                              |)
                            ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 1 |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val :=
                        M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                      let right_val :=
                        M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (|
                                M.read (|
                                  let~ kind : Ty.path "core::panicking::AssertKind" :=
                                    Value.StructTuple "core::panicking::AssertKind::Eq" [] [] [] in
                                  M.alloc (|
                                    Ty.path "never",
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (|
                                        "core::panicking::assert_failed",
                                        [],
                                        [ Ty.path "usize"; Ty.path "usize" ]
                                      |),
                                      [
                                        M.read (| kind |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_val |) |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_val |) |)
                                            |)
                                          |)
                                        |);
                                        Value.StructTuple
                                          "core::option::Option::Some"
                                          []
                                          [ Ty.path "core::fmt::Arguments" ]
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_const",
                                                [ Value.Integer IntegerKind.Usize 1 ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "str" ]
                                                          ],
                                                        Value.Array
                                                          [
                                                            mk_str (|
                                                              "Should have one exposed value for cumulative_sum"
                                                            |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |)))
                ]
              |) in
            let~ cumulative_sum :
                Ty.associated_in_trait "p3_air::air::ExtensionBuilder" [] [] AB "VarEF" :=
              M.read (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| exposed_values |) |),
                  Value.Integer IntegerKind.Usize 0
                |)
              |) in
            let~ rand_elems :
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_air::air::PermutationAirBuilder"
                          []
                          []
                          AB
                          "RandomVar"
                      ]
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_air::air::PermutationAirBuilder"
                          []
                          []
                          AB
                          "RandomVar"
                      ]
                  ],
                M.get_trait_method (|
                  "p3_air::air::PermutationAirBuilder",
                  AB,
                  [],
                  [],
                  "permutation_randomness",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
              |) in
            let~ perm : Ty.associated_in_trait "p3_air::air::PermutationAirBuilder" [] [] AB "MP" :=
              M.call_closure (|
                Ty.associated_in_trait "p3_air::air::PermutationAirBuilder" [] [] AB "MP",
                M.get_trait_method (|
                  "p3_air::air::PermutationAirBuilder",
                  AB,
                  [],
                  [],
                  "permutation",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
              |) in
            M.alloc (|
              Ty.tuple [],
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::ExtensionBuilder" [] [] AB "VarEF" ]
                        (Ty.associated_in_trait "p3_air::air::PermutationAirBuilder" [] [] AB "MP")
                        "{{synthetic}}'2";
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::ExtensionBuilder" [] [] AB "VarEF" ]
                        (Ty.associated_in_trait "p3_air::air::PermutationAirBuilder" [] [] AB "MP")
                        "{{synthetic}}'2"
                    ],
                  Value.Tuple
                    [
                      M.call_closure (|
                        Ty.associated_in_trait
                          "p3_matrix::Matrix"
                          []
                          [ Ty.associated_in_trait "p3_air::air::ExtensionBuilder" [] [] AB "VarEF"
                          ]
                          (Ty.associated_in_trait
                            "p3_air::air::PermutationAirBuilder"
                            []
                            []
                            AB
                            "MP")
                          "{{synthetic}}'2",
                        M.get_trait_method (|
                          "p3_matrix::Matrix",
                          Ty.associated_in_trait "p3_air::air::PermutationAirBuilder" [] [] AB "MP",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::ExtensionBuilder" [] [] AB "VarEF"
                          ],
                          "row_slice",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, perm |); Value.Integer IntegerKind.Usize 0 ]
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait
                          "p3_matrix::Matrix"
                          []
                          [ Ty.associated_in_trait "p3_air::air::ExtensionBuilder" [] [] AB "VarEF"
                          ]
                          (Ty.associated_in_trait
                            "p3_air::air::PermutationAirBuilder"
                            []
                            []
                            AB
                            "MP")
                          "{{synthetic}}'2",
                        M.get_trait_method (|
                          "p3_matrix::Matrix",
                          Ty.associated_in_trait "p3_air::air::PermutationAirBuilder" [] [] AB "MP",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::ExtensionBuilder" [] [] AB "VarEF"
                          ],
                          "row_slice",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, perm |); Value.Integer IntegerKind.Usize 1 ]
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let perm_local :=
                        M.copy (|
                          Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_air::air::ExtensionBuilder"
                                []
                                []
                                AB
                                "VarEF"
                            ]
                            (Ty.associated_in_trait
                              "p3_air::air::PermutationAirBuilder"
                              []
                              []
                              AB
                              "MP")
                            "{{synthetic}}'2",
                          γ0_0
                        |) in
                      let perm_next :=
                        M.copy (|
                          Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_air::air::ExtensionBuilder"
                                []
                                []
                                AB
                                "VarEF"
                            ]
                            (Ty.associated_in_trait
                              "p3_air::air::PermutationAirBuilder"
                              []
                              []
                              AB
                              "MP")
                            "{{synthetic}}'2",
                          γ0_1
                        |) in
                      M.read (|
                        let~ perm_local :
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_air::air::ExtensionBuilder"
                                      []
                                      []
                                      AB
                                      "VarEF"
                                  ]
                              ] :=
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "VarEF"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::borrow::Borrow",
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::ExtensionBuilder"
                                        []
                                        []
                                        AB
                                        "VarEF"
                                    ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "VarEF"
                                      ]
                                  ],
                                  "borrow",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::ExtensionBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "VarEF"
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::ExtensionBuilder"
                                                []
                                                []
                                                AB
                                                "VarEF"
                                            ]
                                            (Ty.associated_in_trait
                                              "p3_air::air::PermutationAirBuilder"
                                              []
                                              []
                                              AB
                                              "MP")
                                            "{{synthetic}}'2",
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, perm_local |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        let~ perm_next :
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_air::air::ExtensionBuilder"
                                      []
                                      []
                                      AB
                                      "VarEF"
                                  ]
                              ] :=
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "VarEF"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::borrow::Borrow",
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::ExtensionBuilder"
                                        []
                                        []
                                        AB
                                        "VarEF"
                                    ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "VarEF"
                                      ]
                                  ],
                                  "borrow",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::ExtensionBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "VarEF"
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::ExtensionBuilder"
                                                []
                                                []
                                                AB
                                                "VarEF"
                                            ]
                                            (Ty.associated_in_trait
                                              "p3_air::air::PermutationAirBuilder"
                                              []
                                              []
                                              AB
                                              "MP")
                                            "{{synthetic}}'2",
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, perm_next |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        let~ all_interactions :
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ] :=
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ],
                              "to_vec",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::Interaction")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "openvm_stark_backend::interaction::InteractionBuilder",
                                      AB,
                                      [],
                                      [],
                                      "all_interactions",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| builder |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |) in
                        M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                              M.call_closure (|
                                Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                M.get_function (|
                                  "openvm_stark_backend::interaction::fri_log_up::find_interaction_chunks",
                                  [],
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| symbolic_interactions |) |)
                                  |);
                                  M.read (| max_constraint_degree |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_record_field (|
                                      γ,
                                      "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                      "interaction_partitions"
                                    |) in
                                  let interaction_partitions :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      γ0_0
                                    |) in
                                  M.read (|
                                    let~ num_chunks : Ty.path "usize" :=
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, interaction_partitions |) ]
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (|
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ],
                                                      Value.Tuple
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              Ty.path "usize",
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.add,
                                                                [
                                                                  M.read (| num_chunks |);
                                                                  Value.Integer IntegerKind.Usize 1
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              Ty.path "usize",
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::ExtensionBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "VarEF"
                                                                    ],
                                                                  "len",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| perm_local |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let left_val :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              γ0_0
                                                            |) in
                                                          let right_val :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              γ0_1
                                                            |) in
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.path "bool",
                                                                        UnOp.not (|
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            BinOp.eq,
                                                                            [
                                                                              M.read (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    left_val
                                                                                  |)
                                                                                |)
                                                                              |);
                                                                              M.read (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    right_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      let~ kind :
                                                                          Ty.path
                                                                            "core::panicking::AssertKind" :=
                                                                        Value.StructTuple
                                                                          "core::panicking::AssertKind::Eq"
                                                                          []
                                                                          []
                                                                          [] in
                                                                      M.alloc (|
                                                                        Ty.path "never",
                                                                        M.call_closure (|
                                                                          Ty.path "never",
                                                                          M.get_function (|
                                                                            "core::panicking::assert_failed",
                                                                            [],
                                                                            [
                                                                              Ty.path "usize";
                                                                              Ty.path "usize"
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.read (| kind |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      left_val
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      right_val
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            Value.StructTuple
                                                                              "core::option::Option::None"
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::fmt::Arguments"
                                                                              ]
                                                                              []
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic (Value.Tuple []))
                                                            ]
                                                          |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |) in
                                    let~ phi_local :
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "VarEF" :=
                                      M.read (|
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::ExtensionBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "VarEF"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::ExtensionBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "VarEF"
                                                    ]
                                                ],
                                              "unwrap",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::ExtensionBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "VarEF"
                                                      ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::ExtensionBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "VarEF"
                                                    ],
                                                  "last",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| perm_local |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |) in
                                    let~ phi_next :
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "VarEF" :=
                                      M.read (|
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::ExtensionBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "VarEF"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::ExtensionBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "VarEF"
                                                    ]
                                                ],
                                              "unwrap",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::ExtensionBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "VarEF"
                                                      ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::ExtensionBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "VarEF"
                                                    ],
                                                  "last",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| perm_next |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |) in
                                    let~ alpha :
                                        Ty.associated_in_trait
                                          "p3_air::air::PermutationAirBuilder"
                                          []
                                          []
                                          AB
                                          "RandomVar" :=
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          M.deref (| M.read (| rand_elems |) |),
                                          Value.Integer IntegerKind.Usize 0
                                        |)
                                      |) in
                                    let~ betas :
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF";
                                            Ty.path "alloc::alloc::Global"
                                          ] :=
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.get_function (|
                                          "openvm_stark_backend::interaction::utils::generate_betas",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF";
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF",
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.associated_in_trait
                                                "p3_air::air::PermutationAirBuilder"
                                                []
                                                []
                                                AB
                                                "RandomVar",
                                              [],
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::ExtensionBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "ExprEF"
                                              ],
                                              "into",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| rand_elems |) |),
                                                  Value.Integer IntegerKind.Usize 1
                                                |)
                                              |)
                                            ]
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::interaction::Interaction")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::interaction::Interaction")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        all_interactions
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |) in
                                    let~ phi_lhs :
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "ExprEF" :=
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "ExprEF",
                                        M.get_trait_method (|
                                          "core::ops::arith::Sub",
                                          Ty.associated_in_trait
                                            "p3_air::air::ExtensionBuilder"
                                            []
                                            []
                                            AB
                                            "ExprEF",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF"
                                          ],
                                          "sub",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF",
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.associated_in_trait
                                                "p3_air::air::ExtensionBuilder"
                                                []
                                                []
                                                AB
                                                "VarEF",
                                              [],
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::ExtensionBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "ExprEF"
                                              ],
                                              "into",
                                              [],
                                              []
                                            |),
                                            [ M.read (| phi_next |) ]
                                          |);
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF",
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.associated_in_trait
                                                "p3_air::air::ExtensionBuilder"
                                                []
                                                []
                                                AB
                                                "VarEF",
                                              [],
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::ExtensionBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "ExprEF"
                                              ],
                                              "into",
                                              [],
                                              []
                                            |),
                                            [ M.read (| phi_local |) ]
                                          |)
                                        ]
                                      |) in
                                    let~ phi_rhs :
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "ExprEF" :=
                                      M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::ExtensionBuilder"
                                            []
                                            []
                                            AB
                                            "ExprEF"
                                        |)
                                      |) in
                                    let~ phi_0 :
                                        Ty.associated_in_trait
                                          "p3_air::air::ExtensionBuilder"
                                          []
                                          []
                                          AB
                                          "ExprEF" :=
                                      M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::ExtensionBuilder"
                                            []
                                            []
                                            AB
                                            "ExprEF"
                                        |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.read (|
                                        M.use
                                          (M.alloc (|
                                            Ty.tuple [],
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "usize";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ],
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.path "usize";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.path "usize";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.path "usize";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        [],
                                                        [],
                                                        "enumerate",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.path "usize";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "deref",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      interaction_partitions
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ],
                                                        γ
                                                      |) in
                                                    M.read (|
                                                      M.loop (|
                                                        Ty.tuple [],
                                                        ltac:(M.monadic
                                                          (let~ _ : Ty.tuple [] :=
                                                            M.match_operator (|
                                                              Ty.tuple [],
                                                              M.alloc (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "next",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          iter
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ,
                                                                        "core::option::Option::None"
                                                                      |) in
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let γ1_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        0
                                                                      |) in
                                                                    let γ1_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        1
                                                                      |) in
                                                                    let chunk_idx :=
                                                                      M.copy (|
                                                                        Ty.path "usize",
                                                                        γ1_0
                                                                      |) in
                                                                    let part :=
                                                                      M.copy (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        γ1_1
                                                                      |) in
                                                                    M.read (|
                                                                      let~ denoms_per_chunk :
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::ExtensionBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "ExprEF";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ] :=
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::ExtensionBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "ExprEF";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "itertools::Itertools",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::map::Map")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ];
                                                                                Ty.function
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ]
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "ExprEF")
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "collect_vec",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::map::Map")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ];
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.associated_in_trait
                                                                                      "p3_air::air::ExtensionBuilder"
                                                                                      []
                                                                                      []
                                                                                      AB
                                                                                      "ExprEF")
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "map",
                                                                                [],
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "ExprEF";
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.associated_in_trait
                                                                                      "p3_air::air::ExtensionBuilder"
                                                                                      []
                                                                                      []
                                                                                      AB
                                                                                      "ExprEF")
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    "iter",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ]
                                                                                            ],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::deref::Deref",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [],
                                                                                            [],
                                                                                            "deref",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.deref (|
                                                                                                M.read (|
                                                                                                  part
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.closure
                                                                                  (fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      match γ with
                                                                                      | [ α0 ] =>
                                                                                        ltac:(M.monadic
                                                                                          (M.match_operator (|
                                                                                            Ty.associated_in_trait
                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                              []
                                                                                              []
                                                                                              AB
                                                                                              "ExprEF",
                                                                                            M.alloc (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ],
                                                                                              α0
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        γ :=
                                                                                                    M.read (|
                                                                                                      γ
                                                                                                    |) in
                                                                                                  let
                                                                                                        interaction_idx :=
                                                                                                    M.copy (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      γ
                                                                                                    |) in
                                                                                                  M.read (|
                                                                                                    let~
                                                                                                          interaction :
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "openvm_stark_backend::interaction::Interaction")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_air::air::AirBuilder"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  AB
                                                                                                                  "Expr"
                                                                                                              ]
                                                                                                          ] :=
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "openvm_stark_backend::interaction::Interaction")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.associated_in_trait
                                                                                                                      "p3_air::air::AirBuilder"
                                                                                                                      []
                                                                                                                      []
                                                                                                                      AB
                                                                                                                      "Expr"
                                                                                                                  ]
                                                                                                              ],
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::index::Index",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "openvm_stark_backend::interaction::Interaction")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "p3_air::air::AirBuilder"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        AB
                                                                                                                        "Expr"
                                                                                                                    ];
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ],
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ],
                                                                                                              "index",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                all_interactions
                                                                                                              |);
                                                                                                              M.read (|
                                                                                                                interaction_idx
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |) in
                                                                                                    let~
                                                                                                          _ :
                                                                                                        Ty.tuple
                                                                                                          [] :=
                                                                                                      M.match_operator (|
                                                                                                        Ty.tuple
                                                                                                          [],
                                                                                                        M.alloc (|
                                                                                                          Ty.tuple
                                                                                                            [],
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |),
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (let
                                                                                                                    γ :=
                                                                                                                M.use
                                                                                                                  (M.alloc (|
                                                                                                                    Ty.path
                                                                                                                      "bool",
                                                                                                                    UnOp.not (|
                                                                                                                      UnOp.not (|
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.path
                                                                                                                            "bool",
                                                                                                                          M.get_associated_function (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "alloc::vec::Vec")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_air::air::AirBuilder"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  AB
                                                                                                                                  "Expr";
                                                                                                                                Ty.path
                                                                                                                                  "alloc::alloc::Global"
                                                                                                                              ],
                                                                                                                            "is_empty",
                                                                                                                            [],
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                M.deref (|
                                                                                                                                  M.read (|
                                                                                                                                    interaction
                                                                                                                                  |)
                                                                                                                                |),
                                                                                                                                "openvm_stark_backend::interaction::Interaction",
                                                                                                                                "message"
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)) in
                                                                                                              let
                                                                                                                    _ :=
                                                                                                                is_constant_or_break_match (|
                                                                                                                  M.read (|
                                                                                                                    γ
                                                                                                                  |),
                                                                                                                  Value.Bool
                                                                                                                    true
                                                                                                                |) in
                                                                                                              M.never_to_any (|
                                                                                                                M.call_closure (|
                                                                                                                  Ty.path
                                                                                                                    "never",
                                                                                                                  M.get_function (|
                                                                                                                    "core::panicking::panic_fmt",
                                                                                                                    [],
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      Ty.path
                                                                                                                        "core::fmt::Arguments",
                                                                                                                      M.get_associated_function (|
                                                                                                                        Ty.path
                                                                                                                          "core::fmt::Arguments",
                                                                                                                        "new_const",
                                                                                                                        [
                                                                                                                          Value.Integer
                                                                                                                            IntegerKind.Usize
                                                                                                                            1
                                                                                                                        ],
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.Ref,
                                                                                                                          M.deref (|
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.alloc (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "array")
                                                                                                                                  [
                                                                                                                                    Value.Integer
                                                                                                                                      IntegerKind.Usize
                                                                                                                                      1
                                                                                                                                  ]
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "&")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "str"
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                Value.Array
                                                                                                                                  [
                                                                                                                                    mk_str (|
                                                                                                                                      "fields should not be empty"
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)));
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (Value.Tuple
                                                                                                                []))
                                                                                                        ]
                                                                                                      |) in
                                                                                                    let~
                                                                                                          field_hash :
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_air::air::ExtensionBuilder"
                                                                                                          []
                                                                                                          []
                                                                                                          AB
                                                                                                          "ExprEF" :=
                                                                                                      M.read (|
                                                                                                        get_constant (|
                                                                                                          "p3_field::field::FieldAlgebra::ZERO",
                                                                                                          Ty.associated_in_trait
                                                                                                            "p3_air::air::ExtensionBuilder"
                                                                                                            []
                                                                                                            []
                                                                                                            AB
                                                                                                            "ExprEF"
                                                                                                        |)
                                                                                                      |) in
                                                                                                    let~
                                                                                                          b :
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_air::air::AirBuilder"
                                                                                                          []
                                                                                                          []
                                                                                                          AB
                                                                                                          "Expr" :=
                                                                                                      M.call_closure (|
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_air::air::AirBuilder"
                                                                                                          []
                                                                                                          []
                                                                                                          AB
                                                                                                          "Expr",
                                                                                                        M.get_trait_method (|
                                                                                                          "p3_field::field::FieldAlgebra",
                                                                                                          Ty.associated_in_trait
                                                                                                            "p3_air::air::AirBuilder"
                                                                                                            []
                                                                                                            []
                                                                                                            AB
                                                                                                            "Expr",
                                                                                                          [],
                                                                                                          [],
                                                                                                          "from_canonical_u32",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            Ty.path
                                                                                                              "u32",
                                                                                                            BinOp.Wrap.add,
                                                                                                            [
                                                                                                              M.cast
                                                                                                                (Ty.path
                                                                                                                  "u32")
                                                                                                                (M.read (|
                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        interaction
                                                                                                                      |)
                                                                                                                    |),
                                                                                                                    "openvm_stark_backend::interaction::Interaction",
                                                                                                                    "bus_index"
                                                                                                                  |)
                                                                                                                |));
                                                                                                              Value.Integer
                                                                                                                IntegerKind.U32
                                                                                                                1
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |) in
                                                                                                    let~
                                                                                                          _ :
                                                                                                        Ty.tuple
                                                                                                          [] :=
                                                                                                      M.read (|
                                                                                                        M.use
                                                                                                          (M.alloc (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            M.match_operator (|
                                                                                                              Ty.tuple
                                                                                                                [],
                                                                                                              M.alloc (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::iter::adapters::zip::Zip")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::iter::adapters::chain::Chain")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::slice::iter::Iter")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "p3_air::air::AirBuilder"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              AB
                                                                                                                              "Expr"
                                                                                                                          ];
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::array::iter::IntoIter")
                                                                                                                          [
                                                                                                                            Value.Integer
                                                                                                                              IntegerKind.Usize
                                                                                                                              1
                                                                                                                          ]
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_air::air::AirBuilder"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  AB
                                                                                                                                  "Expr"
                                                                                                                              ]
                                                                                                                          ]
                                                                                                                      ];
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::slice::iter::Iter")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.associated_in_trait
                                                                                                                          "p3_air::air::ExtensionBuilder"
                                                                                                                          []
                                                                                                                          []
                                                                                                                          AB
                                                                                                                          "ExprEF"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                M.call_closure (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "core::iter::adapters::zip::Zip")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "core::iter::adapters::chain::Chain")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::slice::iter::Iter")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "p3_air::air::AirBuilder"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                AB
                                                                                                                                "Expr"
                                                                                                                            ];
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::array::iter::IntoIter")
                                                                                                                            [
                                                                                                                              Value.Integer
                                                                                                                                IntegerKind.Usize
                                                                                                                                1
                                                                                                                            ]
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_air::air::AirBuilder"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    AB
                                                                                                                                    "Expr"
                                                                                                                                ]
                                                                                                                            ]
                                                                                                                        ];
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "core::slice::iter::Iter")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.associated_in_trait
                                                                                                                            "p3_air::air::ExtensionBuilder"
                                                                                                                            []
                                                                                                                            []
                                                                                                                            AB
                                                                                                                            "ExprEF"
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::iter::traits::collect::IntoIterator",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::iter::adapters::zip::Zip")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::iter::adapters::chain::Chain")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::slice::iter::Iter")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_air::air::AirBuilder"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  AB
                                                                                                                                  "Expr"
                                                                                                                              ];
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::array::iter::IntoIter")
                                                                                                                              [
                                                                                                                                Value.Integer
                                                                                                                                  IntegerKind.Usize
                                                                                                                                  1
                                                                                                                              ]
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "&")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_air::air::AirBuilder"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      AB
                                                                                                                                      "Expr"
                                                                                                                                  ]
                                                                                                                              ]
                                                                                                                          ];
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::slice::iter::Iter")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              AB
                                                                                                                              "ExprEF"
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                    [],
                                                                                                                    [],
                                                                                                                    "into_iter",
                                                                                                                    [],
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "core::iter::adapters::zip::Zip")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::iter::adapters::chain::Chain")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_air::air::AirBuilder"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    AB
                                                                                                                                    "Expr"
                                                                                                                                ];
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::array::iter::IntoIter")
                                                                                                                                [
                                                                                                                                  Value.Integer
                                                                                                                                    IntegerKind.Usize
                                                                                                                                    1
                                                                                                                                ]
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "p3_air::air::AirBuilder"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        AB
                                                                                                                                        "Expr"
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                            ];
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::slice::iter::Iter")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                AB
                                                                                                                                "ExprEF"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::iter::adapters::chain::Chain")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::slice::iter::Iter")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_air::air::AirBuilder"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  AB
                                                                                                                                  "Expr"
                                                                                                                              ];
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::array::iter::IntoIter")
                                                                                                                              [
                                                                                                                                Value.Integer
                                                                                                                                  IntegerKind.Usize
                                                                                                                                  1
                                                                                                                              ]
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "&")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_air::air::AirBuilder"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      AB
                                                                                                                                      "Expr"
                                                                                                                                  ]
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        [],
                                                                                                                        "zip",
                                                                                                                        [],
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    AB
                                                                                                                                    "ExprEF";
                                                                                                                                  Ty.path
                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                ]
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::iter::adapters::chain::Chain")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_air::air::AirBuilder"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    AB
                                                                                                                                    "Expr"
                                                                                                                                ];
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::array::iter::IntoIter")
                                                                                                                                [
                                                                                                                                  Value.Integer
                                                                                                                                    IntegerKind.Usize
                                                                                                                                    1
                                                                                                                                ]
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "p3_air::air::AirBuilder"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        AB
                                                                                                                                        "Expr"
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                            ],
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::slice::iter::Iter")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_air::air::AirBuilder"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  AB
                                                                                                                                  "Expr"
                                                                                                                              ],
                                                                                                                            [],
                                                                                                                            [],
                                                                                                                            "chain",
                                                                                                                            [],
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "array")
                                                                                                                                [
                                                                                                                                  Value.Integer
                                                                                                                                    IntegerKind.Usize
                                                                                                                                    1
                                                                                                                                ]
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "p3_air::air::AirBuilder"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        AB
                                                                                                                                        "Expr"
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                            ]
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.call_closure (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_air::air::AirBuilder"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    AB
                                                                                                                                    "Expr"
                                                                                                                                ],
                                                                                                                              M.get_associated_function (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "slice")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_air::air::AirBuilder"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      AB
                                                                                                                                      "Expr"
                                                                                                                                  ],
                                                                                                                                "iter",
                                                                                                                                [],
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.borrow (|
                                                                                                                                  Pointer.Kind.Ref,
                                                                                                                                  M.deref (|
                                                                                                                                    M.call_closure (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "slice")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "p3_air::air::AirBuilder"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                AB
                                                                                                                                                "Expr"
                                                                                                                                            ]
                                                                                                                                        ],
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::ops::deref::Deref",
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "alloc::vec::Vec")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "p3_air::air::AirBuilder"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              AB
                                                                                                                                              "Expr";
                                                                                                                                            Ty.path
                                                                                                                                              "alloc::alloc::Global"
                                                                                                                                          ],
                                                                                                                                        [],
                                                                                                                                        [],
                                                                                                                                        "deref",
                                                                                                                                        [],
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.borrow (|
                                                                                                                                          Pointer.Kind.Ref,
                                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                                            M.deref (|
                                                                                                                                              M.read (|
                                                                                                                                                interaction
                                                                                                                                              |)
                                                                                                                                            |),
                                                                                                                                            "openvm_stark_backend::interaction::Interaction",
                                                                                                                                            "message"
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |);
                                                                                                                            Value.Array
                                                                                                                              [
                                                                                                                                M.borrow (|
                                                                                                                                  Pointer.Kind.Ref,
                                                                                                                                  b
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                          ]
                                                                                                                        |);
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.Ref,
                                                                                                                          betas
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |),
                                                                                                              [
                                                                                                                fun
                                                                                                                    γ =>
                                                                                                                  ltac:(M.monadic
                                                                                                                    (let
                                                                                                                          iter :=
                                                                                                                      M.copy (|
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::iter::adapters::zip::Zip")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::iter::adapters::chain::Chain")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_air::air::AirBuilder"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      AB
                                                                                                                                      "Expr"
                                                                                                                                  ];
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "core::array::iter::IntoIter")
                                                                                                                                  [
                                                                                                                                    Value.Integer
                                                                                                                                      IntegerKind.Usize
                                                                                                                                      1
                                                                                                                                  ]
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "&")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "p3_air::air::AirBuilder"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          AB
                                                                                                                                          "Expr"
                                                                                                                                      ]
                                                                                                                                  ]
                                                                                                                              ];
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::slice::iter::Iter")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  AB
                                                                                                                                  "ExprEF"
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                        γ
                                                                                                                      |) in
                                                                                                                    M.read (|
                                                                                                                      M.loop (|
                                                                                                                        Ty.tuple
                                                                                                                          [],
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let~
                                                                                                                                _ :
                                                                                                                              Ty.tuple
                                                                                                                                [] :=
                                                                                                                            M.match_operator (|
                                                                                                                              Ty.tuple
                                                                                                                                [],
                                                                                                                              M.alloc (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "core::option::Option")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.tuple
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "p3_air::air::AirBuilder"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              AB
                                                                                                                                              "Expr"
                                                                                                                                          ];
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              AB
                                                                                                                                              "ExprEF"
                                                                                                                                          ]
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "core::option::Option")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.tuple
                                                                                                                                        [
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "&")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "p3_air::air::AirBuilder"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                AB
                                                                                                                                                "Expr"
                                                                                                                                            ];
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "&")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                AB
                                                                                                                                                "ExprEF"
                                                                                                                                            ]
                                                                                                                                        ]
                                                                                                                                    ],
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::iter::adapters::zip::Zip")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::iter::adapters::chain::Chain")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_air::air::AirBuilder"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  AB
                                                                                                                                                  "Expr"
                                                                                                                                              ];
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::array::iter::IntoIter")
                                                                                                                                              [
                                                                                                                                                Value.Integer
                                                                                                                                                  IntegerKind.Usize
                                                                                                                                                  1
                                                                                                                                              ]
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "&")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "p3_air::air::AirBuilder"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      AB
                                                                                                                                                      "Expr"
                                                                                                                                                  ]
                                                                                                                                              ]
                                                                                                                                          ];
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              AB
                                                                                                                                              "ExprEF"
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                    [],
                                                                                                                                    [],
                                                                                                                                    "next",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.MutRef,
                                                                                                                                      M.deref (|
                                                                                                                                        M.borrow (|
                                                                                                                                          Pointer.Kind.MutRef,
                                                                                                                                          iter
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    (let
                                                                                                                                          _ :=
                                                                                                                                      M.is_struct_tuple (|
                                                                                                                                        γ,
                                                                                                                                        "core::option::Option::None"
                                                                                                                                      |) in
                                                                                                                                    M.never_to_any (|
                                                                                                                                      M.read (|
                                                                                                                                        M.break (||)
                                                                                                                                      |)
                                                                                                                                    |)));
                                                                                                                                fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    (let
                                                                                                                                          γ0_0 :=
                                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                                        γ,
                                                                                                                                        "core::option::Option::Some",
                                                                                                                                        0
                                                                                                                                      |) in
                                                                                                                                    let
                                                                                                                                          γ1_0 :=
                                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                                        γ0_0,
                                                                                                                                        0
                                                                                                                                      |) in
                                                                                                                                    let
                                                                                                                                          γ1_1 :=
                                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                                        γ0_0,
                                                                                                                                        1
                                                                                                                                      |) in
                                                                                                                                    let
                                                                                                                                          field :=
                                                                                                                                      M.copy (|
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "p3_air::air::AirBuilder"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              AB
                                                                                                                                              "Expr"
                                                                                                                                          ],
                                                                                                                                        γ1_0
                                                                                                                                      |) in
                                                                                                                                    let
                                                                                                                                          beta :=
                                                                                                                                      M.copy (|
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              AB
                                                                                                                                              "ExprEF"
                                                                                                                                          ],
                                                                                                                                        γ1_1
                                                                                                                                      |) in
                                                                                                                                    M.read (|
                                                                                                                                      let~
                                                                                                                                            _ :
                                                                                                                                          Ty.tuple
                                                                                                                                            [] :=
                                                                                                                                        M.call_closure (|
                                                                                                                                          Ty.tuple
                                                                                                                                            [],
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::ops::arith::AddAssign",
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              AB
                                                                                                                                              "ExprEF",
                                                                                                                                            [],
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                AB
                                                                                                                                                "ExprEF"
                                                                                                                                            ],
                                                                                                                                            "add_assign",
                                                                                                                                            [],
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.borrow (|
                                                                                                                                              Pointer.Kind.MutRef,
                                                                                                                                              field_hash
                                                                                                                                            |);
                                                                                                                                            M.call_closure (|
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                AB
                                                                                                                                                "ExprEF",
                                                                                                                                              M.get_trait_method (|
                                                                                                                                                "core::ops::arith::Mul",
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  AB
                                                                                                                                                  "ExprEF",
                                                                                                                                                [],
                                                                                                                                                [
                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                    "p3_air::air::AirBuilder"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    AB
                                                                                                                                                    "Expr"
                                                                                                                                                ],
                                                                                                                                                "mul",
                                                                                                                                                [],
                                                                                                                                                []
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                M.call_closure (|
                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    AB
                                                                                                                                                    "ExprEF",
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::clone::Clone",
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "p3_air::air::ExtensionBuilder"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      AB
                                                                                                                                                      "ExprEF",
                                                                                                                                                    [],
                                                                                                                                                    [],
                                                                                                                                                    "clone",
                                                                                                                                                    [],
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.borrow (|
                                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                                      M.deref (|
                                                                                                                                                        M.read (|
                                                                                                                                                          beta
                                                                                                                                                        |)
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |);
                                                                                                                                                M.call_closure (|
                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                    "p3_air::air::AirBuilder"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    AB
                                                                                                                                                    "Expr",
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::clone::Clone",
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "p3_air::air::AirBuilder"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      AB
                                                                                                                                                      "Expr",
                                                                                                                                                    [],
                                                                                                                                                    [],
                                                                                                                                                    "clone",
                                                                                                                                                    [],
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.borrow (|
                                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                                      M.deref (|
                                                                                                                                                        M.read (|
                                                                                                                                                          field
                                                                                                                                                        |)
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              ]
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |) in
                                                                                                                                      M.alloc (|
                                                                                                                                        Ty.tuple
                                                                                                                                          [],
                                                                                                                                        Value.Tuple
                                                                                                                                          []
                                                                                                                                      |)
                                                                                                                                    |)))
                                                                                                                              ]
                                                                                                                            |) in
                                                                                                                          M.alloc (|
                                                                                                                            Ty.tuple
                                                                                                                              [],
                                                                                                                            Value.Tuple
                                                                                                                              []
                                                                                                                          |)))
                                                                                                                      |)
                                                                                                                    |)))
                                                                                                              ]
                                                                                                            |)
                                                                                                          |))
                                                                                                      |) in
                                                                                                    M.alloc (|
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_air::air::ExtensionBuilder"
                                                                                                        []
                                                                                                        []
                                                                                                        AB
                                                                                                        "ExprEF",
                                                                                                      M.call_closure (|
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_air::air::ExtensionBuilder"
                                                                                                          []
                                                                                                          []
                                                                                                          AB
                                                                                                          "ExprEF",
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::arith::Add",
                                                                                                          Ty.associated_in_trait
                                                                                                            "p3_air::air::ExtensionBuilder"
                                                                                                            []
                                                                                                            []
                                                                                                            AB
                                                                                                            "ExprEF",
                                                                                                          [],
                                                                                                          [
                                                                                                            Ty.associated_in_trait
                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                              []
                                                                                                              []
                                                                                                              AB
                                                                                                              "ExprEF"
                                                                                                          ],
                                                                                                          "add",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            field_hash
                                                                                                          |);
                                                                                                          M.call_closure (|
                                                                                                            Ty.associated_in_trait
                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                              []
                                                                                                              []
                                                                                                              AB
                                                                                                              "ExprEF",
                                                                                                            M.get_trait_method (|
                                                                                                              "core::convert::Into",
                                                                                                              Ty.associated_in_trait
                                                                                                                "p3_air::air::PermutationAirBuilder"
                                                                                                                []
                                                                                                                []
                                                                                                                AB
                                                                                                                "RandomVar",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  AB
                                                                                                                  "ExprEF"
                                                                                                              ],
                                                                                                              "into",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                alpha
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)))
                                                                                            ]
                                                                                          |)))
                                                                                      | _ =>
                                                                                        M.impossible
                                                                                          "wrong number of arguments"
                                                                                      end))
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      let~ row_lhs :
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::ExtensionBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "ExprEF" :=
                                                                        M.call_closure (|
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::ExtensionBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "ExprEF",
                                                                          M.get_trait_method (|
                                                                            "core::convert::Into",
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::ExtensionBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "VarEF",
                                                                            [],
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::ExtensionBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "ExprEF"
                                                                            ],
                                                                            "into",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              M.SubPointer.get_array_field (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    perm_local
                                                                                  |)
                                                                                |),
                                                                                M.read (|
                                                                                  chunk_idx
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.read (|
                                                                          M.use
                                                                            (M.alloc (|
                                                                              Ty.tuple [],
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_air::air::ExtensionBuilder"
                                                                                        []
                                                                                        []
                                                                                        AB
                                                                                        "ExprEF"
                                                                                    ],
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      []
                                                                                      [
                                                                                        Ty.associated_in_trait
                                                                                          "p3_air::air::ExtensionBuilder"
                                                                                          []
                                                                                          []
                                                                                          AB
                                                                                          "ExprEF"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::ExtensionBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "ExprEF"
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "into_iter",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                              []
                                                                                              []
                                                                                              AB
                                                                                              "ExprEF"
                                                                                          ],
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            []
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "ExprEF"
                                                                                            ],
                                                                                          "iter",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "slice")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_air::air::ExtensionBuilder"
                                                                                                          []
                                                                                                          []
                                                                                                          AB
                                                                                                          "ExprEF"
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::deref::Deref",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_air::air::ExtensionBuilder"
                                                                                                        []
                                                                                                        []
                                                                                                        AB
                                                                                                        "ExprEF";
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [],
                                                                                                  "deref",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    denoms_per_chunk
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let iter :=
                                                                                        M.copy (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            []
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "ExprEF"
                                                                                            ],
                                                                                          γ
                                                                                        |) in
                                                                                      M.read (|
                                                                                        M.loop (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          ltac:(M.monadic
                                                                                            (let~
                                                                                                  _ :
                                                                                                Ty.tuple
                                                                                                  [] :=
                                                                                              M.match_operator (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                M.alloc (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::option::Option")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "p3_air::air::ExtensionBuilder"
                                                                                                            []
                                                                                                            []
                                                                                                            AB
                                                                                                            "ExprEF"
                                                                                                        ]
                                                                                                    ],
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::option::Option")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.associated_in_trait
                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                              []
                                                                                                              []
                                                                                                              AB
                                                                                                              "ExprEF"
                                                                                                          ]
                                                                                                      ],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::Iter")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "p3_air::air::ExtensionBuilder"
                                                                                                            []
                                                                                                            []
                                                                                                            AB
                                                                                                            "ExprEF"
                                                                                                        ],
                                                                                                      [],
                                                                                                      [],
                                                                                                      "next",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.MutRef,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            iter
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            _ :=
                                                                                                        M.is_struct_tuple (|
                                                                                                          γ,
                                                                                                          "core::option::Option::None"
                                                                                                        |) in
                                                                                                      M.never_to_any (|
                                                                                                        M.read (|
                                                                                                          M.break (||)
                                                                                                        |)
                                                                                                      |)));
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            γ0_0 :=
                                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                                          γ,
                                                                                                          "core::option::Option::Some",
                                                                                                          0
                                                                                                        |) in
                                                                                                      let
                                                                                                            denom :=
                                                                                                        M.copy (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.associated_in_trait
                                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                                []
                                                                                                                []
                                                                                                                AB
                                                                                                                "ExprEF"
                                                                                                            ],
                                                                                                          γ0_0
                                                                                                        |) in
                                                                                                      M.read (|
                                                                                                        let~
                                                                                                              _ :
                                                                                                            Ty.tuple
                                                                                                              [] :=
                                                                                                          M.call_closure (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::arith::MulAssign",
                                                                                                              Ty.associated_in_trait
                                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                                []
                                                                                                                []
                                                                                                                AB
                                                                                                                "ExprEF",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  AB
                                                                                                                  "ExprEF"
                                                                                                              ],
                                                                                                              "mul_assign",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.MutRef,
                                                                                                                row_lhs
                                                                                                              |);
                                                                                                              M.call_closure (|
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  AB
                                                                                                                  "ExprEF",
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::clone::Clone",
                                                                                                                  Ty.associated_in_trait
                                                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                                                    []
                                                                                                                    []
                                                                                                                    AB
                                                                                                                    "ExprEF",
                                                                                                                  [],
                                                                                                                  [],
                                                                                                                  "clone",
                                                                                                                  [],
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        denom
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          Ty.tuple
                                                                                                            [],
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |)
                                                                                                      |)))
                                                                                                ]
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)))
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            |))
                                                                        |) in
                                                                      let~ row_rhs :
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::ExtensionBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "ExprEF" :=
                                                                        M.read (|
                                                                          get_constant (|
                                                                            "p3_field::field::FieldAlgebra::ZERO",
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::ExtensionBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "ExprEF"
                                                                          |)
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.read (|
                                                                          M.use
                                                                            (M.alloc (|
                                                                              Ty.tuple [],
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                    ],
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ]
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "into_iter",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ]
                                                                                          ],
                                                                                        M.get_trait_method (|
                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                          [],
                                                                                          [],
                                                                                          "enumerate",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ],
                                                                                              "iter",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "slice")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize"
                                                                                                          ]
                                                                                                      ],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::ops::deref::Deref",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ],
                                                                                                      [],
                                                                                                      [],
                                                                                                      "deref",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.read (|
                                                                                                            part
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let iter :=
                                                                                        M.copy (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::slice::iter::Iter")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ]
                                                                                            ],
                                                                                          γ
                                                                                        |) in
                                                                                      M.read (|
                                                                                        M.loop (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          ltac:(M.monadic
                                                                                            (let~
                                                                                                  _ :
                                                                                                Ty.tuple
                                                                                                  [] :=
                                                                                              M.match_operator (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                M.alloc (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::option::Option")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "usize"
                                                                                                            ]
                                                                                                        ]
                                                                                                    ],
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::option::Option")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize";
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::Iter")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "usize"
                                                                                                            ]
                                                                                                        ],
                                                                                                      [],
                                                                                                      [],
                                                                                                      "next",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.MutRef,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            iter
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            _ :=
                                                                                                        M.is_struct_tuple (|
                                                                                                          γ,
                                                                                                          "core::option::Option::None"
                                                                                                        |) in
                                                                                                      M.never_to_any (|
                                                                                                        M.read (|
                                                                                                          M.break (||)
                                                                                                        |)
                                                                                                      |)));
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            γ0_0 :=
                                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                                          γ,
                                                                                                          "core::option::Option::Some",
                                                                                                          0
                                                                                                        |) in
                                                                                                      let
                                                                                                            γ1_0 :=
                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                          γ0_0,
                                                                                                          0
                                                                                                        |) in
                                                                                                      let
                                                                                                            γ1_1 :=
                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                          γ0_0,
                                                                                                          1
                                                                                                        |) in
                                                                                                      let
                                                                                                            i :=
                                                                                                        M.copy (|
                                                                                                          Ty.path
                                                                                                            "usize",
                                                                                                          γ1_0
                                                                                                        |) in
                                                                                                      let
                                                                                                            γ1_1 :=
                                                                                                        M.read (|
                                                                                                          γ1_1
                                                                                                        |) in
                                                                                                      let
                                                                                                            interaction_idx :=
                                                                                                        M.copy (|
                                                                                                          Ty.path
                                                                                                            "usize",
                                                                                                          γ1_1
                                                                                                        |) in
                                                                                                      M.read (|
                                                                                                        let~
                                                                                                              interaction :
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "openvm_stark_backend::interaction::Interaction")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.associated_in_trait
                                                                                                                      "p3_air::air::AirBuilder"
                                                                                                                      []
                                                                                                                      []
                                                                                                                      AB
                                                                                                                      "Expr"
                                                                                                                  ]
                                                                                                              ] :=
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.call_closure (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "openvm_stark_backend::interaction::Interaction")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.associated_in_trait
                                                                                                                          "p3_air::air::AirBuilder"
                                                                                                                          []
                                                                                                                          []
                                                                                                                          AB
                                                                                                                          "Expr"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::index::Index",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::vec::Vec")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "openvm_stark_backend::interaction::Interaction")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.associated_in_trait
                                                                                                                            "p3_air::air::AirBuilder"
                                                                                                                            []
                                                                                                                            []
                                                                                                                            AB
                                                                                                                            "Expr"
                                                                                                                        ];
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ],
                                                                                                                  [],
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "usize"
                                                                                                                  ],
                                                                                                                  "index",
                                                                                                                  [],
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    all_interactions
                                                                                                                  |);
                                                                                                                  M.read (|
                                                                                                                    interaction_idx
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |)
                                                                                                          |) in
                                                                                                        let~
                                                                                                              term :
                                                                                                            Ty.associated_in_trait
                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                              []
                                                                                                              []
                                                                                                              AB
                                                                                                              "ExprEF" :=
                                                                                                          M.call_closure (|
                                                                                                            Ty.associated_in_trait
                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                              []
                                                                                                              []
                                                                                                              AB
                                                                                                              "ExprEF",
                                                                                                            M.get_trait_method (|
                                                                                                              "core::convert::Into",
                                                                                                              Ty.associated_in_trait
                                                                                                                "p3_air::air::AirBuilder"
                                                                                                                []
                                                                                                                []
                                                                                                                AB
                                                                                                                "Expr",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  AB
                                                                                                                  "ExprEF"
                                                                                                              ],
                                                                                                              "into",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.call_closure (|
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_air::air::AirBuilder"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  AB
                                                                                                                  "Expr",
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::clone::Clone",
                                                                                                                  Ty.associated_in_trait
                                                                                                                    "p3_air::air::AirBuilder"
                                                                                                                    []
                                                                                                                    []
                                                                                                                    AB
                                                                                                                    "Expr",
                                                                                                                  [],
                                                                                                                  [],
                                                                                                                  "clone",
                                                                                                                  [],
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                      M.deref (|
                                                                                                                        M.read (|
                                                                                                                          interaction
                                                                                                                        |)
                                                                                                                      |),
                                                                                                                      "openvm_stark_backend::interaction::Interaction",
                                                                                                                      "count"
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                          |) in
                                                                                                        let~
                                                                                                              _ :
                                                                                                            Ty.tuple
                                                                                                              [] :=
                                                                                                          M.read (|
                                                                                                            M.use
                                                                                                              (M.alloc (|
                                                                                                                Ty.tuple
                                                                                                                  [],
                                                                                                                M.match_operator (|
                                                                                                                  Ty.tuple
                                                                                                                    [],
                                                                                                                  M.alloc (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::slice::iter::Iter")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              AB
                                                                                                                              "ExprEF"
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                    M.call_closure (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::slice::iter::Iter")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                AB
                                                                                                                                "ExprEF"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::iter::traits::collect::IntoIterator",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::slice::iter::Iter")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  AB
                                                                                                                                  "ExprEF"
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        [],
                                                                                                                        "into_iter",
                                                                                                                        [],
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    AB
                                                                                                                                    "ExprEF"
                                                                                                                                ]
                                                                                                                            ],
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::slice::iter::Iter")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  AB
                                                                                                                                  "ExprEF"
                                                                                                                              ],
                                                                                                                            [],
                                                                                                                            [],
                                                                                                                            "enumerate",
                                                                                                                            [],
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.call_closure (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    AB
                                                                                                                                    "ExprEF"
                                                                                                                                ],
                                                                                                                              M.get_associated_function (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "slice")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_air::air::ExtensionBuilder"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      AB
                                                                                                                                      "ExprEF"
                                                                                                                                  ],
                                                                                                                                "iter",
                                                                                                                                [],
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.borrow (|
                                                                                                                                  Pointer.Kind.Ref,
                                                                                                                                  M.deref (|
                                                                                                                                    M.call_closure (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "slice")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                AB
                                                                                                                                                "ExprEF"
                                                                                                                                            ]
                                                                                                                                        ],
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::ops::deref::Deref",
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "alloc::vec::Vec")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              AB
                                                                                                                                              "ExprEF";
                                                                                                                                            Ty.path
                                                                                                                                              "alloc::alloc::Global"
                                                                                                                                          ],
                                                                                                                                        [],
                                                                                                                                        [],
                                                                                                                                        "deref",
                                                                                                                                        [],
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.borrow (|
                                                                                                                                          Pointer.Kind.Ref,
                                                                                                                                          denoms_per_chunk
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    fun
                                                                                                                        γ =>
                                                                                                                      ltac:(M.monadic
                                                                                                                        (let
                                                                                                                              iter :=
                                                                                                                          M.copy (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_air::air::ExtensionBuilder"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      AB
                                                                                                                                      "ExprEF"
                                                                                                                                  ]
                                                                                                                              ],
                                                                                                                            γ
                                                                                                                          |) in
                                                                                                                        M.read (|
                                                                                                                          M.loop (|
                                                                                                                            Ty.tuple
                                                                                                                              [],
                                                                                                                            ltac:(M.monadic
                                                                                                                              (let~
                                                                                                                                    _ :
                                                                                                                                  Ty.tuple
                                                                                                                                    [] :=
                                                                                                                                M.match_operator (|
                                                                                                                                  Ty.tuple
                                                                                                                                    [],
                                                                                                                                  M.alloc (|
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::option::Option")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.tuple
                                                                                                                                          [
                                                                                                                                            Ty.path
                                                                                                                                              "usize";
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "&")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  AB
                                                                                                                                                  "ExprEF"
                                                                                                                                              ]
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                    M.call_closure (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "core::option::Option")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.tuple
                                                                                                                                            [
                                                                                                                                              Ty.path
                                                                                                                                                "usize";
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "&")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    AB
                                                                                                                                                    "ExprEF"
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                        ],
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  AB
                                                                                                                                                  "ExprEF"
                                                                                                                                              ]
                                                                                                                                          ],
                                                                                                                                        [],
                                                                                                                                        [],
                                                                                                                                        "next",
                                                                                                                                        [],
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.borrow (|
                                                                                                                                          Pointer.Kind.MutRef,
                                                                                                                                          M.deref (|
                                                                                                                                            M.borrow (|
                                                                                                                                              Pointer.Kind.MutRef,
                                                                                                                                              iter
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              _ :=
                                                                                                                                          M.is_struct_tuple (|
                                                                                                                                            γ,
                                                                                                                                            "core::option::Option::None"
                                                                                                                                          |) in
                                                                                                                                        M.never_to_any (|
                                                                                                                                          M.read (|
                                                                                                                                            M.break (||)
                                                                                                                                          |)
                                                                                                                                        |)));
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              γ0_0 :=
                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                            γ,
                                                                                                                                            "core::option::Option::Some",
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              γ1_0 :=
                                                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                                                            γ0_0,
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              γ1_1 :=
                                                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                                                            γ0_0,
                                                                                                                                            1
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              j :=
                                                                                                                                          M.copy (|
                                                                                                                                            Ty.path
                                                                                                                                              "usize",
                                                                                                                                            γ1_0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              denom :=
                                                                                                                                          M.copy (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "&")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  AB
                                                                                                                                                  "ExprEF"
                                                                                                                                              ],
                                                                                                                                            γ1_1
                                                                                                                                          |) in
                                                                                                                                        M.match_operator (|
                                                                                                                                          Ty.tuple
                                                                                                                                            [],
                                                                                                                                          M.alloc (|
                                                                                                                                            Ty.tuple
                                                                                                                                              [],
                                                                                                                                            Value.Tuple
                                                                                                                                              []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            fun
                                                                                                                                                γ =>
                                                                                                                                              ltac:(M.monadic
                                                                                                                                                (let
                                                                                                                                                      γ :=
                                                                                                                                                  M.use
                                                                                                                                                    (M.alloc (|
                                                                                                                                                      Ty.path
                                                                                                                                                        "bool",
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        Ty.path
                                                                                                                                                          "bool",
                                                                                                                                                        BinOp.ne,
                                                                                                                                                        [
                                                                                                                                                          M.read (|
                                                                                                                                                            i
                                                                                                                                                          |);
                                                                                                                                                          M.read (|
                                                                                                                                                            j
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)) in
                                                                                                                                                let
                                                                                                                                                      _ :=
                                                                                                                                                  is_constant_or_break_match (|
                                                                                                                                                    M.read (|
                                                                                                                                                      γ
                                                                                                                                                    |),
                                                                                                                                                    Value.Bool
                                                                                                                                                      true
                                                                                                                                                  |) in
                                                                                                                                                M.read (|
                                                                                                                                                  let~
                                                                                                                                                        _ :
                                                                                                                                                      Ty.tuple
                                                                                                                                                        [] :=
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      Ty.tuple
                                                                                                                                                        [],
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::MulAssign",
                                                                                                                                                        Ty.associated_in_trait
                                                                                                                                                          "p3_air::air::ExtensionBuilder"
                                                                                                                                                          []
                                                                                                                                                          []
                                                                                                                                                          AB
                                                                                                                                                          "ExprEF",
                                                                                                                                                        [],
                                                                                                                                                        [
                                                                                                                                                          Ty.associated_in_trait
                                                                                                                                                            "p3_air::air::ExtensionBuilder"
                                                                                                                                                            []
                                                                                                                                                            []
                                                                                                                                                            AB
                                                                                                                                                            "ExprEF"
                                                                                                                                                        ],
                                                                                                                                                        "mul_assign",
                                                                                                                                                        [],
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.borrow (|
                                                                                                                                                          Pointer.Kind.MutRef,
                                                                                                                                                          term
                                                                                                                                                        |);
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          Ty.associated_in_trait
                                                                                                                                                            "p3_air::air::ExtensionBuilder"
                                                                                                                                                            []
                                                                                                                                                            []
                                                                                                                                                            AB
                                                                                                                                                            "ExprEF",
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::clone::Clone",
                                                                                                                                                            Ty.associated_in_trait
                                                                                                                                                              "p3_air::air::ExtensionBuilder"
                                                                                                                                                              []
                                                                                                                                                              []
                                                                                                                                                              AB
                                                                                                                                                              "ExprEF",
                                                                                                                                                            [],
                                                                                                                                                            [],
                                                                                                                                                            "clone",
                                                                                                                                                            [],
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.borrow (|
                                                                                                                                                              Pointer.Kind.Ref,
                                                                                                                                                              M.deref (|
                                                                                                                                                                M.read (|
                                                                                                                                                                  denom
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |) in
                                                                                                                                                  M.alloc (|
                                                                                                                                                    Ty.tuple
                                                                                                                                                      [],
                                                                                                                                                    Value.Tuple
                                                                                                                                                      []
                                                                                                                                                  |)
                                                                                                                                                |)));
                                                                                                                                            fun
                                                                                                                                                γ =>
                                                                                                                                              ltac:(M.monadic
                                                                                                                                                (Value.Tuple
                                                                                                                                                  []))
                                                                                                                                          ]
                                                                                                                                        |)))
                                                                                                                                  ]
                                                                                                                                |) in
                                                                                                                              M.alloc (|
                                                                                                                                Ty.tuple
                                                                                                                                  [],
                                                                                                                                Value.Tuple
                                                                                                                                  []
                                                                                                                              |)))
                                                                                                                          |)
                                                                                                                        |)))
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |))
                                                                                                          |) in
                                                                                                        let~
                                                                                                              _ :
                                                                                                            Ty.tuple
                                                                                                              [] :=
                                                                                                          M.call_closure (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::arith::AddAssign",
                                                                                                              Ty.associated_in_trait
                                                                                                                "p3_air::air::ExtensionBuilder"
                                                                                                                []
                                                                                                                []
                                                                                                                AB
                                                                                                                "ExprEF",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  AB
                                                                                                                  "ExprEF"
                                                                                                              ],
                                                                                                              "add_assign",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.MutRef,
                                                                                                                row_rhs
                                                                                                              |);
                                                                                                              M.read (|
                                                                                                                term
                                                                                                              |)
                                                                                                            ]
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          Ty.tuple
                                                                                                            [],
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |)
                                                                                                      |)))
                                                                                                ]
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)))
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            |))
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_trait_method (|
                                                                            "p3_air::air::ExtensionBuilder",
                                                                            AB,
                                                                            [],
                                                                            [],
                                                                            "assert_eq_ext",
                                                                            [],
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::ExtensionBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "ExprEF";
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::ExtensionBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "ExprEF"
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.read (| builder |)
                                                                              |)
                                                                            |);
                                                                            M.read (| row_lhs |);
                                                                            M.read (| row_rhs |)
                                                                          ]
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::AddAssign",
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::ExtensionBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "ExprEF",
                                                                            [],
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::ExtensionBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "ExprEF"
                                                                            ],
                                                                            "add_assign",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              phi_0
                                                                            |);
                                                                            M.call_closure (|
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::ExtensionBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "ExprEF",
                                                                              M.get_trait_method (|
                                                                                "core::convert::Into",
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "VarEF",
                                                                                [],
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "ExprEF"
                                                                                ],
                                                                                "into",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  M.SubPointer.get_array_field (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        perm_local
                                                                                      |)
                                                                                    |),
                                                                                    M.read (|
                                                                                      chunk_idx
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::AddAssign",
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::ExtensionBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "ExprEF",
                                                                            [],
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::ExtensionBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "ExprEF"
                                                                            ],
                                                                            "add_assign",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              phi_rhs
                                                                            |);
                                                                            M.call_closure (|
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::ExtensionBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "ExprEF",
                                                                              M.get_trait_method (|
                                                                                "core::convert::Into",
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::ExtensionBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "VarEF",
                                                                                [],
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::ExtensionBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "ExprEF"
                                                                                ],
                                                                                "into",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  M.SubPointer.get_array_field (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        perm_next
                                                                                      |)
                                                                                    |),
                                                                                    M.read (|
                                                                                      chunk_idx
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      M.alloc (|
                                                                        Ty.tuple [],
                                                                        Value.Tuple []
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |) in
                                                          M.alloc (|
                                                            Ty.tuple [],
                                                            Value.Tuple []
                                                          |)))
                                                      |)
                                                    |)))
                                              ]
                                            |)
                                          |))
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "p3_air::air::ExtensionBuilder",
                                          Ty.apply
                                            (Ty.path "p3_air::air::FilteredAirBuilder")
                                            []
                                            [ AB ],
                                          [],
                                          [],
                                          "assert_eq_ext",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF";
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "p3_air::air::FilteredAirBuilder")
                                                []
                                                [ AB ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "p3_air::air::FilteredAirBuilder")
                                                  []
                                                  [ AB ],
                                                M.get_trait_method (|
                                                  "p3_air::air::AirBuilder",
                                                  AB,
                                                  [],
                                                  [],
                                                  "when_transition",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| builder |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.read (| phi_lhs |);
                                          M.read (| phi_rhs |)
                                        ]
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "p3_air::air::ExtensionBuilder",
                                          Ty.apply
                                            (Ty.path "p3_air::air::FilteredAirBuilder")
                                            []
                                            [ AB ],
                                          [],
                                          [],
                                          "assert_eq_ext",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "VarEF";
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "ExprEF"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "p3_air::air::FilteredAirBuilder")
                                                []
                                                [ AB ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "p3_air::air::FilteredAirBuilder")
                                                  []
                                                  [ AB ],
                                                M.get_trait_method (|
                                                  "p3_air::air::AirBuilder",
                                                  AB,
                                                  [],
                                                  [],
                                                  "when_first_row",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| builder |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.read (|
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::ExtensionBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "VarEF"
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::ExtensionBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "VarEF"
                                                        ]
                                                    ],
                                                  "unwrap",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::ExtensionBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "VarEF"
                                                          ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::ExtensionBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "VarEF"
                                                        ],
                                                      "last",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| perm_local |) |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.read (| phi_0 |)
                                        ]
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "p3_air::air::ExtensionBuilder",
                                          Ty.apply
                                            (Ty.path "p3_air::air::FilteredAirBuilder")
                                            []
                                            [ AB ],
                                          [],
                                          [],
                                          "assert_eq_ext",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "VarEF";
                                            Ty.associated_in_trait
                                              "p3_air::air::ExtensionBuilder"
                                              []
                                              []
                                              AB
                                              "VarEF"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "p3_air::air::FilteredAirBuilder")
                                                []
                                                [ AB ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "p3_air::air::FilteredAirBuilder")
                                                  []
                                                  [ AB ],
                                                M.get_trait_method (|
                                                  "p3_air::air::AirBuilder",
                                                  AB,
                                                  [],
                                                  [],
                                                  "when_last_row",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| builder |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.read (|
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::ExtensionBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "VarEF"
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::ExtensionBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "VarEF"
                                                        ]
                                                    ],
                                                  "unwrap",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::ExtensionBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "VarEF"
                                                          ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::ExtensionBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "VarEF"
                                                        ],
                                                      "last",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| perm_local |) |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.read (| cumulative_sum |)
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)))
                            ]
                          |)
                        |)
                      |)))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_eval_fri_log_up_phase :
      M.IsFunction.C
        "openvm_stark_backend::interaction::fri_log_up::eval_fri_log_up_phase"
        eval_fri_log_up_phase.
    Admitted.
    Global Typeclasses Opaque eval_fri_log_up_phase.
    
    (*
    pub(crate) fn find_interaction_chunks<F: Field>(
        interactions: &[SymbolicInteraction<F>],
        max_constraint_degree: usize,
    ) -> FriLogUpProvingKey {
        if interactions.is_empty() {
            return FriLogUpProvingKey::default();
        }
        // First, we sort interaction indices by ascending max field degree
        let max_field_degree = |i: usize| {
            interactions[i]
                .message
                .iter()
                .map(|f| f.degree_multiple())
                .max()
                .unwrap_or(0)
        };
        let mut interaction_idxs = (0..interactions.len()).collect_vec();
        interaction_idxs.sort_by(|&i, &j| {
            let field_cmp = max_field_degree(i).cmp(&max_field_degree(j));
            if field_cmp == std::cmp::Ordering::Equal {
                interactions[i]
                    .count
                    .degree_multiple()
                    .cmp(&interactions[j].count.degree_multiple())
            } else {
                field_cmp
            }
        });
        // Now we greedily pack
        let mut running_sum_field_degree = 0;
        let mut numerator_max_degree = 0;
        let mut interaction_partitions = vec![];
        let mut cur_chunk = vec![];
        for interaction_idx in interaction_idxs {
            let field_degree = max_field_degree(interaction_idx);
            let count_degree = interactions[interaction_idx].count.degree_multiple();
            // Can we add this interaction to the current chunk?
            let new_num_max_degree = max(
                numerator_max_degree + field_degree,
                count_degree + running_sum_field_degree,
            );
            let new_denom_degree = running_sum_field_degree + field_degree;
            if max(new_num_max_degree, new_denom_degree + 1) <= max_constraint_degree {
                // include in current chunk
                cur_chunk.push(interaction_idx);
                numerator_max_degree = new_num_max_degree;
                running_sum_field_degree += field_degree;
            } else {
                // seal current chunk + start new chunk
                if !cur_chunk.is_empty() {
                    // if i == 0, that means the interaction exceeds the max_constraint_degree
                    interaction_partitions.push(mem::take(&mut cur_chunk));
                }
                cur_chunk.push(interaction_idx);
                numerator_max_degree = count_degree;
                running_sum_field_degree = field_degree;
                if max_constraint_degree > 0
                    && max(count_degree, field_degree + 1) > max_constraint_degree
                {
                    panic!("Interaction with field_degree={field_degree}, count_degree={count_degree} exceeds max_constraint_degree={max_constraint_degree}");
                }
            }
        }
        // the last interaction is in a chunk that has not been sealed
        assert!(!cur_chunk.is_empty());
        interaction_partitions.push(cur_chunk);
    
        FriLogUpProvingKey {
            interaction_partitions,
        }
    }
    *)
    Definition find_interaction_chunks (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ interactions; max_constraint_degree ] =>
        ltac:(M.monadic
          (let interactions :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::interaction::Interaction")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ]
                    ]
                ],
              interactions
            |) in
          let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
          M.catch_return
            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey") (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::interaction::Interaction")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ]
                                          ]
                                      ],
                                    "is_empty",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| interactions |) |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.path
                                    "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                  M.get_trait_method (|
                                    "core::default::Default",
                                    Ty.path
                                      "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                                    [],
                                    [],
                                    "default",
                                    [],
                                    []
                                  |),
                                  []
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ max_field_degree : Ty.function [ Ty.path "usize" ] (Ty.path "usize") :=
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.path "usize",
                              M.alloc (| Ty.path "usize", α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| Ty.path "usize", γ |) in
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        "unwrap_or",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                      []
                                                      [ F ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                          []
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.path "usize")
                                              ],
                                            [],
                                            [],
                                            "max",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ]
                                                    (Ty.path "usize")
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                      []
                                                      [ F ]
                                                  ],
                                                [],
                                                [],
                                                "map",
                                                [],
                                                [
                                                  Ty.path "usize";
                                                  Ty.function
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ]
                                                    (Ty.path "usize")
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                        []
                                                        [ F ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                          []
                                                          [ F ]
                                                      ],
                                                    "iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                    []
                                                                    [ F ]
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            [],
                                                            "deref",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (|
                                                                    M.read (| interactions |)
                                                                  |),
                                                                  M.read (| i |)
                                                                |),
                                                                "openvm_stark_backend::interaction::Interaction",
                                                                "message"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        ltac:(M.monadic
                                                          (M.match_operator (|
                                                            Ty.path "usize",
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                    []
                                                                    [ F ]
                                                                ],
                                                              α0
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let f :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                            []
                                                                            [ F ]
                                                                        ],
                                                                      γ
                                                                    |) in
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                        []
                                                                        [ F ],
                                                                      "degree_multiple",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (| M.read (| f |) |)
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)))
                                                      | _ =>
                                                        M.impossible "wrong number of arguments"
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 0
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end)) in
                let~ interaction_idxs :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "itertools::Itertools",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "collect_vec",
                      [],
                      []
                    |),
                    [
                      Value.mkStructRecord
                        "core::ops::range::Range"
                        []
                        [ Ty.path "usize" ]
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                "len",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| interactions |) |)
                                |)
                              ]
                            |))
                        ]
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                      "sort_by",
                      [],
                      [
                        Ty.function
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                          ]
                          (Ty.path "core::cmp::Ordering")
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                            M.get_trait_method (|
                              "core::ops::deref::DerefMut",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "deref_mut",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, interaction_idxs |) ]
                          |)
                        |)
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path "core::cmp::Ordering",
                                  M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.read (| γ |) in
                                        let i := M.copy (| Ty.path "usize", γ |) in
                                        M.match_operator (|
                                          Ty.path "core::cmp::Ordering",
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            α1
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let j := M.copy (| Ty.path "usize", γ |) in
                                                M.read (|
                                                  let~ field_cmp : Ty.path "core::cmp::Ordering" :=
                                                    M.call_closure (|
                                                      Ty.path "core::cmp::Ordering",
                                                      M.get_trait_method (|
                                                        "core::cmp::Ord",
                                                        Ty.path "usize",
                                                        [],
                                                        [],
                                                        "cmp",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              M.get_trait_method (|
                                                                "core::ops::function::Fn",
                                                                Ty.function
                                                                  [ Ty.path "usize" ]
                                                                  (Ty.path "usize"),
                                                                [],
                                                                [ Ty.tuple [ Ty.path "usize" ] ],
                                                                "call",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  max_field_degree
                                                                |);
                                                                Value.Tuple [ M.read (| i |) ]
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path "usize",
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::Fn",
                                                                    Ty.function
                                                                      [ Ty.path "usize" ]
                                                                      (Ty.path "usize"),
                                                                    [],
                                                                    [ Ty.tuple [ Ty.path "usize" ]
                                                                    ],
                                                                    "call",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      max_field_degree
                                                                    |);
                                                                    Value.Tuple [ M.read (| j |) ]
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |) in
                                                  M.alloc (|
                                                    Ty.path "core::cmp::Ordering",
                                                    M.match_operator (|
                                                      Ty.path "core::cmp::Ordering",
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_trait_method (|
                                                                      "core::cmp::PartialEq",
                                                                      Ty.path "core::cmp::Ordering",
                                                                      [],
                                                                      [
                                                                        Ty.path
                                                                          "core::cmp::Ordering"
                                                                      ],
                                                                      "eq",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        field_cmp
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          Ty.path
                                                                            "core::cmp::Ordering",
                                                                          Value.StructTuple
                                                                            "core::cmp::Ordering::Equal"
                                                                            []
                                                                            []
                                                                            []
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.call_closure (|
                                                              Ty.path "core::cmp::Ordering",
                                                              M.get_trait_method (|
                                                                "core::cmp::Ord",
                                                                Ty.path "usize",
                                                                [],
                                                                [],
                                                                "cmp",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Ty.path "usize",
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                          []
                                                                          [ F ],
                                                                        "degree_multiple",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.SubPointer.get_array_field (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  interactions
                                                                                |)
                                                                              |),
                                                                              M.read (| i |)
                                                                            |),
                                                                            "openvm_stark_backend::interaction::Interaction",
                                                                            "count"
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.path "usize",
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                              []
                                                                              [ F ],
                                                                            "degree_multiple",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.SubPointer.get_array_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interactions
                                                                                    |)
                                                                                  |),
                                                                                  M.read (| j |)
                                                                                |),
                                                                                "openvm_stark_backend::interaction::Interaction",
                                                                                "count"
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic (M.read (| field_cmp |)))
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                let~ running_sum_field_degree : Ty.path "usize" :=
                  Value.Integer IntegerKind.Usize 0 in
                let~ numerator_max_degree : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
                let~ interaction_partitions :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |) in
                let~ cur_chunk :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.read (| interaction_idxs |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "usize" ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let interaction_idx :=
                                                  M.copy (| Ty.path "usize", γ0_0 |) in
                                                M.read (|
                                                  let~ field_degree : Ty.path "usize" :=
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_trait_method (|
                                                        "core::ops::function::Fn",
                                                        Ty.function
                                                          [ Ty.path "usize" ]
                                                          (Ty.path "usize"),
                                                        [],
                                                        [ Ty.tuple [ Ty.path "usize" ] ],
                                                        "call",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          max_field_degree
                                                        |);
                                                        Value.Tuple [ M.read (| interaction_idx |) ]
                                                      ]
                                                    |) in
                                                  let~ count_degree : Ty.path "usize" :=
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                          []
                                                          [ F ],
                                                        "degree_multiple",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (|
                                                                M.read (| interactions |)
                                                              |),
                                                              M.read (| interaction_idx |)
                                                            |),
                                                            "openvm_stark_backend::interaction::Interaction",
                                                            "count"
                                                          |)
                                                        |)
                                                      ]
                                                    |) in
                                                  let~ new_num_max_degree : Ty.path "usize" :=
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_function (|
                                                        "core::cmp::max",
                                                        [],
                                                        [ Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.add,
                                                          [
                                                            M.read (| numerator_max_degree |);
                                                            M.read (| field_degree |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.add,
                                                          [
                                                            M.read (| count_degree |);
                                                            M.read (| running_sum_field_degree |)
                                                          ]
                                                        |)
                                                      ]
                                                    |) in
                                                  let~ new_denom_degree : Ty.path "usize" :=
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        M.read (| running_sum_field_degree |);
                                                        M.read (| field_degree |)
                                                      ]
                                                    |) in
                                                  M.alloc (|
                                                    Ty.tuple [],
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        M.get_function (|
                                                                          "core::cmp::max",
                                                                          [],
                                                                          [ Ty.path "usize" ]
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            new_num_max_degree
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.add,
                                                                            [
                                                                              M.read (|
                                                                                new_denom_degree
                                                                              |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.read (|
                                                                        max_constraint_degree
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.read (|
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "push",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      cur_chunk
                                                                    |);
                                                                    M.read (| interaction_idx |)
                                                                  ]
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.write (|
                                                                  numerator_max_degree,
                                                                  M.read (| new_num_max_degree |)
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                let β := running_sum_field_degree in
                                                                M.write (|
                                                                  β,
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.read (| β |);
                                                                      M.read (| field_degree |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                Value.Tuple []
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.read (|
                                                              let~ _ : Ty.tuple [] :=
                                                                M.match_operator (|
                                                                  Ty.tuple [],
                                                                  M.alloc (|
                                                                    Ty.tuple [],
                                                                    Value.Tuple []
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ :=
                                                                          M.use
                                                                            (M.alloc (|
                                                                              Ty.path "bool",
                                                                              UnOp.not (|
                                                                                M.call_closure (|
                                                                                  Ty.path "bool",
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    "is_empty",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      cur_chunk
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)) in
                                                                        let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.Bool true
                                                                          |) in
                                                                        M.read (|
                                                                          let~ _ : Ty.tuple [] :=
                                                                            M.call_closure (|
                                                                              Ty.tuple [],
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                "push",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  interaction_partitions
                                                                                |);
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize";
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  M.get_function (|
                                                                                    "core::mem::take",
                                                                                    [],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          cur_chunk
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |) in
                                                                          M.alloc (|
                                                                            Ty.tuple [],
                                                                            Value.Tuple []
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (Value.Tuple []))
                                                                  ]
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "push",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      cur_chunk
                                                                    |);
                                                                    M.read (| interaction_idx |)
                                                                  ]
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.write (|
                                                                  numerator_max_degree,
                                                                  M.read (| count_degree |)
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.write (|
                                                                  running_sum_field_degree,
                                                                  M.read (| field_degree |)
                                                                |) in
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                M.match_operator (|
                                                                  Ty.tuple [],
                                                                  M.alloc (|
                                                                    Ty.tuple [],
                                                                    Value.Tuple []
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ :=
                                                                          M.use
                                                                            (M.alloc (|
                                                                              Ty.path "bool",
                                                                              LogicalOp.and (|
                                                                                M.call_closure (|
                                                                                  Ty.path "bool",
                                                                                  BinOp.gt,
                                                                                  [
                                                                                    M.read (|
                                                                                      max_constraint_degree
                                                                                    |);
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      0
                                                                                  ]
                                                                                |),
                                                                                ltac:(M.monadic
                                                                                  (M.call_closure (|
                                                                                    Ty.path "bool",
                                                                                    BinOp.gt,
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        M.get_function (|
                                                                                          "core::cmp::max",
                                                                                          [],
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            count_degree
                                                                                          |);
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            BinOp.Wrap.add,
                                                                                            [
                                                                                              M.read (|
                                                                                                field_degree
                                                                                              |);
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                1
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.read (|
                                                                                        max_constraint_degree
                                                                                      |)
                                                                                    ]
                                                                                  |)))
                                                                              |)
                                                                            |)) in
                                                                        let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.Bool true
                                                                          |) in
                                                                        M.never_to_any (|
                                                                          M.call_closure (|
                                                                            Ty.path "never",
                                                                            M.get_function (|
                                                                              "core::panicking::panic_fmt",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path
                                                                                  "core::fmt::Arguments",
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "core::fmt::Arguments",
                                                                                  "new_v1",
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      3;
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      3
                                                                                  ],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.alloc (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "array")
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                3
                                                                                            ]
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ],
                                                                                          Value.Array
                                                                                            [
                                                                                              mk_str (|
                                                                                                "Interaction with field_degree="
                                                                                              |);
                                                                                              mk_str (|
                                                                                                ", count_degree="
                                                                                              |);
                                                                                              mk_str (|
                                                                                                " exceeds max_constraint_degree="
                                                                                              |)
                                                                                            ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.alloc (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "array")
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                3
                                                                                            ]
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::fmt::rt::Argument"
                                                                                            ],
                                                                                          Value.Array
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "core::fmt::rt::Argument",
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::rt::Argument",
                                                                                                  "new_display",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        field_degree
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "core::fmt::rt::Argument",
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::rt::Argument",
                                                                                                  "new_display",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        count_degree
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "core::fmt::rt::Argument",
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::rt::Argument",
                                                                                                  "new_display",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        max_constraint_degree
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (Value.Tuple []))
                                                                  ]
                                                                |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                        "is_empty",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, cur_chunk |) ]
                                    |)
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "assertion failed: !cur_chunk.is_empty()" |) ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "push",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, interaction_partitions |);
                      M.read (| cur_chunk |)
                    ]
                  |) in
                M.alloc (|
                  Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey",
                  Value.mkStructRecord
                    "openvm_stark_backend::interaction::fri_log_up::FriLogUpProvingKey"
                    []
                    []
                    [ ("interaction_partitions", M.read (| interaction_partitions |)) ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_find_interaction_chunks :
      M.IsFunction.C
        "openvm_stark_backend::interaction::fri_log_up::find_interaction_chunks"
        find_interaction_chunks.
    Admitted.
    Global Typeclasses Opaque find_interaction_chunks.
  End fri_log_up.
End interaction.
